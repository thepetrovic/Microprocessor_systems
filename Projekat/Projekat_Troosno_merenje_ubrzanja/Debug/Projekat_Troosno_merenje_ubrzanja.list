
Projekat_Troosno_merenje_ubrzanja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c98  08003c98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c98  08003c98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08003d10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003d10  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a73  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ef  00000000  00000000  00024b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  00025f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00026448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bce  00000000  00000000  000268d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067d3  00000000  00000000  0003d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083265  00000000  00000000  00043c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a30  00000000  00000000  000c6f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003bd8 	.word	0x08003bd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003bd8 	.word	0x08003bd8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	; 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_f2iz>:
 8000e4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e54:	d30f      	bcc.n	8000e76 <__aeabi_f2iz+0x2a>
 8000e56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5e:	d90d      	bls.n	8000e7c <__aeabi_f2iz+0x30>
 8000e60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e70:	bf18      	it	ne
 8000e72:	4240      	negne	r0, r0
 8000e74:	4770      	bx	lr
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	4770      	bx	lr
 8000e7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e80:	d101      	bne.n	8000e86 <__aeabi_f2iz+0x3a>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d105      	bne.n	8000e92 <__aeabi_f2iz+0x46>
 8000e86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	4770      	bx	lr

08000e98 <LCD_init>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void LCD_init()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	LCD(0x38, 0); //2 lines, 5*7 matrix
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2038      	movs	r0, #56	; 0x38
 8000ea0:	f000 f812 	bl	8000ec8 <LCD>
	LCD(0x0C, 0); //Display on, cursor off
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200c      	movs	r0, #12
 8000ea8:	f000 f80e 	bl	8000ec8 <LCD>
	LCD(0x06, 0); //Increment cursor (shift to right)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f000 f80a 	bl	8000ec8 <LCD>
	LCD(0x01, 0); //Clear display screen
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 f806 	bl	8000ec8 <LCD>
	LCD(0x80, 0); //Forse cursos to beginning (1st line)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2080      	movs	r0, #128	; 0x80
 8000ec0:	f000 f802 	bl	8000ec8 <LCD>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LCD>:

void LCD(uint8_t val_1, uint8_t cmd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t data1;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, cmd);
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	4838      	ldr	r0, [pc, #224]	; (8000fc4 <LCD+0xfc>)
 8000ee2:	f001 fb65 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = val_1 & 0x01;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data1);
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4833      	ldr	r0, [pc, #204]	; (8000fc4 <LCD+0xfc>)
 8000ef6:	f001 fb5b 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 1) & 0x01;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, data1);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <LCD+0xfc>)
 8000f0e:	f001 fb4f 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 2) & 0x01;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, data1);
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	461a      	mov	r2, r3
 8000f22:	2104      	movs	r1, #4
 8000f24:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <LCD+0xfc>)
 8000f26:	f001 fb43 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 3) & 0x01;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, data1);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <LCD+0xfc>)
 8000f3e:	f001 fb37 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 4) & 0x01;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, data1);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	461a      	mov	r2, r3
 8000f52:	2110      	movs	r1, #16
 8000f54:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <LCD+0xfc>)
 8000f56:	f001 fb2b 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 5) & 0x01;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	095b      	lsrs	r3, r3, #5
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, data1);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <LCD+0xfc>)
 8000f6e:	f001 fb1f 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 6) & 0x01;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	099b      	lsrs	r3, r3, #6
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, data1);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	461a      	mov	r2, r3
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <LCD+0xfc>)
 8000f86:	f001 fb13 	bl	80025b0 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 7) & 0x01;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	09db      	lsrs	r3, r3, #7
 8000f8e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, data1);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	461a      	mov	r2, r3
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <LCD+0xfc>)
 8000f98:	f001 fb0a 	bl	80025b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <LCD+0xfc>)
 8000fa4:	f001 fb04 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f000 fc51 	bl	8001850 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <LCD+0xfc>)
 8000fb6:	f001 fafb 	bl	80025b0 <HAL_GPIO_WritePin>

}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <ispis_broja>:


void ispis_broja(float broj)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	int ceo;
    float ost;
    int ostCeo=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    int i=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    char buffer[10];

    ceo = broj;
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff37 	bl	8000e4c <__aeabi_f2iz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	61fb      	str	r3, [r7, #28]
    ost = broj-ceo;
 8000fe2:	69f8      	ldr	r0, [r7, #28]
 8000fe4:	f7ff fede 	bl	8000da4 <__aeabi_i2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fe23 	bl	8000c38 <__aeabi_fsub>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]

    ostCeo = ost*1000000;
 8000ff6:	4928      	ldr	r1, [pc, #160]	; (8001098 <ispis_broja+0xd0>)
 8000ff8:	69b8      	ldr	r0, [r7, #24]
 8000ffa:	f7ff f8a9 	bl	8000150 <__aeabi_fmul>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff23 	bl	8000e4c <__aeabi_f2iz>
 8001006:	4603      	mov	r3, r0
 8001008:	623b      	str	r3, [r7, #32]
    ostCeo=abs(ostCeo);
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	2b00      	cmp	r3, #0
 800100e:	bfb8      	it	lt
 8001010:	425b      	neglt	r3, r3
 8001012:	623b      	str	r3, [r7, #32]
    sprintf(buffer,"%d",ceo);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	4920      	ldr	r1, [pc, #128]	; (800109c <ispis_broja+0xd4>)
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f88d 	bl	800313c <siprintf>
	while(buffer[i])
 8001022:	e00b      	b.n	800103c <ispis_broja+0x74>
	{
		LCD(buffer[i],1);
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff49 	bl	8000ec8 <LCD>
		i++;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	while(buffer[i])
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ec      	bne.n	8001024 <ispis_broja+0x5c>
	}

	LCD('.',1);
 800104a:	2101      	movs	r1, #1
 800104c:	202e      	movs	r0, #46	; 0x2e
 800104e:	f7ff ff3b 	bl	8000ec8 <LCD>
	sprintf(buffer,"%d",ostCeo);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	6a3a      	ldr	r2, [r7, #32]
 8001058:	4910      	ldr	r1, [pc, #64]	; (800109c <ispis_broja+0xd4>)
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f86e 	bl	800313c <siprintf>
	i=0;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24

	while(buffer[i])
 8001064:	e00b      	b.n	800107e <ispis_broja+0xb6>
	{
		LCD(buffer[i],1);
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff28 	bl	8000ec8 <LCD>
		i++;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	3301      	adds	r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	while(buffer[i])
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ec      	bne.n	8001066 <ispis_broja+0x9e>
	}
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	49742400 	.word	0x49742400
 800109c:	08003bf0 	.word	0x08003bf0

080010a0 <lcd_puts>:

void lcd_puts(const char * s)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	while(*s)
 80010a8:	e007      	b.n	80010ba <lcd_puts+0x1a>
	LCD(*s++,1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff07 	bl	8000ec8 <LCD>
	while(*s)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f3      	bne.n	80010aa <lcd_puts+0xa>
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <main>:

int main(void)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d6:	f000 fb59 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010da:	f000 f971 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010de:	f000 f9fd 	bl	80014dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80010e2:	f000 f9bd 	bl	8001460 <MX_ADC1_Init>
  float aY;
  float aZ;


  float res;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	48ab      	ldr	r0, [pc, #684]	; (8001398 <main+0x2c8>)
 80010ec:	f001 fa60 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	48a8      	ldr	r0, [pc, #672]	; (8001398 <main+0x2c8>)
 80010f6:	f001 fa5b 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	48a6      	ldr	r0, [pc, #664]	; (8001398 <main+0x2c8>)
 8001100:	f001 fa56 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	48a3      	ldr	r0, [pc, #652]	; (8001398 <main+0x2c8>)
 800110c:	f001 fa50 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	48a0      	ldr	r0, [pc, #640]	; (8001398 <main+0x2c8>)
 8001118:	f001 fa4a 	bl	80025b0 <HAL_GPIO_WritePin>
  {

    /* USER CODE END WHILE */


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001122:	489d      	ldr	r0, [pc, #628]	; (8001398 <main+0x2c8>)
 8001124:	f001 fa44 	bl	80025b0 <HAL_GPIO_WritePin>
	  LCD_init();
 8001128:	f7ff feb6 	bl	8000e98 <LCD_init>
	  lcd_puts("POCINJE_RACUNANJE");
 800112c:	489b      	ldr	r0, [pc, #620]	; (800139c <main+0x2cc>)
 800112e:	f7ff ffb7 	bl	80010a0 <lcd_puts>

	  HAL_Delay(300);
 8001132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001136:	f000 fb8b 	bl	8001850 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001140:	4895      	ldr	r0, [pc, #596]	; (8001398 <main+0x2c8>)
 8001142:	f001 fa35 	bl	80025b0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	4892      	ldr	r0, [pc, #584]	; (8001398 <main+0x2c8>)
 800114e:	f001 fa2f 	bl	80025b0 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8001152:	4893      	ldr	r0, [pc, #588]	; (80013a0 <main+0x2d0>)
 8001154:	f000 fc78 	bl	8001a48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001158:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800115c:	4890      	ldr	r0, [pc, #576]	; (80013a0 <main+0x2d0>)
 800115e:	f000 fd21 	bl	8001ba4 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 8001162:	488f      	ldr	r0, [pc, #572]	; (80013a0 <main+0x2d0>)
 8001164:	f000 fe24 	bl	8001db0 <HAL_ADC_GetValue>
 8001168:	4603      	mov	r3, r0
 800116a:	82fb      	strh	r3, [r7, #22]
	  aX=(vrednost*3.3)/4096+6.1;
 800116c:	8afb      	ldrh	r3, [r7, #22]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9f4 	bl	800055c <__aeabi_i2d>
 8001174:	a382      	add	r3, pc, #520	; (adr r3, 8001380 <main+0x2b0>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa59 	bl	8000630 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b86      	ldr	r3, [pc, #536]	; (80013a4 <main+0x2d4>)
 800118c:	f7ff fb7a 	bl	8000884 <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	a37b      	add	r3, pc, #492	; (adr r3, 8001388 <main+0x2b8>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f891 	bl	80002c4 <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fcf1 	bl	8000b90 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]

	  LCD_init();
 80011b2:	f7ff fe71 	bl	8000e98 <LCD_init>
	  lcd_puts("X:");
 80011b6:	487c      	ldr	r0, [pc, #496]	; (80013a8 <main+0x2d8>)
 80011b8:	f7ff ff72 	bl	80010a0 <lcd_puts>

	  ispis_broja(aX);
 80011bc:	6938      	ldr	r0, [r7, #16]
 80011be:	f7ff ff03 	bl	8000fc8 <ispis_broja>
	  HAL_Delay(300);
 80011c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011c6:	f000 fb43 	bl	8001850 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4871      	ldr	r0, [pc, #452]	; (8001398 <main+0x2c8>)
 80011d2:	f001 f9ed 	bl	80025b0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	486f      	ldr	r0, [pc, #444]	; (8001398 <main+0x2c8>)
 80011dc:	f001 f9e8 	bl	80025b0 <HAL_GPIO_WritePin>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80011e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e4:	486e      	ldr	r0, [pc, #440]	; (80013a0 <main+0x2d0>)
 80011e6:	f000 fcdd 	bl	8001ba4 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 80011ea:	486d      	ldr	r0, [pc, #436]	; (80013a0 <main+0x2d0>)
 80011ec:	f000 fde0 	bl	8001db0 <HAL_ADC_GetValue>
 80011f0:	4603      	mov	r3, r0
 80011f2:	82fb      	strh	r3, [r7, #22]
	  aY=(vrednost*3.3)/4096+0.5;
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9b0 	bl	800055c <__aeabi_i2d>
 80011fc:	a360      	add	r3, pc, #384	; (adr r3, 8001380 <main+0x2b0>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa15 	bl	8000630 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <main+0x2d4>)
 8001214:	f7ff fb36 	bl	8000884 <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <main+0x2dc>)
 8001226:	f7ff f84d 	bl	80002c4 <__adddf3>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcad 	bl	8000b90 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	60fb      	str	r3, [r7, #12]

	  LCD_init();
 800123a:	f7ff fe2d 	bl	8000e98 <LCD_init>
	  lcd_puts("Y:");
 800123e:	485c      	ldr	r0, [pc, #368]	; (80013b0 <main+0x2e0>)
 8001240:	f7ff ff2e 	bl	80010a0 <lcd_puts>

	  ispis_broja(aY);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff febf 	bl	8000fc8 <ispis_broja>
	  HAL_Delay(300);
 800124a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800124e:	f000 faff 	bl	8001850 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	4850      	ldr	r0, [pc, #320]	; (8001398 <main+0x2c8>)
 8001258:	f001 f9aa 	bl	80025b0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2140      	movs	r1, #64	; 0x40
 8001260:	484d      	ldr	r0, [pc, #308]	; (8001398 <main+0x2c8>)
 8001262:	f001 f9a5 	bl	80025b0 <HAL_GPIO_WritePin>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126a:	484d      	ldr	r0, [pc, #308]	; (80013a0 <main+0x2d0>)
 800126c:	f000 fc9a 	bl	8001ba4 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 8001270:	484b      	ldr	r0, [pc, #300]	; (80013a0 <main+0x2d0>)
 8001272:	f000 fd9d 	bl	8001db0 <HAL_ADC_GetValue>
 8001276:	4603      	mov	r3, r0
 8001278:	82fb      	strh	r3, [r7, #22]
	  aZ=(vrednost*3.3)/4096+2.7;
 800127a:	8afb      	ldrh	r3, [r7, #22]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f96d 	bl	800055c <__aeabi_i2d>
 8001282:	a33f      	add	r3, pc, #252	; (adr r3, 8001380 <main+0x2b0>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9d2 	bl	8000630 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <main+0x2d4>)
 800129a:	f7ff faf3 	bl	8000884 <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a33a      	add	r3, pc, #232	; (adr r3, 8001390 <main+0x2c0>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f80a 	bl	80002c4 <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc6a 	bl	8000b90 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]

	  LCD_init();
 80012c0:	f7ff fdea 	bl	8000e98 <LCD_init>
	  lcd_puts("Z:");
 80012c4:	483b      	ldr	r0, [pc, #236]	; (80013b4 <main+0x2e4>)
 80012c6:	f7ff feeb 	bl	80010a0 <lcd_puts>

	  ispis_broja(aZ);
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff fe7c 	bl	8000fc8 <ispis_broja>
	  HAL_Delay(300);
 80012d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012d4:	f000 fabc 	bl	8001850 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	482e      	ldr	r0, [pc, #184]	; (8001398 <main+0x2c8>)
 80012de:	f001 f967 	bl	80025b0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2120      	movs	r1, #32
 80012e6:	482c      	ldr	r0, [pc, #176]	; (8001398 <main+0x2c8>)
 80012e8:	f001 f962 	bl	80025b0 <HAL_GPIO_WritePin>
	  res=sqrt(aX*aX+aY*aY+aZ*aZ);
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	6938      	ldr	r0, [r7, #16]
 80012f0:	f7fe ff2e 	bl	8000150 <__aeabi_fmul>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461c      	mov	r4, r3
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7fe ff28 	bl	8000150 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	4619      	mov	r1, r3
 8001304:	4620      	mov	r0, r4
 8001306:	f7ff fc99 	bl	8000c3c <__addsf3>
 800130a:	4603      	mov	r3, r0
 800130c:	461c      	mov	r4, r3
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f7fe ff1d 	bl	8000150 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fc8e 	bl	8000c3c <__addsf3>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f92c 	bl	8000580 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f002 fb7e 	bl	8003a30 <sqrt>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc28 	bl	8000b90 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	607b      	str	r3, [r7, #4]
	  LCD_init();
 8001344:	f7ff fda8 	bl	8000e98 <LCD_init>
	  lcd_puts("UBRZANJE JE:");
 8001348:	481b      	ldr	r0, [pc, #108]	; (80013b8 <main+0x2e8>)
 800134a:	f7ff fea9 	bl	80010a0 <lcd_puts>
	  HAL_Delay(300);
 800134e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001352:	f000 fa7d 	bl	8001850 <HAL_Delay>

	  LCD_init();
 8001356:	f7ff fd9f 	bl	8000e98 <LCD_init>
	  ispis_broja(res);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe34 	bl	8000fc8 <ispis_broja>
	  lcd_puts("m/s^2");
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <main+0x2ec>)
 8001362:	f7ff fe9d 	bl	80010a0 <lcd_puts>

	  HAL_Delay(300);
 8001366:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800136a:	f000 fa71 	bl	8001850 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <main+0x2c8>)
 8001374:	f001 f91c 	bl	80025b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001378:	e6d0      	b.n	800111c <main+0x4c>
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	66666666 	.word	0x66666666
 8001384:	400a6666 	.word	0x400a6666
 8001388:	66666666 	.word	0x66666666
 800138c:	40186666 	.word	0x40186666
 8001390:	9999999a 	.word	0x9999999a
 8001394:	40059999 	.word	0x40059999
 8001398:	40010800 	.word	0x40010800
 800139c:	08003bf4 	.word	0x08003bf4
 80013a0:	2000008c 	.word	0x2000008c
 80013a4:	40b00000 	.word	0x40b00000
 80013a8:	08003c08 	.word	0x08003c08
 80013ac:	3fe00000 	.word	0x3fe00000
 80013b0:	08003c0c 	.word	0x08003c0c
 80013b4:	08003c10 	.word	0x08003c10
 80013b8:	08003c14 	.word	0x08003c14
 80013bc:	08003c24 	.word	0x08003c24

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	; 0x50
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ca:	2228      	movs	r2, #40	; 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 feac 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001404:	4618      	mov	r0, r3
 8001406:	f001 f8eb 	bl	80025e0 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001410:	f000 f8c6 	bl	80015a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fb58 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800143a:	f000 f8b1 	bl	80015a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800143e:	2302      	movs	r3, #2
 8001440:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fccf 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001454:	f000 f8a4 	bl	80015a0 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3750      	adds	r7, #80	; 0x50
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_ADC1_Init+0x74>)
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <MX_ADC1_Init+0x78>)
 8001474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_ADC1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_ADC1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_ADC1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_ADC1_Init+0x74>)
 800148a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800148e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_ADC1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_ADC1_Init+0x74>)
 800149e:	f000 f9fb 	bl	8001898 <HAL_ADC_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 f87a 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_ADC1_Init+0x74>)
 80014be:	f000 fc83 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014c8:	f000 f86a 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000008c 	.word	0x2000008c
 80014d8:	40012400 	.word	0x40012400

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_GPIO_Init+0xb8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a27      	ldr	r2, [pc, #156]	; (8001594 <MX_GPIO_Init+0xb8>)
 80014f6:	f043 0320 	orr.w	r3, r3, #32
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_GPIO_Init+0xb8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_GPIO_Init+0xb8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_GPIO_Init+0xb8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_GPIO_Init+0xb8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_GPIO_Init+0xb8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <MX_GPIO_Init+0xb8>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_GPIO_Init+0xb8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800153e:	4816      	ldr	r0, [pc, #88]	; (8001598 <MX_GPIO_Init+0xbc>)
 8001540:	f001 f836 	bl	80025b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001544:	2200      	movs	r2, #0
 8001546:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_GPIO_Init+0xc0>)
 800154c:	f001 f830 	bl	80025b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001550:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001554:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <MX_GPIO_Init+0xbc>)
 800156a:	f000 fea5 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800156e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001572:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2302      	movs	r3, #2
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_GPIO_Init+0xc0>)
 8001588:	f000 fe96 	bl	80022b8 <HAL_GPIO_Init>

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010c00 	.word	0x40010c00

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_ADC_MspInit+0x6c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d121      	bne.n	8001674 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001660:	2307      	movs	r3, #7
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_ADC_MspInit+0x74>)
 8001670:	f000 fe22 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40012400 	.word	0x40012400
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <HardFault_Handler+0x4>

0800169a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <BusFault_Handler+0x4>

080016a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <UsageFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8a0 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x50>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x16>
		heap_end = &end;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <_sbrk+0x50>)
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <_sbrk+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <_sbrk+0x50>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <_sbrk+0x50>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	466a      	mov	r2, sp
 8001702:	4293      	cmp	r3, r2
 8001704:	d907      	bls.n	8001716 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001706:	f001 fce7 	bl	80030d8 <__errno>
 800170a:	4603      	mov	r3, r0
 800170c:	220c      	movs	r2, #12
 800170e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e006      	b.n	8001724 <_sbrk+0x48>
	}

	heap_end += incr;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <_sbrk+0x50>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a03      	ldr	r2, [pc, #12]	; (800172c <_sbrk+0x50>)
 8001720:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000bc 	.word	0x200000bc
 8001730:	200000d8 	.word	0x200000d8

08001734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001766:	f7ff ffe5 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f001 fcbb 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fcaf 	bl	80010d0 <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800177c:	08003ca0 	.word	0x08003ca0
  ldr r2, =_sbss
 8001780:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001784:	200000d4 	.word	0x200000d4

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x28>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 fd57 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff ff00 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fd61 	bl	800229e <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 fd37 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x1c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x20>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_IncTick+0x20>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000008 	.word	0x20000008
 8001838:	200000c0 	.word	0x200000c0

0800183c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <HAL_GetTick+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	200000c0 	.word	0x200000c0

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff fff0 	bl	800183c <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffe0 	bl	800183c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0be      	b.n	8001a38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe9a 	bl	8001610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fbc5 	bl	800206c <ADC_ConversionStop_Disable>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8099 	bne.w	8001a26 <HAL_ADC_Init+0x18e>
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8095 	bne.w	8001a26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001904:	f023 0302 	bic.w	r3, r3, #2
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001918:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7b1b      	ldrb	r3, [r3, #12]
 800191e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001920:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4313      	orrs	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001930:	d003      	beq.n	800193a <HAL_ADC_Init+0xa2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <HAL_ADC_Init+0xa8>
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	e000      	b.n	8001942 <HAL_ADC_Init+0xaa>
 8001940:	2300      	movs	r3, #0
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7d1b      	ldrb	r3, [r3, #20]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d119      	bne.n	8001984 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	3b01      	subs	r3, #1
 800195e:	035a      	lsls	r2, r3, #13
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e00b      	b.n	8001984 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f043 0220 	orr.w	r2, r3, #32
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <HAL_ADC_Init+0x1a8>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d003      	beq.n	80019be <HAL_ADC_Init+0x126>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d104      	bne.n	80019c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	051b      	lsls	r3, r3, #20
 80019c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	430a      	orrs	r2, r1
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_ADC_Init+0x1ac>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10b      	bne.n	8001a04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a02:	e018      	b.n	8001a36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	f023 0312 	bic.w	r3, r3, #18
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a24:	e007      	b.n	8001a36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ffe1f7fd 	.word	0xffe1f7fd
 8001a44:	ff1f0efe 	.word	0xff1f0efe

08001a48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Start+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e098      	b.n	8001b94 <HAL_ADC_Start+0x14c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 faa4 	bl	8001fb8 <ADC_Enable>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8087 	bne.w	8001b8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_ADC_Start+0x154>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_Start+0x5e>
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_ADC_Start+0x158>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d026      	beq.n	8001b0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad0:	e01d      	b.n	8001b0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <HAL_ADC_Start+0x158>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_Start+0xaa>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_ADC_Start+0x154>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10d      	bne.n	8001b0e <HAL_ADC_Start+0xc6>
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_ADC_Start+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f023 0206 	bic.w	r2, r3, #6
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0202 	mvn.w	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b4e:	d113      	bne.n	8001b78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_ADC_Start+0x154>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_ADC_Start+0x158>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	e00c      	b.n	8001b92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40012800 	.word	0x40012800
 8001ba0:	40012400 	.word	0x40012400

08001ba4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bba:	f7ff fe3f 	bl	800183c <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0220 	orr.w	r2, r3, #32
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0d3      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d131      	bne.n	8001c58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d12a      	bne.n	8001c58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c02:	e021      	b.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d01d      	beq.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_ADC_PollForConversion+0x7e>
 8001c12:	f7ff fe13 	bl	800183c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d212      	bcs.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0a2      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0d6      	beq.n	8001c04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c56:	e070      	b.n	8001d3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_ADC_PollForConversion+0x1f4>)
 8001c5a:	681c      	ldr	r4, [r3, #0]
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f001 f97b 	bl	8002f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c62:	4603      	mov	r3, r0
 8001c64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6919      	ldr	r1, [r3, #16]
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_ADC_PollForConversion+0x1f8>)
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x104>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_ADC_PollForConversion+0x1fc>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x104>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_ADC_PollForConversion+0x200>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d108      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x100>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_ADC_PollForConversion+0x204>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x100>
 8001ca0:	2314      	movs	r3, #20
 8001ca2:	e020      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ca4:	2329      	movs	r3, #41	; 0x29
 8001ca6:	e01e      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_ADC_PollForConversion+0x200>)
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x120>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_ADC_PollForConversion+0x204>)
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x13c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_ADC_PollForConversion+0x208>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x140>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_ADC_PollForConversion+0x208>)
 8001cda:	400b      	ands	r3, r1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x140>
 8001ce0:	2354      	movs	r3, #84	; 0x54
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ce4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cec:	e021      	b.n	8001d32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d01a      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_ADC_PollForConversion+0x168>
 8001cfc:	f7ff fd9e 	bl	800183c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d20f      	bcs.n	8001d2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d90b      	bls.n	8001d2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e030      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d8d9      	bhi.n	8001cee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0212 	mvn.w	r2, #18
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d5e:	d115      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	24924924 	.word	0x24924924
 8001da0:	00924924 	.word	0x00924924
 8001da4:	12492492 	.word	0x12492492
 8001da8:	00492492 	.word	0x00492492
 8001dac:	00249249 	.word	0x00249249

08001db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x20>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0dc      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x1da>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d81c      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b05      	subs	r3, #5
 8001e0a:	221f      	movs	r2, #31
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3b05      	subs	r3, #5
 8001e24:	fa00 f203 	lsl.w	r2, r0, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e30:	e03c      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d81c      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b23      	subs	r3, #35	; 0x23
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4019      	ands	r1, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b23      	subs	r3, #35	; 0x23
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	; 0x41
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b41      	subs	r3, #65	; 0x41
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	d91c      	bls.n	8001eee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4019      	ands	r1, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	3b1e      	subs	r3, #30
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	e019      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6919      	ldr	r1, [r3, #16]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	2207      	movs	r2, #7
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4019      	ands	r1, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d003      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d132      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_ADC_ConfigChannel+0x1e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d125      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d126      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d11a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9a      	lsrs	r2, r3, #18
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f9      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x1b2>
 8001f86:	e007      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40012400 	.word	0x40012400
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	431bde83 	.word	0x431bde83

08001fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d040      	beq.n	8002058 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <ADC_Enable+0xac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <ADC_Enable+0xb0>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9b      	lsrs	r3, r3, #18
 8001ff2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ff4:	e002      	b.n	8001ffc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002002:	f7ff fc1b 	bl	800183c <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002008:	e01f      	b.n	800204a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200a:	f7ff fc17 	bl	800183c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d918      	bls.n	800204a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d011      	beq.n	800204a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d1d8      	bne.n	800200a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d12e      	bne.n	80020e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002096:	f7ff fbd1 	bl	800183c <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209c:	e01b      	b.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209e:	f7ff fbcd 	bl	800183c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d914      	bls.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10d      	bne.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d0dc      	beq.n	800209e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff90 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff49 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff5e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff90 	bl	80021a8 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5f 	bl	8002154 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb0 	bl	800220c <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e161      	b.n	8002590 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022cc:	2201      	movs	r2, #1
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8150 	bne.w	800258a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a97      	ldr	r2, [pc, #604]	; (800254c <HAL_GPIO_Init+0x294>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d05e      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 80022f4:	4a95      	ldr	r2, [pc, #596]	; (800254c <HAL_GPIO_Init+0x294>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d875      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 80022fa:	4a95      	ldr	r2, [pc, #596]	; (8002550 <HAL_GPIO_Init+0x298>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d058      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002300:	4a93      	ldr	r2, [pc, #588]	; (8002550 <HAL_GPIO_Init+0x298>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d86f      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002306:	4a93      	ldr	r2, [pc, #588]	; (8002554 <HAL_GPIO_Init+0x29c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d052      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 800230c:	4a91      	ldr	r2, [pc, #580]	; (8002554 <HAL_GPIO_Init+0x29c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d869      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002312:	4a91      	ldr	r2, [pc, #580]	; (8002558 <HAL_GPIO_Init+0x2a0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04c      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002318:	4a8f      	ldr	r2, [pc, #572]	; (8002558 <HAL_GPIO_Init+0x2a0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d863      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800231e:	4a8f      	ldr	r2, [pc, #572]	; (800255c <HAL_GPIO_Init+0x2a4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d046      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002324:	4a8d      	ldr	r2, [pc, #564]	; (800255c <HAL_GPIO_Init+0x2a4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d85d      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d82a      	bhi.n	8002384 <HAL_GPIO_Init+0xcc>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d859      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <HAL_GPIO_Init+0x80>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	080023b3 	.word	0x080023b3
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800239f 	.word	0x0800239f
 8002344:	080023e1 	.word	0x080023e1
 8002348:	080023e7 	.word	0x080023e7
 800234c:	080023e7 	.word	0x080023e7
 8002350:	080023e7 	.word	0x080023e7
 8002354:	080023e7 	.word	0x080023e7
 8002358:	080023e7 	.word	0x080023e7
 800235c:	080023e7 	.word	0x080023e7
 8002360:	080023e7 	.word	0x080023e7
 8002364:	080023e7 	.word	0x080023e7
 8002368:	080023e7 	.word	0x080023e7
 800236c:	080023e7 	.word	0x080023e7
 8002370:	080023e7 	.word	0x080023e7
 8002374:	080023e7 	.word	0x080023e7
 8002378:	080023e7 	.word	0x080023e7
 800237c:	08002395 	.word	0x08002395
 8002380:	080023a9 	.word	0x080023a9
 8002384:	4a76      	ldr	r2, [pc, #472]	; (8002560 <HAL_GPIO_Init+0x2a8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238a:	e02c      	b.n	80023e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e029      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	3304      	adds	r3, #4
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e024      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	3308      	adds	r3, #8
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e01f      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	330c      	adds	r3, #12
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e01a      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ba:	2304      	movs	r3, #4
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e013      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	611a      	str	r2, [r3, #16]
          break;
 80023d2:	e009      	b.n	80023e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	615a      	str	r2, [r3, #20]
          break;
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          break;
 80023e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2bff      	cmp	r3, #255	; 0xff
 80023ec:	d801      	bhi.n	80023f2 <HAL_GPIO_Init+0x13a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_Init+0x13e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d802      	bhi.n	8002404 <HAL_GPIO_Init+0x14c>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x152>
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	3b08      	subs	r3, #8
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	210f      	movs	r1, #15
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80a9 	beq.w	800258a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002438:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_GPIO_Init+0x2ac>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x2ac>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_GPIO_Init+0x2ac>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002450:	4a45      	ldr	r2, [pc, #276]	; (8002568 <HAL_GPIO_Init+0x2b0>)
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	; (800256c <HAL_GPIO_Init+0x2b4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <HAL_GPIO_Init+0x2b8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_GPIO_Init+0x2bc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1d8>
 800248c:	2302      	movs	r3, #2
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002490:	2303      	movs	r3, #3
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002498:	2300      	movs	r3, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024aa:	492f      	ldr	r1, [pc, #188]	; (8002568 <HAL_GPIO_Init+0x2b0>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	492b      	ldr	r1, [pc, #172]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4927      	ldr	r1, [pc, #156]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4921      	ldr	r1, [pc, #132]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	491d      	ldr	r1, [pc, #116]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 8002504:	4013      	ands	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4917      	ldr	r1, [pc, #92]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4913      	ldr	r1, [pc, #76]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 800252c:	4013      	ands	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01f      	beq.n	800257c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	490d      	ldr	r1, [pc, #52]	; (8002578 <HAL_GPIO_Init+0x2c0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	e01f      	b.n	800258a <HAL_GPIO_Init+0x2d2>
 800254a:	bf00      	nop
 800254c:	10320000 	.word	0x10320000
 8002550:	10310000 	.word	0x10310000
 8002554:	10220000 	.word	0x10220000
 8002558:	10210000 	.word	0x10210000
 800255c:	10120000 	.word	0x10120000
 8002560:	10110000 	.word	0x10110000
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	40011000 	.word	0x40011000
 8002578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	43db      	mvns	r3, r3
 8002584:	4909      	ldr	r1, [pc, #36]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 8002586:	4013      	ands	r3, r2
 8002588:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	3301      	adds	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f ae96 	bne.w	80022cc <HAL_GPIO_Init+0x14>
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	372c      	adds	r7, #44	; 0x2c
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025cc:	e003      	b.n	80025d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	041a      	lsls	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e272      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8087 	beq.w	800270e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002600:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00c      	beq.n	8002626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260c:	4b8f      	ldr	r3, [pc, #572]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d112      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06c      	beq.n	800270c <HAL_RCC_OscConfig+0x12c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d168      	bne.n	800270c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e24c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x76>
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a7f      	ldr	r2, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e02e      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b7b      	ldr	r3, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7a      	ldr	r2, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a77      	ldr	r2, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e01d      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0xbc>
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a71      	ldr	r2, [pc, #452]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 800269c:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f8be 	bl	800183c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f8ba 	bl	800183c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e200      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe4>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff f8aa 	bl	800183c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff f8a6 	bl	800183c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1ec      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x10c>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d11c      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1c0      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4939      	ldr	r1, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e03a      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7ff f85f 	bl	800183c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7ff f85b 	bl	800183c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1a1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4927      	ldr	r1, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e015      	b.n	80027e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x270>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff f83e 	bl	800183c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7ff f83a 	bl	800183c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e180      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03a      	beq.n	8002864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d019      	beq.n	800282a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_RCC_OscConfig+0x274>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff f81e 	bl	800183c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7ff f81a 	bl	800183c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e160      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x26c>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002822:	2001      	movs	r0, #1
 8002824:	f000 fac4 	bl	8002db0 <RCC_Delay>
 8002828:	e01c      	b.n	8002864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x274>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7ff f804 	bl	800183c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7ff f800 	bl	800183c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d908      	bls.n	8002858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e146      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	42420000 	.word	0x42420000
 8002854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e9      	bne.n	8002838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a6 	beq.w	80029be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7e      	ldr	r2, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ffc1 	bl	800183c <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe ffbd 	bl	800183c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e103      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b75      	ldr	r3, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x4c8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x312>
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e02d      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x334>
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a69      	ldr	r2, [pc, #420]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a66      	ldr	r2, [pc, #408]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x356>
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a60      	ldr	r2, [pc, #384]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x36e>
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a5a      	ldr	r2, [pc, #360]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a57      	ldr	r2, [pc, #348]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7fe ff71 	bl	800183c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe ff6d 	bl	800183c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0b1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x37e>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe ff5b 	bl	800183c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe ff57 	bl	800183c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e09b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8087 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d061      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d146      	bne.n	8002a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x4cc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff2b 	bl	800183c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe ff27 	bl	800183c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e06d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4921      	ldr	r1, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a19      	ldr	r1, [r3, #32]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	430b      	orrs	r3, r1
 8002a36:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe fefb 	bl	800183c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fef7 	bl	800183c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46a>
 8002a68:	e035      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x4cc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fee4 	bl	800183c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fee0 	bl	800183c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e026      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x498>
 8002a96:	e01e      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e019      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x500>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d0      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d910      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4965      	ldr	r1, [pc, #404]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d040      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e073      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4936      	ldr	r1, [pc, #216]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fe32 	bl	800183c <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe fe2e 	bl	800183c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e053      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d210      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4922      	ldr	r1, [pc, #136]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd90 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08003c4c 	.word	0x08003c4c
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b490      	push	{r4, r7}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cc0:	1d3c      	adds	r4, r7, #4
 8002cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc8:	f240 2301 	movw	r3, #513	; 0x201
 8002ccc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x46>
 8002cf6:	e02b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cfa:	623b      	str	r3, [r7, #32]
      break;
 8002cfc:	e02b      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	3328      	adds	r3, #40	; 0x28
 8002d08:	443b      	add	r3, r7
 8002d0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	3328      	adds	r3, #40	; 0x28
 8002d26:	443b      	add	r3, r7
 8002d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d32:	fb03 f202 	mul.w	r2, r3, r2
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	e004      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	623b      	str	r3, [r7, #32]
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d52:	623b      	str	r3, [r7, #32]
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc90      	pop	{r4, r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	08003c2c 	.word	0x08003c2c
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003c5c 	.word	0x08003c5c

08002db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <RCC_Delay+0x34>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <RCC_Delay+0x38>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dcc:	bf00      	nop
  }
  while (Delay --);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <RCC_Delay+0x1c>
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000000 	.word	0x20000000
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d07d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	61d3      	str	r3, [r2, #28]
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d118      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fcf6 	bl	800183c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	e008      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe fcf2 	bl	800183c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e06d      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02e      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d027      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fcc1 	bl	800183c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fcbd 	bl	800183c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e036      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420440 	.word	0x42420440

08002f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08d      	sub	sp, #52	; 0x34
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f60:	4b58      	ldr	r3, [pc, #352]	; (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f62:	f107 040c 	add.w	r4, r7, #12
 8002f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f6c:	f240 2301 	movw	r3, #513	; 0x201
 8002f70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	2300      	movs	r3, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	f200 808e 	bhi.w	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d049      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d079      	beq.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fa0:	e086      	b.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002fa2:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fa8:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d07f      	beq.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	3330      	adds	r3, #48	; 0x30
 8002fbe:	443b      	add	r3, r7
 8002fc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c5b      	lsrs	r3, r3, #17
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	3330      	adds	r3, #48	; 0x30
 8002fdc:	443b      	add	r3, r7
 8002fde:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fee:	4a37      	ldr	r2, [pc, #220]	; (80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003016:	d102      	bne.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800301c:	e04a      	b.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4a2c      	ldr	r2, [pc, #176]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800302c:	e042      	b.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d108      	bne.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800304a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003050:	e01f      	b.n	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d109      	bne.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800306a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003070:	e00f      	b.n	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d11c      	bne.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800308a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003090:	e012      	b.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003092:	e011      	b.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003094:	f7ff fe78 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	0b9b      	lsrs	r3, r3, #14
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	3301      	adds	r3, #1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030b0:	bf00      	nop
 80030b2:	e002      	b.n	80030ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030b8:	bf00      	nop
    }
  }
  return (frequency);
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3734      	adds	r7, #52	; 0x34
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	08003c3c 	.word	0x08003c3c
 80030c8:	40021000 	.word	0x40021000
 80030cc:	007a1200 	.word	0x007a1200
 80030d0:	003d0900 	.word	0x003d0900
 80030d4:	aaaaaaab 	.word	0xaaaaaaab

080030d8 <__errno>:
 80030d8:	4b01      	ldr	r3, [pc, #4]	; (80030e0 <__errno+0x8>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	2600      	movs	r6, #0
 80030e8:	4d0c      	ldr	r5, [pc, #48]	; (800311c <__libc_init_array+0x38>)
 80030ea:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	42a6      	cmp	r6, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	f000 fd70 	bl	8003bd8 <_init>
 80030f8:	2600      	movs	r6, #0
 80030fa:	4d0a      	ldr	r5, [pc, #40]	; (8003124 <__libc_init_array+0x40>)
 80030fc:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <__libc_init_array+0x44>)
 80030fe:	1b64      	subs	r4, r4, r5
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	42a6      	cmp	r6, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f855 3b04 	ldr.w	r3, [r5], #4
 800310c:	4798      	blx	r3
 800310e:	3601      	adds	r6, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f855 3b04 	ldr.w	r3, [r5], #4
 8003116:	4798      	blx	r3
 8003118:	3601      	adds	r6, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08003c98 	.word	0x08003c98
 8003120:	08003c98 	.word	0x08003c98
 8003124:	08003c98 	.word	0x08003c98
 8003128:	08003c9c 	.word	0x08003c9c

0800312c <memset>:
 800312c:	4603      	mov	r3, r0
 800312e:	4402      	add	r2, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <siprintf>:
 800313c:	b40e      	push	{r1, r2, r3}
 800313e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003142:	b500      	push	{lr}
 8003144:	b09c      	sub	sp, #112	; 0x70
 8003146:	ab1d      	add	r3, sp, #116	; 0x74
 8003148:	9002      	str	r0, [sp, #8]
 800314a:	9006      	str	r0, [sp, #24]
 800314c:	9107      	str	r1, [sp, #28]
 800314e:	9104      	str	r1, [sp, #16]
 8003150:	4808      	ldr	r0, [pc, #32]	; (8003174 <siprintf+0x38>)
 8003152:	4909      	ldr	r1, [pc, #36]	; (8003178 <siprintf+0x3c>)
 8003154:	f853 2b04 	ldr.w	r2, [r3], #4
 8003158:	9105      	str	r1, [sp, #20]
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	a902      	add	r1, sp, #8
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	f000 f868 	bl	8003234 <_svfiprintf_r>
 8003164:	2200      	movs	r2, #0
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	b01c      	add	sp, #112	; 0x70
 800316c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003170:	b003      	add	sp, #12
 8003172:	4770      	bx	lr
 8003174:	2000000c 	.word	0x2000000c
 8003178:	ffff0208 	.word	0xffff0208

0800317c <__ssputs_r>:
 800317c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	688e      	ldr	r6, [r1, #8]
 8003182:	4682      	mov	sl, r0
 8003184:	429e      	cmp	r6, r3
 8003186:	460c      	mov	r4, r1
 8003188:	4690      	mov	r8, r2
 800318a:	461f      	mov	r7, r3
 800318c:	d838      	bhi.n	8003200 <__ssputs_r+0x84>
 800318e:	898a      	ldrh	r2, [r1, #12]
 8003190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003194:	d032      	beq.n	80031fc <__ssputs_r+0x80>
 8003196:	6825      	ldr	r5, [r4, #0]
 8003198:	6909      	ldr	r1, [r1, #16]
 800319a:	3301      	adds	r3, #1
 800319c:	eba5 0901 	sub.w	r9, r5, r1
 80031a0:	6965      	ldr	r5, [r4, #20]
 80031a2:	444b      	add	r3, r9
 80031a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031ac:	106d      	asrs	r5, r5, #1
 80031ae:	429d      	cmp	r5, r3
 80031b0:	bf38      	it	cc
 80031b2:	461d      	movcc	r5, r3
 80031b4:	0553      	lsls	r3, r2, #21
 80031b6:	d531      	bpl.n	800321c <__ssputs_r+0xa0>
 80031b8:	4629      	mov	r1, r5
 80031ba:	f000 fb6f 	bl	800389c <_malloc_r>
 80031be:	4606      	mov	r6, r0
 80031c0:	b950      	cbnz	r0, 80031d8 <__ssputs_r+0x5c>
 80031c2:	230c      	movs	r3, #12
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f8ca 3000 	str.w	r3, [sl]
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d8:	464a      	mov	r2, r9
 80031da:	6921      	ldr	r1, [r4, #16]
 80031dc:	f000 face 	bl	800377c <memcpy>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	6126      	str	r6, [r4, #16]
 80031ee:	444e      	add	r6, r9
 80031f0:	6026      	str	r6, [r4, #0]
 80031f2:	463e      	mov	r6, r7
 80031f4:	6165      	str	r5, [r4, #20]
 80031f6:	eba5 0509 	sub.w	r5, r5, r9
 80031fa:	60a5      	str	r5, [r4, #8]
 80031fc:	42be      	cmp	r6, r7
 80031fe:	d900      	bls.n	8003202 <__ssputs_r+0x86>
 8003200:	463e      	mov	r6, r7
 8003202:	4632      	mov	r2, r6
 8003204:	4641      	mov	r1, r8
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	f000 fac6 	bl	8003798 <memmove>
 800320c:	68a3      	ldr	r3, [r4, #8]
 800320e:	2000      	movs	r0, #0
 8003210:	1b9b      	subs	r3, r3, r6
 8003212:	60a3      	str	r3, [r4, #8]
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	4433      	add	r3, r6
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	e7db      	b.n	80031d4 <__ssputs_r+0x58>
 800321c:	462a      	mov	r2, r5
 800321e:	f000 fbb1 	bl	8003984 <_realloc_r>
 8003222:	4606      	mov	r6, r0
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e1      	bne.n	80031ec <__ssputs_r+0x70>
 8003228:	4650      	mov	r0, sl
 800322a:	6921      	ldr	r1, [r4, #16]
 800322c:	f000 face 	bl	80037cc <_free_r>
 8003230:	e7c7      	b.n	80031c2 <__ssputs_r+0x46>
	...

08003234 <_svfiprintf_r>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	4698      	mov	r8, r3
 800323a:	898b      	ldrh	r3, [r1, #12]
 800323c:	4607      	mov	r7, r0
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	460d      	mov	r5, r1
 8003242:	4614      	mov	r4, r2
 8003244:	b09d      	sub	sp, #116	; 0x74
 8003246:	d50e      	bpl.n	8003266 <_svfiprintf_r+0x32>
 8003248:	690b      	ldr	r3, [r1, #16]
 800324a:	b963      	cbnz	r3, 8003266 <_svfiprintf_r+0x32>
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	f000 fb25 	bl	800389c <_malloc_r>
 8003252:	6028      	str	r0, [r5, #0]
 8003254:	6128      	str	r0, [r5, #16]
 8003256:	b920      	cbnz	r0, 8003262 <_svfiprintf_r+0x2e>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e0d1      	b.n	8003406 <_svfiprintf_r+0x1d2>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	616b      	str	r3, [r5, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	9309      	str	r3, [sp, #36]	; 0x24
 800326a:	2320      	movs	r3, #32
 800326c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003270:	2330      	movs	r3, #48	; 0x30
 8003272:	f04f 0901 	mov.w	r9, #1
 8003276:	f8cd 800c 	str.w	r8, [sp, #12]
 800327a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003420 <_svfiprintf_r+0x1ec>
 800327e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003282:	4623      	mov	r3, r4
 8003284:	469a      	mov	sl, r3
 8003286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800328a:	b10a      	cbz	r2, 8003290 <_svfiprintf_r+0x5c>
 800328c:	2a25      	cmp	r2, #37	; 0x25
 800328e:	d1f9      	bne.n	8003284 <_svfiprintf_r+0x50>
 8003290:	ebba 0b04 	subs.w	fp, sl, r4
 8003294:	d00b      	beq.n	80032ae <_svfiprintf_r+0x7a>
 8003296:	465b      	mov	r3, fp
 8003298:	4622      	mov	r2, r4
 800329a:	4629      	mov	r1, r5
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff ff6d 	bl	800317c <__ssputs_r>
 80032a2:	3001      	adds	r0, #1
 80032a4:	f000 80aa 	beq.w	80033fc <_svfiprintf_r+0x1c8>
 80032a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032aa:	445a      	add	r2, fp
 80032ac:	9209      	str	r2, [sp, #36]	; 0x24
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a2 	beq.w	80033fc <_svfiprintf_r+0x1c8>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c2:	f10a 0a01 	add.w	sl, sl, #1
 80032c6:	9304      	str	r3, [sp, #16]
 80032c8:	9307      	str	r3, [sp, #28]
 80032ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ce:	931a      	str	r3, [sp, #104]	; 0x68
 80032d0:	4654      	mov	r4, sl
 80032d2:	2205      	movs	r2, #5
 80032d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d8:	4851      	ldr	r0, [pc, #324]	; (8003420 <_svfiprintf_r+0x1ec>)
 80032da:	f000 fa41 	bl	8003760 <memchr>
 80032de:	9a04      	ldr	r2, [sp, #16]
 80032e0:	b9d8      	cbnz	r0, 800331a <_svfiprintf_r+0xe6>
 80032e2:	06d0      	lsls	r0, r2, #27
 80032e4:	bf44      	itt	mi
 80032e6:	2320      	movmi	r3, #32
 80032e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ec:	0711      	lsls	r1, r2, #28
 80032ee:	bf44      	itt	mi
 80032f0:	232b      	movmi	r3, #43	; 0x2b
 80032f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b2a      	cmp	r3, #42	; 0x2a
 80032fc:	d015      	beq.n	800332a <_svfiprintf_r+0xf6>
 80032fe:	4654      	mov	r4, sl
 8003300:	2000      	movs	r0, #0
 8003302:	f04f 0c0a 	mov.w	ip, #10
 8003306:	9a07      	ldr	r2, [sp, #28]
 8003308:	4621      	mov	r1, r4
 800330a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330e:	3b30      	subs	r3, #48	; 0x30
 8003310:	2b09      	cmp	r3, #9
 8003312:	d94e      	bls.n	80033b2 <_svfiprintf_r+0x17e>
 8003314:	b1b0      	cbz	r0, 8003344 <_svfiprintf_r+0x110>
 8003316:	9207      	str	r2, [sp, #28]
 8003318:	e014      	b.n	8003344 <_svfiprintf_r+0x110>
 800331a:	eba0 0308 	sub.w	r3, r0, r8
 800331e:	fa09 f303 	lsl.w	r3, r9, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	46a2      	mov	sl, r4
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	e7d2      	b.n	80032d0 <_svfiprintf_r+0x9c>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	1d19      	adds	r1, r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	9103      	str	r1, [sp, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	bfbb      	ittet	lt
 8003336:	425b      	neglt	r3, r3
 8003338:	f042 0202 	orrlt.w	r2, r2, #2
 800333c:	9307      	strge	r3, [sp, #28]
 800333e:	9307      	strlt	r3, [sp, #28]
 8003340:	bfb8      	it	lt
 8003342:	9204      	strlt	r2, [sp, #16]
 8003344:	7823      	ldrb	r3, [r4, #0]
 8003346:	2b2e      	cmp	r3, #46	; 0x2e
 8003348:	d10c      	bne.n	8003364 <_svfiprintf_r+0x130>
 800334a:	7863      	ldrb	r3, [r4, #1]
 800334c:	2b2a      	cmp	r3, #42	; 0x2a
 800334e:	d135      	bne.n	80033bc <_svfiprintf_r+0x188>
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	3402      	adds	r4, #2
 8003354:	1d1a      	adds	r2, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003362:	9305      	str	r3, [sp, #20]
 8003364:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003424 <_svfiprintf_r+0x1f0>
 8003368:	2203      	movs	r2, #3
 800336a:	4650      	mov	r0, sl
 800336c:	7821      	ldrb	r1, [r4, #0]
 800336e:	f000 f9f7 	bl	8003760 <memchr>
 8003372:	b140      	cbz	r0, 8003386 <_svfiprintf_r+0x152>
 8003374:	2340      	movs	r3, #64	; 0x40
 8003376:	eba0 000a 	sub.w	r0, r0, sl
 800337a:	fa03 f000 	lsl.w	r0, r3, r0
 800337e:	9b04      	ldr	r3, [sp, #16]
 8003380:	3401      	adds	r4, #1
 8003382:	4303      	orrs	r3, r0
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800338a:	2206      	movs	r2, #6
 800338c:	4826      	ldr	r0, [pc, #152]	; (8003428 <_svfiprintf_r+0x1f4>)
 800338e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003392:	f000 f9e5 	bl	8003760 <memchr>
 8003396:	2800      	cmp	r0, #0
 8003398:	d038      	beq.n	800340c <_svfiprintf_r+0x1d8>
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <_svfiprintf_r+0x1f8>)
 800339c:	bb1b      	cbnz	r3, 80033e6 <_svfiprintf_r+0x1b2>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	3307      	adds	r3, #7
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	3308      	adds	r3, #8
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ac:	4433      	add	r3, r6
 80033ae:	9309      	str	r3, [sp, #36]	; 0x24
 80033b0:	e767      	b.n	8003282 <_svfiprintf_r+0x4e>
 80033b2:	460c      	mov	r4, r1
 80033b4:	2001      	movs	r0, #1
 80033b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033ba:	e7a5      	b.n	8003308 <_svfiprintf_r+0xd4>
 80033bc:	2300      	movs	r3, #0
 80033be:	f04f 0c0a 	mov.w	ip, #10
 80033c2:	4619      	mov	r1, r3
 80033c4:	3401      	adds	r4, #1
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	4620      	mov	r0, r4
 80033ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ce:	3a30      	subs	r2, #48	; 0x30
 80033d0:	2a09      	cmp	r2, #9
 80033d2:	d903      	bls.n	80033dc <_svfiprintf_r+0x1a8>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0c5      	beq.n	8003364 <_svfiprintf_r+0x130>
 80033d8:	9105      	str	r1, [sp, #20]
 80033da:	e7c3      	b.n	8003364 <_svfiprintf_r+0x130>
 80033dc:	4604      	mov	r4, r0
 80033de:	2301      	movs	r3, #1
 80033e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033e4:	e7f0      	b.n	80033c8 <_svfiprintf_r+0x194>
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	462a      	mov	r2, r5
 80033ec:	4638      	mov	r0, r7
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <_svfiprintf_r+0x1fc>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	f3af 8000 	nop.w
 80033f6:	1c42      	adds	r2, r0, #1
 80033f8:	4606      	mov	r6, r0
 80033fa:	d1d6      	bne.n	80033aa <_svfiprintf_r+0x176>
 80033fc:	89ab      	ldrh	r3, [r5, #12]
 80033fe:	065b      	lsls	r3, r3, #25
 8003400:	f53f af2c 	bmi.w	800325c <_svfiprintf_r+0x28>
 8003404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003406:	b01d      	add	sp, #116	; 0x74
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	462a      	mov	r2, r5
 8003412:	4638      	mov	r0, r7
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <_svfiprintf_r+0x1fc>)
 8003416:	a904      	add	r1, sp, #16
 8003418:	f000 f87c 	bl	8003514 <_printf_i>
 800341c:	e7eb      	b.n	80033f6 <_svfiprintf_r+0x1c2>
 800341e:	bf00      	nop
 8003420:	08003c64 	.word	0x08003c64
 8003424:	08003c6a 	.word	0x08003c6a
 8003428:	08003c6e 	.word	0x08003c6e
 800342c:	00000000 	.word	0x00000000
 8003430:	0800317d 	.word	0x0800317d

08003434 <_printf_common>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	4616      	mov	r6, r2
 800343a:	4699      	mov	r9, r3
 800343c:	688a      	ldr	r2, [r1, #8]
 800343e:	690b      	ldr	r3, [r1, #16]
 8003440:	4607      	mov	r7, r0
 8003442:	4293      	cmp	r3, r2
 8003444:	bfb8      	it	lt
 8003446:	4613      	movlt	r3, r2
 8003448:	6033      	str	r3, [r6, #0]
 800344a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344e:	460c      	mov	r4, r1
 8003450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003454:	b10a      	cbz	r2, 800345a <_printf_common+0x26>
 8003456:	3301      	adds	r3, #1
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0699      	lsls	r1, r3, #26
 800345e:	bf42      	ittt	mi
 8003460:	6833      	ldrmi	r3, [r6, #0]
 8003462:	3302      	addmi	r3, #2
 8003464:	6033      	strmi	r3, [r6, #0]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d106      	bne.n	800347c <_printf_common+0x48>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	6832      	ldr	r2, [r6, #0]
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	42ab      	cmp	r3, r5
 800347a:	dc28      	bgt.n	80034ce <_printf_common+0x9a>
 800347c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003480:	1e13      	subs	r3, r2, #0
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	bf18      	it	ne
 8003486:	2301      	movne	r3, #1
 8003488:	0692      	lsls	r2, r2, #26
 800348a:	d42d      	bmi.n	80034e8 <_printf_common+0xb4>
 800348c:	4649      	mov	r1, r9
 800348e:	4638      	mov	r0, r7
 8003490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003494:	47c0      	blx	r8
 8003496:	3001      	adds	r0, #1
 8003498:	d020      	beq.n	80034dc <_printf_common+0xa8>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	68e5      	ldr	r5, [r4, #12]
 800349e:	f003 0306 	and.w	r3, r3, #6
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf18      	it	ne
 80034a6:	2500      	movne	r5, #0
 80034a8:	6832      	ldr	r2, [r6, #0]
 80034aa:	f04f 0600 	mov.w	r6, #0
 80034ae:	68a3      	ldr	r3, [r4, #8]
 80034b0:	bf08      	it	eq
 80034b2:	1aad      	subeq	r5, r5, r2
 80034b4:	6922      	ldr	r2, [r4, #16]
 80034b6:	bf08      	it	eq
 80034b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034bc:	4293      	cmp	r3, r2
 80034be:	bfc4      	itt	gt
 80034c0:	1a9b      	subgt	r3, r3, r2
 80034c2:	18ed      	addgt	r5, r5, r3
 80034c4:	341a      	adds	r4, #26
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	d11a      	bne.n	8003500 <_printf_common+0xcc>
 80034ca:	2000      	movs	r0, #0
 80034cc:	e008      	b.n	80034e0 <_printf_common+0xac>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4649      	mov	r1, r9
 80034d4:	4638      	mov	r0, r7
 80034d6:	47c0      	blx	r8
 80034d8:	3001      	adds	r0, #1
 80034da:	d103      	bne.n	80034e4 <_printf_common+0xb0>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e4:	3501      	adds	r5, #1
 80034e6:	e7c4      	b.n	8003472 <_printf_common+0x3e>
 80034e8:	2030      	movs	r0, #48	; 0x30
 80034ea:	18e1      	adds	r1, r4, r3
 80034ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f6:	4422      	add	r2, r4
 80034f8:	3302      	adds	r3, #2
 80034fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fe:	e7c5      	b.n	800348c <_printf_common+0x58>
 8003500:	2301      	movs	r3, #1
 8003502:	4622      	mov	r2, r4
 8003504:	4649      	mov	r1, r9
 8003506:	4638      	mov	r0, r7
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d0e6      	beq.n	80034dc <_printf_common+0xa8>
 800350e:	3601      	adds	r6, #1
 8003510:	e7d9      	b.n	80034c6 <_printf_common+0x92>
	...

08003514 <_printf_i>:
 8003514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	7e0f      	ldrb	r7, [r1, #24]
 800351a:	4691      	mov	r9, r2
 800351c:	2f78      	cmp	r7, #120	; 0x78
 800351e:	4680      	mov	r8, r0
 8003520:	460c      	mov	r4, r1
 8003522:	469a      	mov	sl, r3
 8003524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800352a:	d807      	bhi.n	800353c <_printf_i+0x28>
 800352c:	2f62      	cmp	r7, #98	; 0x62
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x32>
 8003530:	2f00      	cmp	r7, #0
 8003532:	f000 80d9 	beq.w	80036e8 <_printf_i+0x1d4>
 8003536:	2f58      	cmp	r7, #88	; 0x58
 8003538:	f000 80a4 	beq.w	8003684 <_printf_i+0x170>
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003544:	e03a      	b.n	80035bc <_printf_i+0xa8>
 8003546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800354a:	2b15      	cmp	r3, #21
 800354c:	d8f6      	bhi.n	800353c <_printf_i+0x28>
 800354e:	a101      	add	r1, pc, #4	; (adr r1, 8003554 <_printf_i+0x40>)
 8003550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035c1 	.word	0x080035c1
 800355c:	0800353d 	.word	0x0800353d
 8003560:	0800353d 	.word	0x0800353d
 8003564:	0800353d 	.word	0x0800353d
 8003568:	0800353d 	.word	0x0800353d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800353d 	.word	0x0800353d
 8003574:	0800353d 	.word	0x0800353d
 8003578:	0800353d 	.word	0x0800353d
 800357c:	0800353d 	.word	0x0800353d
 8003580:	080036cf 	.word	0x080036cf
 8003584:	080035f1 	.word	0x080035f1
 8003588:	080036b1 	.word	0x080036b1
 800358c:	0800353d 	.word	0x0800353d
 8003590:	0800353d 	.word	0x0800353d
 8003594:	080036f1 	.word	0x080036f1
 8003598:	0800353d 	.word	0x0800353d
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	0800353d 	.word	0x0800353d
 80035a4:	0800353d 	.word	0x0800353d
 80035a8:	080036b9 	.word	0x080036b9
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	602a      	str	r2, [r5, #0]
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e0a4      	b.n	800370a <_printf_i+0x1f6>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	6829      	ldr	r1, [r5, #0]
 80035c4:	0606      	lsls	r6, r0, #24
 80035c6:	f101 0304 	add.w	r3, r1, #4
 80035ca:	d50a      	bpl.n	80035e2 <_printf_i+0xce>
 80035cc:	680e      	ldr	r6, [r1, #0]
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	da03      	bge.n	80035dc <_printf_i+0xc8>
 80035d4:	232d      	movs	r3, #45	; 0x2d
 80035d6:	4276      	negs	r6, r6
 80035d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035dc:	230a      	movs	r3, #10
 80035de:	485e      	ldr	r0, [pc, #376]	; (8003758 <_printf_i+0x244>)
 80035e0:	e019      	b.n	8003616 <_printf_i+0x102>
 80035e2:	680e      	ldr	r6, [r1, #0]
 80035e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035e8:	602b      	str	r3, [r5, #0]
 80035ea:	bf18      	it	ne
 80035ec:	b236      	sxthne	r6, r6
 80035ee:	e7ef      	b.n	80035d0 <_printf_i+0xbc>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	6029      	str	r1, [r5, #0]
 80035f8:	0601      	lsls	r1, r0, #24
 80035fa:	d501      	bpl.n	8003600 <_printf_i+0xec>
 80035fc:	681e      	ldr	r6, [r3, #0]
 80035fe:	e002      	b.n	8003606 <_printf_i+0xf2>
 8003600:	0646      	lsls	r6, r0, #25
 8003602:	d5fb      	bpl.n	80035fc <_printf_i+0xe8>
 8003604:	881e      	ldrh	r6, [r3, #0]
 8003606:	2f6f      	cmp	r7, #111	; 0x6f
 8003608:	bf0c      	ite	eq
 800360a:	2308      	moveq	r3, #8
 800360c:	230a      	movne	r3, #10
 800360e:	4852      	ldr	r0, [pc, #328]	; (8003758 <_printf_i+0x244>)
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003616:	6865      	ldr	r5, [r4, #4]
 8003618:	2d00      	cmp	r5, #0
 800361a:	bfa8      	it	ge
 800361c:	6821      	ldrge	r1, [r4, #0]
 800361e:	60a5      	str	r5, [r4, #8]
 8003620:	bfa4      	itt	ge
 8003622:	f021 0104 	bicge.w	r1, r1, #4
 8003626:	6021      	strge	r1, [r4, #0]
 8003628:	b90e      	cbnz	r6, 800362e <_printf_i+0x11a>
 800362a:	2d00      	cmp	r5, #0
 800362c:	d04d      	beq.n	80036ca <_printf_i+0x1b6>
 800362e:	4615      	mov	r5, r2
 8003630:	fbb6 f1f3 	udiv	r1, r6, r3
 8003634:	fb03 6711 	mls	r7, r3, r1, r6
 8003638:	5dc7      	ldrb	r7, [r0, r7]
 800363a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800363e:	4637      	mov	r7, r6
 8003640:	42bb      	cmp	r3, r7
 8003642:	460e      	mov	r6, r1
 8003644:	d9f4      	bls.n	8003630 <_printf_i+0x11c>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d10b      	bne.n	8003662 <_printf_i+0x14e>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07de      	lsls	r6, r3, #31
 800364e:	d508      	bpl.n	8003662 <_printf_i+0x14e>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	6861      	ldr	r1, [r4, #4]
 8003654:	4299      	cmp	r1, r3
 8003656:	bfde      	ittt	le
 8003658:	2330      	movle	r3, #48	; 0x30
 800365a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800365e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003662:	1b52      	subs	r2, r2, r5
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	464b      	mov	r3, r9
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	aa03      	add	r2, sp, #12
 8003672:	f7ff fedf 	bl	8003434 <_printf_common>
 8003676:	3001      	adds	r0, #1
 8003678:	d14c      	bne.n	8003714 <_printf_i+0x200>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	b004      	add	sp, #16
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	4834      	ldr	r0, [pc, #208]	; (8003758 <_printf_i+0x244>)
 8003686:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800368a:	6829      	ldr	r1, [r5, #0]
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003692:	6029      	str	r1, [r5, #0]
 8003694:	061d      	lsls	r5, r3, #24
 8003696:	d514      	bpl.n	80036c2 <_printf_i+0x1ae>
 8003698:	07df      	lsls	r7, r3, #31
 800369a:	bf44      	itt	mi
 800369c:	f043 0320 	orrmi.w	r3, r3, #32
 80036a0:	6023      	strmi	r3, [r4, #0]
 80036a2:	b91e      	cbnz	r6, 80036ac <_printf_i+0x198>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	f023 0320 	bic.w	r3, r3, #32
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	2310      	movs	r3, #16
 80036ae:	e7af      	b.n	8003610 <_printf_i+0xfc>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f043 0320 	orr.w	r3, r3, #32
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	2378      	movs	r3, #120	; 0x78
 80036ba:	4828      	ldr	r0, [pc, #160]	; (800375c <_printf_i+0x248>)
 80036bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036c0:	e7e3      	b.n	800368a <_printf_i+0x176>
 80036c2:	0659      	lsls	r1, r3, #25
 80036c4:	bf48      	it	mi
 80036c6:	b2b6      	uxthmi	r6, r6
 80036c8:	e7e6      	b.n	8003698 <_printf_i+0x184>
 80036ca:	4615      	mov	r5, r2
 80036cc:	e7bb      	b.n	8003646 <_printf_i+0x132>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	6826      	ldr	r6, [r4, #0]
 80036d2:	1d18      	adds	r0, r3, #4
 80036d4:	6961      	ldr	r1, [r4, #20]
 80036d6:	6028      	str	r0, [r5, #0]
 80036d8:	0635      	lsls	r5, r6, #24
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	d501      	bpl.n	80036e2 <_printf_i+0x1ce>
 80036de:	6019      	str	r1, [r3, #0]
 80036e0:	e002      	b.n	80036e8 <_printf_i+0x1d4>
 80036e2:	0670      	lsls	r0, r6, #25
 80036e4:	d5fb      	bpl.n	80036de <_printf_i+0x1ca>
 80036e6:	8019      	strh	r1, [r3, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	4615      	mov	r5, r2
 80036ec:	6123      	str	r3, [r4, #16]
 80036ee:	e7ba      	b.n	8003666 <_printf_i+0x152>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	602a      	str	r2, [r5, #0]
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	6862      	ldr	r2, [r4, #4]
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f82f 	bl	8003760 <memchr>
 8003702:	b108      	cbz	r0, 8003708 <_printf_i+0x1f4>
 8003704:	1b40      	subs	r0, r0, r5
 8003706:	6060      	str	r0, [r4, #4]
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2300      	movs	r3, #0
 800370e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003712:	e7a8      	b.n	8003666 <_printf_i+0x152>
 8003714:	462a      	mov	r2, r5
 8003716:	4649      	mov	r1, r9
 8003718:	4640      	mov	r0, r8
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	47d0      	blx	sl
 800371e:	3001      	adds	r0, #1
 8003720:	d0ab      	beq.n	800367a <_printf_i+0x166>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	079b      	lsls	r3, r3, #30
 8003726:	d413      	bmi.n	8003750 <_printf_i+0x23c>
 8003728:	68e0      	ldr	r0, [r4, #12]
 800372a:	9b03      	ldr	r3, [sp, #12]
 800372c:	4298      	cmp	r0, r3
 800372e:	bfb8      	it	lt
 8003730:	4618      	movlt	r0, r3
 8003732:	e7a4      	b.n	800367e <_printf_i+0x16a>
 8003734:	2301      	movs	r3, #1
 8003736:	4632      	mov	r2, r6
 8003738:	4649      	mov	r1, r9
 800373a:	4640      	mov	r0, r8
 800373c:	47d0      	blx	sl
 800373e:	3001      	adds	r0, #1
 8003740:	d09b      	beq.n	800367a <_printf_i+0x166>
 8003742:	3501      	adds	r5, #1
 8003744:	68e3      	ldr	r3, [r4, #12]
 8003746:	9903      	ldr	r1, [sp, #12]
 8003748:	1a5b      	subs	r3, r3, r1
 800374a:	42ab      	cmp	r3, r5
 800374c:	dcf2      	bgt.n	8003734 <_printf_i+0x220>
 800374e:	e7eb      	b.n	8003728 <_printf_i+0x214>
 8003750:	2500      	movs	r5, #0
 8003752:	f104 0619 	add.w	r6, r4, #25
 8003756:	e7f5      	b.n	8003744 <_printf_i+0x230>
 8003758:	08003c75 	.word	0x08003c75
 800375c:	08003c86 	.word	0x08003c86

08003760 <memchr>:
 8003760:	4603      	mov	r3, r0
 8003762:	b510      	push	{r4, lr}
 8003764:	b2c9      	uxtb	r1, r1
 8003766:	4402      	add	r2, r0
 8003768:	4293      	cmp	r3, r2
 800376a:	4618      	mov	r0, r3
 800376c:	d101      	bne.n	8003772 <memchr+0x12>
 800376e:	2000      	movs	r0, #0
 8003770:	e003      	b.n	800377a <memchr+0x1a>
 8003772:	7804      	ldrb	r4, [r0, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	428c      	cmp	r4, r1
 8003778:	d1f6      	bne.n	8003768 <memchr+0x8>
 800377a:	bd10      	pop	{r4, pc}

0800377c <memcpy>:
 800377c:	440a      	add	r2, r1
 800377e:	4291      	cmp	r1, r2
 8003780:	f100 33ff 	add.w	r3, r0, #4294967295
 8003784:	d100      	bne.n	8003788 <memcpy+0xc>
 8003786:	4770      	bx	lr
 8003788:	b510      	push	{r4, lr}
 800378a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800378e:	4291      	cmp	r1, r2
 8003790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003794:	d1f9      	bne.n	800378a <memcpy+0xe>
 8003796:	bd10      	pop	{r4, pc}

08003798 <memmove>:
 8003798:	4288      	cmp	r0, r1
 800379a:	b510      	push	{r4, lr}
 800379c:	eb01 0402 	add.w	r4, r1, r2
 80037a0:	d902      	bls.n	80037a8 <memmove+0x10>
 80037a2:	4284      	cmp	r4, r0
 80037a4:	4623      	mov	r3, r4
 80037a6:	d807      	bhi.n	80037b8 <memmove+0x20>
 80037a8:	1e43      	subs	r3, r0, #1
 80037aa:	42a1      	cmp	r1, r4
 80037ac:	d008      	beq.n	80037c0 <memmove+0x28>
 80037ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037b6:	e7f8      	b.n	80037aa <memmove+0x12>
 80037b8:	4601      	mov	r1, r0
 80037ba:	4402      	add	r2, r0
 80037bc:	428a      	cmp	r2, r1
 80037be:	d100      	bne.n	80037c2 <memmove+0x2a>
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ca:	e7f7      	b.n	80037bc <memmove+0x24>

080037cc <_free_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4605      	mov	r5, r0
 80037d0:	2900      	cmp	r1, #0
 80037d2:	d040      	beq.n	8003856 <_free_r+0x8a>
 80037d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d8:	1f0c      	subs	r4, r1, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfb8      	it	lt
 80037de:	18e4      	addlt	r4, r4, r3
 80037e0:	f000 f910 	bl	8003a04 <__malloc_lock>
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <_free_r+0x8c>)
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	b933      	cbnz	r3, 80037f8 <_free_r+0x2c>
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	6014      	str	r4, [r2, #0]
 80037ee:	4628      	mov	r0, r5
 80037f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037f4:	f000 b90c 	b.w	8003a10 <__malloc_unlock>
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	d908      	bls.n	800380e <_free_r+0x42>
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	1821      	adds	r1, r4, r0
 8003800:	428b      	cmp	r3, r1
 8003802:	bf01      	itttt	eq
 8003804:	6819      	ldreq	r1, [r3, #0]
 8003806:	685b      	ldreq	r3, [r3, #4]
 8003808:	1809      	addeq	r1, r1, r0
 800380a:	6021      	streq	r1, [r4, #0]
 800380c:	e7ed      	b.n	80037ea <_free_r+0x1e>
 800380e:	461a      	mov	r2, r3
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b10b      	cbz	r3, 8003818 <_free_r+0x4c>
 8003814:	42a3      	cmp	r3, r4
 8003816:	d9fa      	bls.n	800380e <_free_r+0x42>
 8003818:	6811      	ldr	r1, [r2, #0]
 800381a:	1850      	adds	r0, r2, r1
 800381c:	42a0      	cmp	r0, r4
 800381e:	d10b      	bne.n	8003838 <_free_r+0x6c>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	4401      	add	r1, r0
 8003824:	1850      	adds	r0, r2, r1
 8003826:	4283      	cmp	r3, r0
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	d1e0      	bne.n	80037ee <_free_r+0x22>
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4401      	add	r1, r0
 8003832:	6011      	str	r1, [r2, #0]
 8003834:	6053      	str	r3, [r2, #4]
 8003836:	e7da      	b.n	80037ee <_free_r+0x22>
 8003838:	d902      	bls.n	8003840 <_free_r+0x74>
 800383a:	230c      	movs	r3, #12
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	e7d6      	b.n	80037ee <_free_r+0x22>
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	1821      	adds	r1, r4, r0
 8003844:	428b      	cmp	r3, r1
 8003846:	bf01      	itttt	eq
 8003848:	6819      	ldreq	r1, [r3, #0]
 800384a:	685b      	ldreq	r3, [r3, #4]
 800384c:	1809      	addeq	r1, r1, r0
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	6063      	str	r3, [r4, #4]
 8003852:	6054      	str	r4, [r2, #4]
 8003854:	e7cb      	b.n	80037ee <_free_r+0x22>
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	200000c4 	.word	0x200000c4

0800385c <sbrk_aligned>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4e0e      	ldr	r6, [pc, #56]	; (8003898 <sbrk_aligned+0x3c>)
 8003860:	460c      	mov	r4, r1
 8003862:	6831      	ldr	r1, [r6, #0]
 8003864:	4605      	mov	r5, r0
 8003866:	b911      	cbnz	r1, 800386e <sbrk_aligned+0x12>
 8003868:	f000 f8bc 	bl	80039e4 <_sbrk_r>
 800386c:	6030      	str	r0, [r6, #0]
 800386e:	4621      	mov	r1, r4
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f8b7 	bl	80039e4 <_sbrk_r>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	d00a      	beq.n	8003890 <sbrk_aligned+0x34>
 800387a:	1cc4      	adds	r4, r0, #3
 800387c:	f024 0403 	bic.w	r4, r4, #3
 8003880:	42a0      	cmp	r0, r4
 8003882:	d007      	beq.n	8003894 <sbrk_aligned+0x38>
 8003884:	1a21      	subs	r1, r4, r0
 8003886:	4628      	mov	r0, r5
 8003888:	f000 f8ac 	bl	80039e4 <_sbrk_r>
 800388c:	3001      	adds	r0, #1
 800388e:	d101      	bne.n	8003894 <sbrk_aligned+0x38>
 8003890:	f04f 34ff 	mov.w	r4, #4294967295
 8003894:	4620      	mov	r0, r4
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	200000c8 	.word	0x200000c8

0800389c <_malloc_r>:
 800389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a0:	1ccd      	adds	r5, r1, #3
 80038a2:	f025 0503 	bic.w	r5, r5, #3
 80038a6:	3508      	adds	r5, #8
 80038a8:	2d0c      	cmp	r5, #12
 80038aa:	bf38      	it	cc
 80038ac:	250c      	movcc	r5, #12
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	4607      	mov	r7, r0
 80038b2:	db01      	blt.n	80038b8 <_malloc_r+0x1c>
 80038b4:	42a9      	cmp	r1, r5
 80038b6:	d905      	bls.n	80038c4 <_malloc_r+0x28>
 80038b8:	230c      	movs	r3, #12
 80038ba:	2600      	movs	r6, #0
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4630      	mov	r0, r6
 80038c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c4:	4e2e      	ldr	r6, [pc, #184]	; (8003980 <_malloc_r+0xe4>)
 80038c6:	f000 f89d 	bl	8003a04 <__malloc_lock>
 80038ca:	6833      	ldr	r3, [r6, #0]
 80038cc:	461c      	mov	r4, r3
 80038ce:	bb34      	cbnz	r4, 800391e <_malloc_r+0x82>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4638      	mov	r0, r7
 80038d4:	f7ff ffc2 	bl	800385c <sbrk_aligned>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	4604      	mov	r4, r0
 80038dc:	d14d      	bne.n	800397a <_malloc_r+0xde>
 80038de:	6834      	ldr	r4, [r6, #0]
 80038e0:	4626      	mov	r6, r4
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	d140      	bne.n	8003968 <_malloc_r+0xcc>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	4631      	mov	r1, r6
 80038ea:	4638      	mov	r0, r7
 80038ec:	eb04 0803 	add.w	r8, r4, r3
 80038f0:	f000 f878 	bl	80039e4 <_sbrk_r>
 80038f4:	4580      	cmp	r8, r0
 80038f6:	d13a      	bne.n	800396e <_malloc_r+0xd2>
 80038f8:	6821      	ldr	r1, [r4, #0]
 80038fa:	3503      	adds	r5, #3
 80038fc:	1a6d      	subs	r5, r5, r1
 80038fe:	f025 0503 	bic.w	r5, r5, #3
 8003902:	3508      	adds	r5, #8
 8003904:	2d0c      	cmp	r5, #12
 8003906:	bf38      	it	cc
 8003908:	250c      	movcc	r5, #12
 800390a:	4638      	mov	r0, r7
 800390c:	4629      	mov	r1, r5
 800390e:	f7ff ffa5 	bl	800385c <sbrk_aligned>
 8003912:	3001      	adds	r0, #1
 8003914:	d02b      	beq.n	800396e <_malloc_r+0xd2>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	442b      	add	r3, r5
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	e00e      	b.n	800393c <_malloc_r+0xa0>
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	1b52      	subs	r2, r2, r5
 8003922:	d41e      	bmi.n	8003962 <_malloc_r+0xc6>
 8003924:	2a0b      	cmp	r2, #11
 8003926:	d916      	bls.n	8003956 <_malloc_r+0xba>
 8003928:	1961      	adds	r1, r4, r5
 800392a:	42a3      	cmp	r3, r4
 800392c:	6025      	str	r5, [r4, #0]
 800392e:	bf18      	it	ne
 8003930:	6059      	strne	r1, [r3, #4]
 8003932:	6863      	ldr	r3, [r4, #4]
 8003934:	bf08      	it	eq
 8003936:	6031      	streq	r1, [r6, #0]
 8003938:	5162      	str	r2, [r4, r5]
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	4638      	mov	r0, r7
 800393e:	f104 060b 	add.w	r6, r4, #11
 8003942:	f000 f865 	bl	8003a10 <__malloc_unlock>
 8003946:	f026 0607 	bic.w	r6, r6, #7
 800394a:	1d23      	adds	r3, r4, #4
 800394c:	1af2      	subs	r2, r6, r3
 800394e:	d0b6      	beq.n	80038be <_malloc_r+0x22>
 8003950:	1b9b      	subs	r3, r3, r6
 8003952:	50a3      	str	r3, [r4, r2]
 8003954:	e7b3      	b.n	80038be <_malloc_r+0x22>
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	42a3      	cmp	r3, r4
 800395a:	bf0c      	ite	eq
 800395c:	6032      	streq	r2, [r6, #0]
 800395e:	605a      	strne	r2, [r3, #4]
 8003960:	e7ec      	b.n	800393c <_malloc_r+0xa0>
 8003962:	4623      	mov	r3, r4
 8003964:	6864      	ldr	r4, [r4, #4]
 8003966:	e7b2      	b.n	80038ce <_malloc_r+0x32>
 8003968:	4634      	mov	r4, r6
 800396a:	6876      	ldr	r6, [r6, #4]
 800396c:	e7b9      	b.n	80038e2 <_malloc_r+0x46>
 800396e:	230c      	movs	r3, #12
 8003970:	4638      	mov	r0, r7
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	f000 f84c 	bl	8003a10 <__malloc_unlock>
 8003978:	e7a1      	b.n	80038be <_malloc_r+0x22>
 800397a:	6025      	str	r5, [r4, #0]
 800397c:	e7de      	b.n	800393c <_malloc_r+0xa0>
 800397e:	bf00      	nop
 8003980:	200000c4 	.word	0x200000c4

08003984 <_realloc_r>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	4680      	mov	r8, r0
 800398a:	4614      	mov	r4, r2
 800398c:	460e      	mov	r6, r1
 800398e:	b921      	cbnz	r1, 800399a <_realloc_r+0x16>
 8003990:	4611      	mov	r1, r2
 8003992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003996:	f7ff bf81 	b.w	800389c <_malloc_r>
 800399a:	b92a      	cbnz	r2, 80039a8 <_realloc_r+0x24>
 800399c:	f7ff ff16 	bl	80037cc <_free_r>
 80039a0:	4625      	mov	r5, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a8:	f000 f838 	bl	8003a1c <_malloc_usable_size_r>
 80039ac:	4284      	cmp	r4, r0
 80039ae:	4607      	mov	r7, r0
 80039b0:	d802      	bhi.n	80039b8 <_realloc_r+0x34>
 80039b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039b6:	d812      	bhi.n	80039de <_realloc_r+0x5a>
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff ff6e 	bl	800389c <_malloc_r>
 80039c0:	4605      	mov	r5, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0ed      	beq.n	80039a2 <_realloc_r+0x1e>
 80039c6:	42bc      	cmp	r4, r7
 80039c8:	4622      	mov	r2, r4
 80039ca:	4631      	mov	r1, r6
 80039cc:	bf28      	it	cs
 80039ce:	463a      	movcs	r2, r7
 80039d0:	f7ff fed4 	bl	800377c <memcpy>
 80039d4:	4631      	mov	r1, r6
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7ff fef8 	bl	80037cc <_free_r>
 80039dc:	e7e1      	b.n	80039a2 <_realloc_r+0x1e>
 80039de:	4635      	mov	r5, r6
 80039e0:	e7df      	b.n	80039a2 <_realloc_r+0x1e>
	...

080039e4 <_sbrk_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	2300      	movs	r3, #0
 80039e8:	4d05      	ldr	r5, [pc, #20]	; (8003a00 <_sbrk_r+0x1c>)
 80039ea:	4604      	mov	r4, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	f7fd fe74 	bl	80016dc <_sbrk>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_sbrk_r+0x1a>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_sbrk_r+0x1a>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	200000cc 	.word	0x200000cc

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_lock+0x8>)
 8003a06:	f000 b811 	b.w	8003a2c <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	200000d0 	.word	0x200000d0

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f000 b80c 	b.w	8003a2e <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	200000d0 	.word	0x200000d0

08003a1c <_malloc_usable_size_r>:
 8003a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a20:	1f18      	subs	r0, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfbc      	itt	lt
 8003a26:	580b      	ldrlt	r3, [r1, r0]
 8003a28:	18c0      	addlt	r0, r0, r3
 8003a2a:	4770      	bx	lr

08003a2c <__retarget_lock_acquire_recursive>:
 8003a2c:	4770      	bx	lr

08003a2e <__retarget_lock_release_recursive>:
 8003a2e:	4770      	bx	lr

08003a30 <sqrt>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	4606      	mov	r6, r0
 8003a34:	460f      	mov	r7, r1
 8003a36:	f000 f81f 	bl	8003a78 <__ieee754_sqrt>
 8003a3a:	4632      	mov	r2, r6
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	460d      	mov	r5, r1
 8003a40:	463b      	mov	r3, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	4639      	mov	r1, r7
 8003a46:	f7fd f88d 	bl	8000b64 <__aeabi_dcmpun>
 8003a4a:	b990      	cbnz	r0, 8003a72 <sqrt+0x42>
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2300      	movs	r3, #0
 8003a50:	4630      	mov	r0, r6
 8003a52:	4639      	mov	r1, r7
 8003a54:	f7fd f85e 	bl	8000b14 <__aeabi_dcmplt>
 8003a58:	b158      	cbz	r0, 8003a72 <sqrt+0x42>
 8003a5a:	f7ff fb3d 	bl	80030d8 <__errno>
 8003a5e:	2321      	movs	r3, #33	; 0x21
 8003a60:	2200      	movs	r2, #0
 8003a62:	6003      	str	r3, [r0, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fc ff0b 	bl	8000884 <__aeabi_ddiv>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	460d      	mov	r5, r1
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a78 <__ieee754_sqrt>:
 8003a78:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003bd4 <__ieee754_sqrt+0x15c>
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a80:	ea3c 0c01 	bics.w	ip, ip, r1
 8003a84:	4606      	mov	r6, r0
 8003a86:	460d      	mov	r5, r1
 8003a88:	460c      	mov	r4, r1
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	d10f      	bne.n	8003ab2 <__ieee754_sqrt+0x3a>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	f7fc fdcb 	bl	8000630 <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fc0f 	bl	80002c4 <__adddf3>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	4630      	mov	r0, r6
 8003aac:	4629      	mov	r1, r5
 8003aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab2:	2900      	cmp	r1, #0
 8003ab4:	dc0e      	bgt.n	8003ad4 <__ieee754_sqrt+0x5c>
 8003ab6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003aba:	ea5c 0707 	orrs.w	r7, ip, r7
 8003abe:	d0f4      	beq.n	8003aaa <__ieee754_sqrt+0x32>
 8003ac0:	b141      	cbz	r1, 8003ad4 <__ieee754_sqrt+0x5c>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	f7fc fbfb 	bl	80002c0 <__aeabi_dsub>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	f7fc fed9 	bl	8000884 <__aeabi_ddiv>
 8003ad2:	e7e8      	b.n	8003aa6 <__ieee754_sqrt+0x2e>
 8003ad4:	1521      	asrs	r1, r4, #20
 8003ad6:	d075      	beq.n	8003bc4 <__ieee754_sqrt+0x14c>
 8003ad8:	07cc      	lsls	r4, r1, #31
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003ae2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8003ae6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003aea:	bf5e      	ittt	pl
 8003aec:	0fd9      	lsrpl	r1, r3, #31
 8003aee:	005b      	lslpl	r3, r3, #1
 8003af0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003af4:	0fd9      	lsrs	r1, r3, #31
 8003af6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003afa:	2516      	movs	r5, #22
 8003afc:	4620      	mov	r0, r4
 8003afe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b02:	107f      	asrs	r7, r7, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	1846      	adds	r6, r0, r1
 8003b08:	4296      	cmp	r6, r2
 8003b0a:	bfde      	ittt	le
 8003b0c:	1b92      	suble	r2, r2, r6
 8003b0e:	1870      	addle	r0, r6, r1
 8003b10:	1864      	addle	r4, r4, r1
 8003b12:	0052      	lsls	r2, r2, #1
 8003b14:	3d01      	subs	r5, #1
 8003b16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003b1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b22:	d1f0      	bne.n	8003b06 <__ieee754_sqrt+0x8e>
 8003b24:	4629      	mov	r1, r5
 8003b26:	f04f 0e20 	mov.w	lr, #32
 8003b2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003b2e:	4282      	cmp	r2, r0
 8003b30:	eb06 0c05 	add.w	ip, r6, r5
 8003b34:	dc02      	bgt.n	8003b3c <__ieee754_sqrt+0xc4>
 8003b36:	d113      	bne.n	8003b60 <__ieee754_sqrt+0xe8>
 8003b38:	459c      	cmp	ip, r3
 8003b3a:	d811      	bhi.n	8003b60 <__ieee754_sqrt+0xe8>
 8003b3c:	f1bc 0f00 	cmp.w	ip, #0
 8003b40:	eb0c 0506 	add.w	r5, ip, r6
 8003b44:	da43      	bge.n	8003bce <__ieee754_sqrt+0x156>
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	db41      	blt.n	8003bce <__ieee754_sqrt+0x156>
 8003b4a:	f100 0801 	add.w	r8, r0, #1
 8003b4e:	1a12      	subs	r2, r2, r0
 8003b50:	4640      	mov	r0, r8
 8003b52:	459c      	cmp	ip, r3
 8003b54:	bf88      	it	hi
 8003b56:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003b5a:	eba3 030c 	sub.w	r3, r3, ip
 8003b5e:	4431      	add	r1, r6
 8003b60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003b64:	f1be 0e01 	subs.w	lr, lr, #1
 8003b68:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003b74:	d1db      	bne.n	8003b2e <__ieee754_sqrt+0xb6>
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d006      	beq.n	8003b88 <__ieee754_sqrt+0x110>
 8003b7a:	1c48      	adds	r0, r1, #1
 8003b7c:	bf0b      	itete	eq
 8003b7e:	4671      	moveq	r1, lr
 8003b80:	3101      	addne	r1, #1
 8003b82:	3401      	addeq	r4, #1
 8003b84:	f021 0101 	bicne.w	r1, r1, #1
 8003b88:	1063      	asrs	r3, r4, #1
 8003b8a:	0849      	lsrs	r1, r1, #1
 8003b8c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003b90:	07e2      	lsls	r2, r4, #31
 8003b92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003b96:	bf48      	it	mi
 8003b98:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003b9c:	460e      	mov	r6, r1
 8003b9e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003ba2:	e782      	b.n	8003aaa <__ieee754_sqrt+0x32>
 8003ba4:	0ada      	lsrs	r2, r3, #11
 8003ba6:	3815      	subs	r0, #21
 8003ba8:	055b      	lsls	r3, r3, #21
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	d0fa      	beq.n	8003ba4 <__ieee754_sqrt+0x12c>
 8003bae:	02d5      	lsls	r5, r2, #11
 8003bb0:	d50a      	bpl.n	8003bc8 <__ieee754_sqrt+0x150>
 8003bb2:	f1c1 0420 	rsb	r4, r1, #32
 8003bb6:	fa23 f404 	lsr.w	r4, r3, r4
 8003bba:	1e4d      	subs	r5, r1, #1
 8003bbc:	408b      	lsls	r3, r1
 8003bbe:	4322      	orrs	r2, r4
 8003bc0:	1b41      	subs	r1, r0, r5
 8003bc2:	e789      	b.n	8003ad8 <__ieee754_sqrt+0x60>
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	e7f0      	b.n	8003baa <__ieee754_sqrt+0x132>
 8003bc8:	0052      	lsls	r2, r2, #1
 8003bca:	3101      	adds	r1, #1
 8003bcc:	e7ef      	b.n	8003bae <__ieee754_sqrt+0x136>
 8003bce:	4680      	mov	r8, r0
 8003bd0:	e7bd      	b.n	8003b4e <__ieee754_sqrt+0xd6>
 8003bd2:	bf00      	nop
 8003bd4:	7ff00000 	.word	0x7ff00000

08003bd8 <_init>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr

08003be4 <_fini>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr
