
Projekat_Troosno_merenje_ubrzanja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003cec  08003cec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cec  08003cec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000074  08003d68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003d68  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b04  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000143e  00000000  00000000  00025ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  00026fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00027528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ba2  00000000  00000000  000279b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a61  00000000  00000000  0003e55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000835d5  00000000  00000000  00043fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a4  00000000  00000000  000c760c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c20 	.word	0x08003c20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003c20 	.word	0x08003c20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <LCD_init>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void LCD_init()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	LCD(0x38, 0); //2 lines, 5*7 matrix
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2038      	movs	r0, #56	; 0x38
 8000fd8:	f000 f812 	bl	8001000 <LCD>
	LCD(0x0C, 0); //Display on, cursor off
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f80e 	bl	8001000 <LCD>
	LCD(0x06, 0); //Increment cursor (shift to right)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f000 f80a 	bl	8001000 <LCD>
	LCD(0x01, 0); //Clear display screen
 8000fec:	2100      	movs	r1, #0
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 f806 	bl	8001000 <LCD>
	LCD(0x80, 0); //Forse cursos to beginning (1st line)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2080      	movs	r0, #128	; 0x80
 8000ff8:	f000 f802 	bl	8001000 <LCD>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LCD>:

void LCD(uint8_t val_1, uint8_t cmd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	uint8_t data1;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, cmd);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	461a      	mov	r2, r3
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	4838      	ldr	r0, [pc, #224]	; (80010fc <LCD+0xfc>)
 800101a:	f001 fb29 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = val_1 & 0x01;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data1);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	461a      	mov	r2, r3
 800102a:	2101      	movs	r1, #1
 800102c:	4833      	ldr	r0, [pc, #204]	; (80010fc <LCD+0xfc>)
 800102e:	f001 fb1f 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 1) & 0x01;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	085b      	lsrs	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, data1);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	461a      	mov	r2, r3
 8001042:	2102      	movs	r1, #2
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <LCD+0xfc>)
 8001046:	f001 fb13 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 2) & 0x01;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, data1);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	461a      	mov	r2, r3
 800105a:	2104      	movs	r1, #4
 800105c:	4827      	ldr	r0, [pc, #156]	; (80010fc <LCD+0xfc>)
 800105e:	f001 fb07 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 3) & 0x01;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, data1);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	461a      	mov	r2, r3
 8001072:	2108      	movs	r1, #8
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <LCD+0xfc>)
 8001076:	f001 fafb 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 4) & 0x01;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, data1);
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	2110      	movs	r1, #16
 800108c:	481b      	ldr	r0, [pc, #108]	; (80010fc <LCD+0xfc>)
 800108e:	f001 faef 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 5) & 0x01;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	095b      	lsrs	r3, r3, #5
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, data1);
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	461a      	mov	r2, r3
 80010a2:	2120      	movs	r1, #32
 80010a4:	4815      	ldr	r0, [pc, #84]	; (80010fc <LCD+0xfc>)
 80010a6:	f001 fae3 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 6) & 0x01;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, data1);
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	461a      	mov	r2, r3
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <LCD+0xfc>)
 80010be:	f001 fad7 	bl	8002670 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 7) & 0x01;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	09db      	lsrs	r3, r3, #7
 80010c6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, data1);
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <LCD+0xfc>)
 80010d0:	f001 face 	bl	8002670 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <LCD+0xfc>)
 80010dc:	f001 fac8 	bl	8002670 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80010e0:	2005      	movs	r0, #5
 80010e2:	f000 fc41 	bl	8001968 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <LCD+0xfc>)
 80010ee:	f001 fabf 	bl	8002670 <HAL_GPIO_WritePin>

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010c00 	.word	0x40010c00

08001100 <ispis_broja>:


void ispis_broja(float broj)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	int ceo;
    float ost;
    int ostCeo=0;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    int i=0;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    char buffer[10];

    ceo = broj;
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff37 	bl	8000f84 <__aeabi_f2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	61fb      	str	r3, [r7, #28]
    ost = broj-ceo;
 800111a:	69f8      	ldr	r0, [r7, #28]
 800111c:	f7ff fd8e 	bl	8000c3c <__aeabi_i2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fcd3 	bl	8000ad0 <__aeabi_fsub>
 800112a:	4603      	mov	r3, r0
 800112c:	61bb      	str	r3, [r7, #24]

    ostCeo = ost*1000000;
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <ispis_broja+0xcc>)
 8001130:	69b8      	ldr	r0, [r7, #24]
 8001132:	f7ff fdd7 	bl	8000ce4 <__aeabi_fmul>
 8001136:	4603      	mov	r3, r0
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff23 	bl	8000f84 <__aeabi_f2iz>
 800113e:	4603      	mov	r3, r0
 8001140:	623b      	str	r3, [r7, #32]
    ostCeo=abs(ostCeo);
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bfb8      	it	lt
 8001148:	425b      	neglt	r3, r3
 800114a:	623b      	str	r3, [r7, #32]
    sprintf(buffer,"%d",ceo);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	491f      	ldr	r1, [pc, #124]	; (80011d0 <ispis_broja+0xd0>)
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f84f 	bl	80031f8 <siprintf>
	while(buffer[i])
 800115a:	e00b      	b.n	8001174 <ispis_broja+0x74>
	{
		LCD(buffer[i],1);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff49 	bl	8001000 <LCD>
		i++;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	3301      	adds	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
	while(buffer[i])
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1ec      	bne.n	800115c <ispis_broja+0x5c>
	}

	LCD('.',1);
 8001182:	2101      	movs	r1, #1
 8001184:	202e      	movs	r0, #46	; 0x2e
 8001186:	f7ff ff3b 	bl	8001000 <LCD>
	sprintf(buffer,"%d",ostCeo);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	490f      	ldr	r1, [pc, #60]	; (80011d0 <ispis_broja+0xd0>)
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f830 	bl	80031f8 <siprintf>
	i=0;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24

	while(buffer[i])
 800119c:	e00b      	b.n	80011b6 <ispis_broja+0xb6>
	{
		LCD(buffer[i],1);
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff28 	bl	8001000 <LCD>
		i++;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	3301      	adds	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
	while(buffer[i])
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ec      	bne.n	800119e <ispis_broja+0x9e>
	}
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	49742400 	.word	0x49742400
 80011d0:	08003c38 	.word	0x08003c38

080011d4 <lcd_puts>:

void lcd_puts(const char * s)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	while(*s)
 80011dc:	e007      	b.n	80011ee <lcd_puts+0x1a>
	LCD(*s++,1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff09 	bl	8001000 <LCD>
	while(*s)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f3      	bne.n	80011de <lcd_puts+0xa>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <main>:

int main(void)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f000 fb4d 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f965 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120e:	f000 f9f1 	bl	80015f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001212:	f000 f9b1 	bl	8001578 <MX_ADC1_Init>
  float aY;
  float aZ;


  float res;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	48a5      	ldr	r0, [pc, #660]	; (80014b0 <main+0x2b0>)
 800121c:	f001 fa28 	bl	8002670 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	48a2      	ldr	r0, [pc, #648]	; (80014b0 <main+0x2b0>)
 8001226:	f001 fa23 	bl	8002670 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	48a0      	ldr	r0, [pc, #640]	; (80014b0 <main+0x2b0>)
 8001230:	f001 fa1e 	bl	8002670 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	489d      	ldr	r0, [pc, #628]	; (80014b0 <main+0x2b0>)
 800123c:	f001 fa18 	bl	8002670 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001246:	489a      	ldr	r0, [pc, #616]	; (80014b0 <main+0x2b0>)
 8001248:	f001 fa12 	bl	8002670 <HAL_GPIO_WritePin>
  {

    /* USER CODE END WHILE */


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4897      	ldr	r0, [pc, #604]	; (80014b0 <main+0x2b0>)
 8001254:	f001 fa0c 	bl	8002670 <HAL_GPIO_WritePin>
	  LCD_init();
 8001258:	f7ff feba 	bl	8000fd0 <LCD_init>
	  lcd_puts("POCINJE_RACUNANJE");
 800125c:	4895      	ldr	r0, [pc, #596]	; (80014b4 <main+0x2b4>)
 800125e:	f7ff ffb9 	bl	80011d4 <lcd_puts>

	  HAL_Delay(100);
 8001262:	2064      	movs	r0, #100	; 0x64
 8001264:	f000 fb80 	bl	8001968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126e:	4890      	ldr	r0, [pc, #576]	; (80014b0 <main+0x2b0>)
 8001270:	f001 f9fe 	bl	8002670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127a:	488d      	ldr	r0, [pc, #564]	; (80014b0 <main+0x2b0>)
 800127c:	f001 f9f8 	bl	8002670 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8001280:	488d      	ldr	r0, [pc, #564]	; (80014b8 <main+0x2b8>)
 8001282:	f000 fc6b 	bl	8001b5c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001286:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800128a:	488b      	ldr	r0, [pc, #556]	; (80014b8 <main+0x2b8>)
 800128c:	f000 fd14 	bl	8001cb8 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 8001290:	4889      	ldr	r0, [pc, #548]	; (80014b8 <main+0x2b8>)
 8001292:	f000 fe17 	bl	8001ec4 <HAL_ADC_GetValue>
 8001296:	4603      	mov	r3, r0
 8001298:	82fb      	strh	r3, [r7, #22]
	  aX=(vrednost*3.3)/4096+6.1;
 800129a:	8afb      	ldrh	r3, [r7, #22]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8a9 	bl	80003f4 <__aeabi_i2d>
 80012a2:	a37d      	add	r3, pc, #500	; (adr r3, 8001498 <main+0x298>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f90e 	bl	80004c8 <__aeabi_dmul>
 80012ac:	4603      	mov	r3, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	4618      	mov	r0, r3
 80012b2:	4621      	mov	r1, r4
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <main+0x2bc>)
 80012ba:	f7ff fa2f 	bl	800071c <__aeabi_ddiv>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	a376      	add	r3, pc, #472	; (adr r3, 80014a0 <main+0x2a0>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ff46 	bl	800015c <__adddf3>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4618      	mov	r0, r3
 80012d6:	4621      	mov	r1, r4
 80012d8:	f7ff fba6 	bl	8000a28 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

	  LCD_init();
 80012e0:	f7ff fe76 	bl	8000fd0 <LCD_init>
	  lcd_puts("X:");
 80012e4:	4876      	ldr	r0, [pc, #472]	; (80014c0 <main+0x2c0>)
 80012e6:	f7ff ff75 	bl	80011d4 <lcd_puts>

	  ispis_broja(aX);
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f7ff ff08 	bl	8001100 <ispis_broja>
	  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 fb39 	bl	8001968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fc:	486c      	ldr	r0, [pc, #432]	; (80014b0 <main+0x2b0>)
 80012fe:	f001 f9b7 	bl	8002670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	486a      	ldr	r0, [pc, #424]	; (80014b0 <main+0x2b0>)
 8001308:	f001 f9b2 	bl	8002670 <HAL_GPIO_WritePin>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800130c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001310:	4869      	ldr	r0, [pc, #420]	; (80014b8 <main+0x2b8>)
 8001312:	f000 fcd1 	bl	8001cb8 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 8001316:	4868      	ldr	r0, [pc, #416]	; (80014b8 <main+0x2b8>)
 8001318:	f000 fdd4 	bl	8001ec4 <HAL_ADC_GetValue>
 800131c:	4603      	mov	r3, r0
 800131e:	82fb      	strh	r3, [r7, #22]
	  aY=(vrednost*3.3)/4096+0.5;
 8001320:	8afb      	ldrh	r3, [r7, #22]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f866 	bl	80003f4 <__aeabi_i2d>
 8001328:	a35b      	add	r3, pc, #364	; (adr r3, 8001498 <main+0x298>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f8cb 	bl	80004c8 <__aeabi_dmul>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	4618      	mov	r0, r3
 8001338:	4621      	mov	r1, r4
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <main+0x2bc>)
 8001340:	f7ff f9ec 	bl	800071c <__aeabi_ddiv>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <main+0x2c4>)
 8001352:	f7fe ff03 	bl	800015c <__adddf3>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	f7ff fb63 	bl	8000a28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	60fb      	str	r3, [r7, #12]

	  LCD_init();
 8001366:	f7ff fe33 	bl	8000fd0 <LCD_init>
	  lcd_puts("Y:");
 800136a:	4857      	ldr	r0, [pc, #348]	; (80014c8 <main+0x2c8>)
 800136c:	f7ff ff32 	bl	80011d4 <lcd_puts>

	  ispis_broja(aY);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fec5 	bl	8001100 <ispis_broja>
	  HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f000 faf6 	bl	8001968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	484b      	ldr	r0, [pc, #300]	; (80014b0 <main+0x2b0>)
 8001382:	f001 f975 	bl	8002670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4849      	ldr	r0, [pc, #292]	; (80014b0 <main+0x2b0>)
 800138c:	f001 f970 	bl	8002670 <HAL_GPIO_WritePin>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001394:	4848      	ldr	r0, [pc, #288]	; (80014b8 <main+0x2b8>)
 8001396:	f000 fc8f 	bl	8001cb8 <HAL_ADC_PollForConversion>
	  vrednost=HAL_ADC_GetValue(&hadc1);
 800139a:	4847      	ldr	r0, [pc, #284]	; (80014b8 <main+0x2b8>)
 800139c:	f000 fd92 	bl	8001ec4 <HAL_ADC_GetValue>
 80013a0:	4603      	mov	r3, r0
 80013a2:	82fb      	strh	r3, [r7, #22]
	  aZ=(vrednost*3.3)/4096+2.7;
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f824 	bl	80003f4 <__aeabi_i2d>
 80013ac:	a33a      	add	r3, pc, #232	; (adr r3, 8001498 <main+0x298>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f889 	bl	80004c8 <__aeabi_dmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <main+0x2bc>)
 80013c4:	f7ff f9aa 	bl	800071c <__aeabi_ddiv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	a335      	add	r3, pc, #212	; (adr r3, 80014a8 <main+0x2a8>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7fe fec1 	bl	800015c <__adddf3>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	4618      	mov	r0, r3
 80013e0:	4621      	mov	r1, r4
 80013e2:	f7ff fb21 	bl	8000a28 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60bb      	str	r3, [r7, #8]

	  LCD_init();
 80013ea:	f7ff fdf1 	bl	8000fd0 <LCD_init>
	  lcd_puts("Z:");
 80013ee:	4837      	ldr	r0, [pc, #220]	; (80014cc <main+0x2cc>)
 80013f0:	f7ff fef0 	bl	80011d4 <lcd_puts>

	  ispis_broja(aZ);
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f7ff fe83 	bl	8001100 <ispis_broja>
	  HAL_Delay(100);
 80013fa:	2064      	movs	r0, #100	; 0x64
 80013fc:	f000 fab4 	bl	8001968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	482a      	ldr	r0, [pc, #168]	; (80014b0 <main+0x2b0>)
 8001406:	f001 f933 	bl	8002670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2120      	movs	r1, #32
 800140e:	4828      	ldr	r0, [pc, #160]	; (80014b0 <main+0x2b0>)
 8001410:	f001 f92e 	bl	8002670 <HAL_GPIO_WritePin>
	  res=sqrt(aX*aX+aY*aY+aZ*aZ);
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	6938      	ldr	r0, [r7, #16]
 8001418:	f7ff fc64 	bl	8000ce4 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	461c      	mov	r4, r3
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fc5e 	bl	8000ce4 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fb51 	bl	8000ad4 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461c      	mov	r4, r3
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f7ff fc53 	bl	8000ce4 <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	4619      	mov	r1, r3
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff fb46 	bl	8000ad4 <__addsf3>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffe4 	bl	8000418 <__aeabi_f2d>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f002 fae0 	bl	8003a1c <sqrt>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	4618      	mov	r0, r3
 8001462:	4621      	mov	r1, r4
 8001464:	f7ff fae0 	bl	8000a28 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	607b      	str	r3, [r7, #4]
	  LCD_init();
 800146c:	f7ff fdb0 	bl	8000fd0 <LCD_init>
	  lcd_puts("UBRZANJE JE:");
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <main+0x2d0>)
 8001472:	f7ff feaf 	bl	80011d4 <lcd_puts>

	  LCD_init();
 8001476:	f7ff fdab 	bl	8000fd0 <LCD_init>
	  ispis_broja(res);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe40 	bl	8001100 <ispis_broja>
	  lcd_puts("m/s^2");
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <main+0x2d4>)
 8001482:	f7ff fea7 	bl	80011d4 <lcd_puts>

	  HAL_Delay(100);
 8001486:	2064      	movs	r0, #100	; 0x64
 8001488:	f000 fa6e 	bl	8001968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2120      	movs	r1, #32
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <main+0x2b0>)
 8001492:	f001 f8ed 	bl	8002670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001496:	e6d9      	b.n	800124c <main+0x4c>
 8001498:	66666666 	.word	0x66666666
 800149c:	400a6666 	.word	0x400a6666
 80014a0:	66666666 	.word	0x66666666
 80014a4:	40186666 	.word	0x40186666
 80014a8:	9999999a 	.word	0x9999999a
 80014ac:	40059999 	.word	0x40059999
 80014b0:	40010800 	.word	0x40010800
 80014b4:	08003c3c 	.word	0x08003c3c
 80014b8:	2000009c 	.word	0x2000009c
 80014bc:	40b00000 	.word	0x40b00000
 80014c0:	08003c50 	.word	0x08003c50
 80014c4:	3fe00000 	.word	0x3fe00000
 80014c8:	08003c54 	.word	0x08003c54
 80014cc:	08003c58 	.word	0x08003c58
 80014d0:	08003c5c 	.word	0x08003c5c
 80014d4:	08003c6c 	.word	0x08003c6c

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fe7e 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f8bf 	bl	80026a0 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001528:	f000 f8c6 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fb2a 	bl	8002ba0 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001552:	f000 f8b1 	bl	80016b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001556:	2302      	movs	r3, #2
 8001558:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fca5 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800156c:	f000 f8a4 	bl	80016b8 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	3750      	adds	r7, #80	; 0x50
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_ADC1_Init+0x74>)
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <MX_ADC1_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_ADC1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_ADC1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_ADC1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_ADC1_Init+0x74>)
 80015a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_ADC1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_ADC1_Init+0x74>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_ADC1_Init+0x74>)
 80015b6:	f000 f9f9 	bl	80019ac <HAL_ADC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 f87a 	bl	80016b8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_ADC1_Init+0x74>)
 80015d6:	f000 fc81 	bl	8001edc <HAL_ADC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015e0:	f000 f86a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000009c 	.word	0x2000009c
 80015f0:	40012400 	.word	0x40012400

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <MX_GPIO_Init+0xb8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <MX_GPIO_Init+0xb8>)
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_GPIO_Init+0xb8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xb8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_GPIO_Init+0xb8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xb8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_GPIO_Init+0xb8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_GPIO_Init+0xb8>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_GPIO_Init+0xb8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001656:	4816      	ldr	r0, [pc, #88]	; (80016b0 <MX_GPIO_Init+0xbc>)
 8001658:	f001 f80a 	bl	8002670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800165c:	2200      	movs	r2, #0
 800165e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_GPIO_Init+0xc0>)
 8001664:	f001 f804 	bl	8002670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001668:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800166c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2302      	movs	r3, #2
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0xbc>)
 8001682:	f000 fea3 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001686:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800168a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0xc0>)
 80016a0:	f000 fe94 	bl	80023cc <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	40010c00 	.word	0x40010c00

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_MspInit+0x5c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_MspInit+0x5c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x5c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_MspInit+0x5c>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_MspInit+0x60>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_MspInit+0x60>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000

08001728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_ADC_MspInit+0x6c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d121      	bne.n	800178c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_ADC_MspInit+0x70>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_ADC_MspInit+0x70>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_ADC_MspInit+0x70>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_ADC_MspInit+0x70>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_ADC_MspInit+0x70>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_ADC_MspInit+0x70>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001778:	2307      	movs	r3, #7
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177c:	2303      	movs	r3, #3
 800177e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_ADC_MspInit+0x74>)
 8001788:	f000 fe20 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40012400 	.word	0x40012400
 8001798:	40021000 	.word	0x40021000
 800179c:	40010800 	.word	0x40010800

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <HardFault_Handler+0x4>

080017b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <BusFault_Handler+0x4>

080017be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 f8a0 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x50>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x16>
		heap_end = &end;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <_sbrk+0x50>)
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <_sbrk+0x54>)
 8001808:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <_sbrk+0x50>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <_sbrk+0x50>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	466a      	mov	r2, sp
 800181a:	4293      	cmp	r3, r2
 800181c:	d907      	bls.n	800182e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800181e:	f001 fcb9 	bl	8003194 <__errno>
 8001822:	4602      	mov	r2, r0
 8001824:	230c      	movs	r3, #12
 8001826:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	e006      	b.n	800183c <_sbrk+0x48>
	}

	heap_end += incr;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <_sbrk+0x50>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a03      	ldr	r2, [pc, #12]	; (8001844 <_sbrk+0x50>)
 8001838:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000090 	.word	0x20000090
 8001848:	200000d8 	.word	0x200000d8

0800184c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	; (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800187e:	f7ff ffe5 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f001 fc8d 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fcbb 	bl	8001200 <main>
  bx lr
 800188a:	4770      	bx	lr
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001894:	08003cf4 	.word	0x08003cf4
  ldr r2, =_sbss
 8001898:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800189c:	200000d4 	.word	0x200000d4

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x28>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 fd55 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff ff00 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fd5f 	bl	80023b2 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 fd35 	bl	800237a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000000 	.word	0x20000000
 8001928:	20000008 	.word	0x20000008
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_IncTick+0x20>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000008 	.word	0x20000008
 8001950:	200000cc 	.word	0x200000cc

08001954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	200000cc 	.word	0x200000cc

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fff0 	bl	8001954 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_Delay+0x40>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffe0 	bl	8001954 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0be      	b.n	8001b4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe9c 	bl	8001728 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fbc5 	bl	8002180 <ADC_ConversionStop_Disable>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8099 	bne.w	8001b3a <HAL_ADC_Init+0x18e>
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8095 	bne.w	8001b3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a18:	f023 0302 	bic.w	r3, r3, #2
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7b1b      	ldrb	r3, [r3, #12]
 8001a32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a44:	d003      	beq.n	8001a4e <HAL_ADC_Init+0xa2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_ADC_Init+0xa8>
 8001a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a52:	e000      	b.n	8001a56 <HAL_ADC_Init+0xaa>
 8001a54:	2300      	movs	r3, #0
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7d1b      	ldrb	r3, [r3, #20]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d119      	bne.n	8001a98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7b1b      	ldrb	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	035a      	lsls	r2, r3, #13
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e00b      	b.n	8001a98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_ADC_Init+0x1a8>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d003      	beq.n	8001ad2 <HAL_ADC_Init+0x126>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d104      	bne.n	8001adc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	051b      	lsls	r3, r3, #20
 8001ada:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_ADC_Init+0x1ac>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10b      	bne.n	8001b18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b16:	e018      	b.n	8001b4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f023 0312 	bic.w	r3, r3, #18
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b38:	e007      	b.n	8001b4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	f043 0210 	orr.w	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	ffe1f7fd 	.word	0xffe1f7fd
 8001b58:	ff1f0efe 	.word	0xff1f0efe

08001b5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Start+0x1a>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e098      	b.n	8001ca8 <HAL_ADC_Start+0x14c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 faa4 	bl	80020cc <ADC_Enable>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 8087 	bne.w	8001c9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a41      	ldr	r2, [pc, #260]	; (8001cb0 <HAL_ADC_Start+0x154>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_Start+0x5e>
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_ADC_Start+0x158>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d115      	bne.n	8001be6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d026      	beq.n	8001c22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be4:	e01d      	b.n	8001c22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <HAL_ADC_Start+0x158>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_Start+0xaa>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_ADC_Start+0x154>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10d      	bne.n	8001c22 <HAL_ADC_Start+0xc6>
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_ADC_Start+0x158>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f023 0206 	bic.w	r2, r3, #6
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0202 	mvn.w	r2, #2
 8001c52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c62:	d113      	bne.n	8001c8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ADC_Start+0x154>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_ADC_Start+0x158>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	e00c      	b.n	8001ca6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40012800 	.word	0x40012800
 8001cb4:	40012400 	.word	0x40012400

08001cb8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cce:	f7ff fe41 	bl	8001954 <HAL_GetTick>
 8001cd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0d3      	b.n	8001ea2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d131      	bne.n	8001d6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d12a      	bne.n	8001d6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d16:	e021      	b.n	8001d5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d01d      	beq.n	8001d5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_ADC_PollForConversion+0x7e>
 8001d26:	f7ff fe15 	bl	8001954 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d212      	bcs.n	8001d5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10b      	bne.n	8001d5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f043 0204 	orr.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0a2      	b.n	8001ea2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0d6      	beq.n	8001d18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d6a:	e070      	b.n	8001e4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <HAL_ADC_PollForConversion+0x1f4>)
 8001d6e:	681c      	ldr	r4, [r3, #0]
 8001d70:	2002      	movs	r0, #2
 8001d72:	f001 f953 	bl	800301c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d76:	4603      	mov	r3, r0
 8001d78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6919      	ldr	r1, [r3, #16]
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x104>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68d9      	ldr	r1, [r3, #12]
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_ADC_PollForConversion+0x1fc>)
 8001d92:	400b      	ands	r3, r1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x104>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_ADC_PollForConversion+0x200>)
 8001da0:	400b      	ands	r3, r1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x100>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68d9      	ldr	r1, [r3, #12]
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_ADC_PollForConversion+0x204>)
 8001dae:	400b      	ands	r3, r1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x100>
 8001db4:	2314      	movs	r3, #20
 8001db6:	e020      	b.n	8001dfa <HAL_ADC_PollForConversion+0x142>
 8001db8:	2329      	movs	r3, #41	; 0x29
 8001dba:	e01e      	b.n	8001dfa <HAL_ADC_PollForConversion+0x142>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_ADC_PollForConversion+0x200>)
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x120>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68d9      	ldr	r1, [r3, #12]
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_ADC_PollForConversion+0x204>)
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_ADC_PollForConversion+0x13c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6919      	ldr	r1, [r3, #16]
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_ADC_PollForConversion+0x208>)
 8001de0:	400b      	ands	r3, r1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x140>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68d9      	ldr	r1, [r3, #12]
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_ADC_PollForConversion+0x208>)
 8001dee:	400b      	ands	r3, r1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x140>
 8001df4:	2354      	movs	r3, #84	; 0x54
 8001df6:	e000      	b.n	8001dfa <HAL_ADC_PollForConversion+0x142>
 8001df8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e00:	e021      	b.n	8001e46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d01a      	beq.n	8001e40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_ADC_PollForConversion+0x168>
 8001e10:	f7ff fda0 	bl	8001954 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d20f      	bcs.n	8001e40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d90b      	bls.n	8001e40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f043 0204 	orr.w	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e030      	b.n	8001ea2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d8d9      	bhi.n	8001e02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0212 	mvn.w	r2, #18
 8001e56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e72:	d115      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	24924924 	.word	0x24924924
 8001eb4:	00924924 	.word	0x00924924
 8001eb8:	12492492 	.word	0x12492492
 8001ebc:	00492492 	.word	0x00492492
 8001ec0:	00249249 	.word	0x00249249

08001ec4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x20>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0dc      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1da>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	d81c      	bhi.n	8001f46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b05      	subs	r3, #5
 8001f1e:	221f      	movs	r2, #31
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b05      	subs	r3, #5
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34
 8001f44:	e03c      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d81c      	bhi.n	8001f88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b23      	subs	r3, #35	; 0x23
 8001f60:	221f      	movs	r2, #31
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4019      	ands	r1, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b23      	subs	r3, #35	; 0x23
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
 8001f86:	e01b      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b41      	subs	r3, #65	; 0x41
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4019      	ands	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b41      	subs	r3, #65	; 0x41
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d91c      	bls.n	8002002 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b1e      	subs	r3, #30
 8001fda:	2207      	movs	r2, #7
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4019      	ands	r1, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6898      	ldr	r0, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b1e      	subs	r3, #30
 8001ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	e019      	b.n	8002036 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6919      	ldr	r1, [r3, #16]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6898      	ldr	r0, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b10      	cmp	r3, #16
 800203c:	d003      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002042:	2b11      	cmp	r3, #17
 8002044:	d132      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d125      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d126      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800206c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b10      	cmp	r3, #16
 8002074:	d11a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0c9a      	lsrs	r2, r3, #18
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x1b2>
 800209a:	e007      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012400 	.word	0x40012400
 80020c4:	20000000 	.word	0x20000000
 80020c8:	431bde83 	.word	0x431bde83

080020cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d040      	beq.n	800216c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <ADC_Enable+0xac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1f      	ldr	r2, [pc, #124]	; (800217c <ADC_Enable+0xb0>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	0c9b      	lsrs	r3, r3, #18
 8002106:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002108:	e002      	b.n	8002110 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002116:	f7ff fc1d 	bl	8001954 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800211c:	e01f      	b.n	800215e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800211e:	f7ff fc19 	bl	8001954 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d918      	bls.n	800215e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d011      	beq.n	800215e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d1d8      	bne.n	800211e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83

08002180 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12e      	bne.n	80021f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021aa:	f7ff fbd3 	bl	8001954 <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021b0:	e01b      	b.n	80021ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021b2:	f7ff fbcf 	bl	8001954 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d914      	bls.n	80021ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d10d      	bne.n	80021ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e007      	b.n	80021fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d0dc      	beq.n	80021b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff90 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff49 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff5e 	bl	800224c <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff90 	bl	80022bc <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5f 	bl	8002268 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffb0 	bl	8002320 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b08b      	sub	sp, #44	; 0x2c
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	e121      	b.n	8002624 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023e0:	2201      	movs	r2, #1
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8110 	bne.w	800261e <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b12      	cmp	r3, #18
 8002404:	d034      	beq.n	8002470 <HAL_GPIO_Init+0xa4>
 8002406:	2b12      	cmp	r3, #18
 8002408:	d80d      	bhi.n	8002426 <HAL_GPIO_Init+0x5a>
 800240a:	2b02      	cmp	r3, #2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x9a>
 800240e:	2b02      	cmp	r3, #2
 8002410:	d804      	bhi.n	800241c <HAL_GPIO_Init+0x50>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d031      	beq.n	800247a <HAL_GPIO_Init+0xae>
 8002416:	2b01      	cmp	r3, #1
 8002418:	d01c      	beq.n	8002454 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800241a:	e048      	b.n	80024ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800241c:	2b03      	cmp	r3, #3
 800241e:	d043      	beq.n	80024a8 <HAL_GPIO_Init+0xdc>
 8002420:	2b11      	cmp	r3, #17
 8002422:	d01b      	beq.n	800245c <HAL_GPIO_Init+0x90>
          break;
 8002424:	e043      	b.n	80024ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002426:	4a86      	ldr	r2, [pc, #536]	; (8002640 <HAL_GPIO_Init+0x274>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d026      	beq.n	800247a <HAL_GPIO_Init+0xae>
 800242c:	4a84      	ldr	r2, [pc, #528]	; (8002640 <HAL_GPIO_Init+0x274>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d806      	bhi.n	8002440 <HAL_GPIO_Init+0x74>
 8002432:	4a84      	ldr	r2, [pc, #528]	; (8002644 <HAL_GPIO_Init+0x278>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d020      	beq.n	800247a <HAL_GPIO_Init+0xae>
 8002438:	4a83      	ldr	r2, [pc, #524]	; (8002648 <HAL_GPIO_Init+0x27c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_GPIO_Init+0xae>
          break;
 800243e:	e036      	b.n	80024ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002440:	4a82      	ldr	r2, [pc, #520]	; (800264c <HAL_GPIO_Init+0x280>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0xae>
 8002446:	4a82      	ldr	r2, [pc, #520]	; (8002650 <HAL_GPIO_Init+0x284>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d016      	beq.n	800247a <HAL_GPIO_Init+0xae>
 800244c:	4a81      	ldr	r2, [pc, #516]	; (8002654 <HAL_GPIO_Init+0x288>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0xae>
          break;
 8002452:	e02c      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	623b      	str	r3, [r7, #32]
          break;
 800245a:	e028      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	3304      	adds	r3, #4
 8002462:	623b      	str	r3, [r7, #32]
          break;
 8002464:	e023      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	3308      	adds	r3, #8
 800246c:	623b      	str	r3, [r7, #32]
          break;
 800246e:	e01e      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	330c      	adds	r3, #12
 8002476:	623b      	str	r3, [r7, #32]
          break;
 8002478:	e019      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002482:	2304      	movs	r3, #4
 8002484:	623b      	str	r3, [r7, #32]
          break;
 8002486:	e012      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002490:	2308      	movs	r3, #8
 8002492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	611a      	str	r2, [r3, #16]
          break;
 800249a:	e008      	b.n	80024ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800249c:	2308      	movs	r3, #8
 800249e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	615a      	str	r2, [r3, #20]
          break;
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
          break;
 80024ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2bff      	cmp	r3, #255	; 0xff
 80024b2:	d801      	bhi.n	80024b8 <HAL_GPIO_Init+0xec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	e001      	b.n	80024bc <HAL_GPIO_Init+0xf0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2bff      	cmp	r3, #255	; 0xff
 80024c2:	d802      	bhi.n	80024ca <HAL_GPIO_Init+0xfe>
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x104>
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3b08      	subs	r3, #8
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	210f      	movs	r1, #15
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	401a      	ands	r2, r3
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	431a      	orrs	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8090 	beq.w	800261e <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024fe:	4b56      	ldr	r3, [pc, #344]	; (8002658 <HAL_GPIO_Init+0x28c>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_GPIO_Init+0x28c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6193      	str	r3, [r2, #24]
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_GPIO_Init+0x28c>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002516:	4a51      	ldr	r2, [pc, #324]	; (800265c <HAL_GPIO_Init+0x290>)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_GPIO_Init+0x294>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x192>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_GPIO_Init+0x298>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x18e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a46      	ldr	r2, [pc, #280]	; (8002668 <HAL_GPIO_Init+0x29c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x18a>
 8002552:	2302      	movs	r3, #2
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x194>
 8002556:	2303      	movs	r3, #3
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x194>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x194>
 800255e:	2300      	movs	r3, #0
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002570:	493a      	ldr	r1, [pc, #232]	; (800265c <HAL_GPIO_Init+0x290>)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_GPIO_Init+0x2a0>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4937      	ldr	r1, [pc, #220]	; (800266c <HAL_GPIO_Init+0x2a0>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
 8002596:	e006      	b.n	80025a6 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_GPIO_Init+0x2a0>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	4932      	ldr	r1, [pc, #200]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	492d      	ldr	r1, [pc, #180]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 80025be:	e006      	b.n	80025ce <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	4928      	ldr	r1, [pc, #160]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4923      	ldr	r1, [pc, #140]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	491e      	ldr	r1, [pc, #120]	; (800266c <HAL_GPIO_Init+0x2a0>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_GPIO_Init+0x2a0>)
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	4919      	ldr	r1, [pc, #100]	; (800266c <HAL_GPIO_Init+0x2a0>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_GPIO_Init+0x2a0>)
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4914      	ldr	r1, [pc, #80]	; (800266c <HAL_GPIO_Init+0x2a0>)
 800261a:	4013      	ands	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f aed6 	bne.w	80023e0 <HAL_GPIO_Init+0x14>
  }
}
 8002634:	bf00      	nop
 8002636:	372c      	adds	r7, #44	; 0x2c
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	10210000 	.word	0x10210000
 8002644:	10110000 	.word	0x10110000
 8002648:	10120000 	.word	0x10120000
 800264c:	10310000 	.word	0x10310000
 8002650:	10320000 	.word	0x10320000
 8002654:	10220000 	.word	0x10220000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e26c      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8087 	beq.w	80027ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c0:	4b92      	ldr	r3, [pc, #584]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026cc:	4b8f      	ldr	r3, [pc, #572]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d112      	bne.n	80026fe <HAL_RCC_OscConfig+0x5e>
 80026d8:	4b8c      	ldr	r3, [pc, #560]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d10b      	bne.n	80026fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d06c      	beq.n	80027cc <HAL_RCC_OscConfig+0x12c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d168      	bne.n	80027cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e246      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x76>
 8002708:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a7f      	ldr	r2, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b7b      	ldr	r3, [pc, #492]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7a      	ldr	r2, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b78      	ldr	r3, [pc, #480]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xbc>
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a71      	ldr	r2, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 800275c:	4b6b      	ldr	r3, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6a      	ldr	r2, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7ff f8ea 	bl	8001954 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7ff f8e6 	bl	8001954 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1fa      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe4>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f8d6 	bl	8001954 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff f8d2 	bl	8001954 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1e6      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x10c>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027da:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x18c>
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x176>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1ba      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4939      	ldr	r1, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff f88b 	bl	8001954 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7ff f887 	bl	8001954 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e19b      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4927      	ldr	r1, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff f86a 	bl	8001954 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002884:	f7ff f866 	bl	8001954 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e17a      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03a      	beq.n	8002924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7ff f84a 	bl	8001954 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7ff f846 	bl	8001954 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e15a      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028e2:	2001      	movs	r0, #1
 80028e4:	f000 fac6 	bl	8002e74 <RCC_Delay>
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7ff f830 	bl	8001954 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff f82c 	bl	8001954 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d908      	bls.n	8002918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e140      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	42420000 	.word	0x42420000
 8002914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e9      	bne.n	80028f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a6 	beq.w	8002a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b97      	ldr	r3, [pc, #604]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b94      	ldr	r3, [pc, #592]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4a93      	ldr	r2, [pc, #588]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	61d3      	str	r3, [r2, #28]
 800294e:	4b91      	ldr	r3, [pc, #580]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b8e      	ldr	r3, [pc, #568]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a8a      	ldr	r2, [pc, #552]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7fe ffed 	bl	8001954 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fe ffe9 	bl	8001954 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b64      	cmp	r3, #100	; 0x64
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0fd      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x312>
 80029a4:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e02d      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x334>
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a75      	ldr	r2, [pc, #468]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a72      	ldr	r2, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	e01c      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x356>
 80029dc:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4a6c      	ldr	r2, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6213      	str	r3, [r2, #32]
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e00b      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a66      	ldr	r2, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6213      	str	r3, [r2, #32]
 8002a02:	4b64      	ldr	r3, [pc, #400]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d015      	beq.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe ff9d 	bl	8001954 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe ff99 	bl	8001954 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0ab      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ee      	beq.n	8002a1e <HAL_RCC_OscConfig+0x37e>
 8002a40:	e014      	b.n	8002a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7fe ff87 	bl	8001954 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe ff83 	bl	8001954 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e095      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a72:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a47      	ldr	r2, [pc, #284]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8081 	beq.w	8002b8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d061      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d146      	bne.n	8002b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x4fc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe ff57 	bl	8001954 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe ff53 	bl	8001954 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e067      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	492d      	ldr	r1, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a19      	ldr	r1, [r3, #32]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	430b      	orrs	r3, r1
 8002af6:	4927      	ldr	r1, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_OscConfig+0x4fc>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe ff27 	bl	8001954 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe ff23 	bl	8001954 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e037      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46a>
 8002b28:	e02f      	b.n	8002b8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCC_OscConfig+0x4fc>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe ff10 	bl	8001954 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe ff0c 	bl	8001954 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e020      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x498>
 8002b56:	e018      	b.n	8002b8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e013      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	42420060 	.word	0x42420060

08002ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d0      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4965      	ldr	r1, [pc, #404]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d040      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e073      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06b      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4936      	ldr	r1, [pc, #216]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fe60 	bl	8001954 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe fe5c 	bl	8001954 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e053      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d210      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4922      	ldr	r1, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4601      	mov	r1, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	fa21 f303 	lsr.w	r3, r1, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1cc>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fdbe 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08003c9c 	.word	0x08003c9c
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b490      	push	{r4, r7}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d7c:	1d3c      	adds	r4, r7, #4
 8002d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x46>
 8002db2:	e02d      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002db6:	623b      	str	r3, [r7, #32]
      break;
 8002db8:	e02d      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	0c9b      	lsrs	r3, r3, #18
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c5b      	lsrs	r3, r3, #17
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002de6:	4413      	add	r3, r2
 8002de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002df2:	fb02 f203 	mul.w	r2, r2, r3
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e004      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	623b      	str	r3, [r7, #32]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e12:	623b      	str	r3, [r7, #32]
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc90      	pop	{r4, r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	08003c74 	.word	0x08003c74
 8002e28:	08003c84 	.word	0x08003c84
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	007a1200 	.word	0x007a1200
 8002e34:	003d0900 	.word	0x003d0900

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff fff2 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0adb      	lsrs	r3, r3, #11
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08003cac 	.word	0x08003cac

08002e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <RCC_Delay+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <RCC_Delay+0x38>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e90:	bf00      	nop
  }
  while (Delay --);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <RCC_Delay+0x1c>
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d07d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d118      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f10:	f7fe fd20 	bl	8001954 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	e008      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fe fd1c 	bl	8001954 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e06d      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d027      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fceb 	bl	8001954 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe fce7 	bl	8001954 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	490b      	ldr	r1, [pc, #44]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
 8003018:	42420440 	.word	0x42420440

0800301c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b08d      	sub	sp, #52	; 0x34
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003024:	4b55      	ldr	r3, [pc, #340]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003026:	f107 040c 	add.w	r4, r7, #12
 800302a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800302c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	2300      	movs	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d07f      	beq.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d002      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003054:	2b01      	cmp	r3, #1
 8003056:	d048      	beq.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003058:	e08b      	b.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003060:	4b48      	ldr	r3, [pc, #288]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d07f      	beq.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003078:	4413      	add	r3, r2
 800307a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800307e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800308a:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0c5b      	lsrs	r3, r3, #17
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003098:	4413      	add	r3, r2
 800309a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80030aa:	4a37      	ldr	r2, [pc, #220]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	4a33      	ldr	r2, [pc, #204]	; (800318c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d2:	d102      	bne.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030d8:	e048      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030e8:	e040      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d108      	bne.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
 800310c:	e01f      	b.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d109      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003126:	f649 4340 	movw	r3, #40000	; 0x9c40
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	e00f      	b.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003138:	d11a      	bne.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d014      	beq.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003146:	f24f 4324 	movw	r3, #62500	; 0xf424
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800314c:	e010      	b.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800314e:	e00f      	b.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003150:	f7ff fe7c 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0b9b      	lsrs	r3, r3, #14
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003170:	bf00      	nop
    }
  }
  return (frequency);
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003174:	4618      	mov	r0, r3
 8003176:	3734      	adds	r7, #52	; 0x34
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	08003c88 	.word	0x08003c88
 8003180:	08003c98 	.word	0x08003c98
 8003184:	40021000 	.word	0x40021000
 8003188:	007a1200 	.word	0x007a1200
 800318c:	003d0900 	.word	0x003d0900
 8003190:	aaaaaaab 	.word	0xaaaaaaab

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000000c 	.word	0x2000000c

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2500      	movs	r5, #0
 80031a4:	4e0c      	ldr	r6, [pc, #48]	; (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a8:	1ba4      	subs	r4, r4, r6
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a5      	cmp	r5, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f000 fd36 	bl	8003c20 <_init>
 80031b4:	2500      	movs	r5, #0
 80031b6:	4e0a      	ldr	r6, [pc, #40]	; (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <__libc_init_array+0x44>)
 80031ba:	1ba4      	subs	r4, r4, r6
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c8:	4798      	blx	r3
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d2:	4798      	blx	r3
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08003cec 	.word	0x08003cec
 80031dc:	08003cec 	.word	0x08003cec
 80031e0:	08003cec 	.word	0x08003cec
 80031e4:	08003cf0 	.word	0x08003cf0

080031e8 <memset>:
 80031e8:	4603      	mov	r3, r0
 80031ea:	4402      	add	r2, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <siprintf>:
 80031f8:	b40e      	push	{r1, r2, r3}
 80031fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031fe:	b500      	push	{lr}
 8003200:	b09c      	sub	sp, #112	; 0x70
 8003202:	ab1d      	add	r3, sp, #116	; 0x74
 8003204:	9002      	str	r0, [sp, #8]
 8003206:	9006      	str	r0, [sp, #24]
 8003208:	9107      	str	r1, [sp, #28]
 800320a:	9104      	str	r1, [sp, #16]
 800320c:	4808      	ldr	r0, [pc, #32]	; (8003230 <siprintf+0x38>)
 800320e:	4909      	ldr	r1, [pc, #36]	; (8003234 <siprintf+0x3c>)
 8003210:	f853 2b04 	ldr.w	r2, [r3], #4
 8003214:	9105      	str	r1, [sp, #20]
 8003216:	6800      	ldr	r0, [r0, #0]
 8003218:	a902      	add	r1, sp, #8
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	f000 f866 	bl	80032ec <_svfiprintf_r>
 8003220:	2200      	movs	r2, #0
 8003222:	9b02      	ldr	r3, [sp, #8]
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	b01c      	add	sp, #112	; 0x70
 8003228:	f85d eb04 	ldr.w	lr, [sp], #4
 800322c:	b003      	add	sp, #12
 800322e:	4770      	bx	lr
 8003230:	2000000c 	.word	0x2000000c
 8003234:	ffff0208 	.word	0xffff0208

08003238 <__ssputs_r>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	688e      	ldr	r6, [r1, #8]
 800323e:	4682      	mov	sl, r0
 8003240:	429e      	cmp	r6, r3
 8003242:	460c      	mov	r4, r1
 8003244:	4690      	mov	r8, r2
 8003246:	4699      	mov	r9, r3
 8003248:	d837      	bhi.n	80032ba <__ssputs_r+0x82>
 800324a:	898a      	ldrh	r2, [r1, #12]
 800324c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003250:	d031      	beq.n	80032b6 <__ssputs_r+0x7e>
 8003252:	2302      	movs	r3, #2
 8003254:	6825      	ldr	r5, [r4, #0]
 8003256:	6909      	ldr	r1, [r1, #16]
 8003258:	1a6f      	subs	r7, r5, r1
 800325a:	6965      	ldr	r5, [r4, #20]
 800325c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003260:	fb95 f5f3 	sdiv	r5, r5, r3
 8003264:	f109 0301 	add.w	r3, r9, #1
 8003268:	443b      	add	r3, r7
 800326a:	429d      	cmp	r5, r3
 800326c:	bf38      	it	cc
 800326e:	461d      	movcc	r5, r3
 8003270:	0553      	lsls	r3, r2, #21
 8003272:	d530      	bpl.n	80032d6 <__ssputs_r+0x9e>
 8003274:	4629      	mov	r1, r5
 8003276:	f000 fb37 	bl	80038e8 <_malloc_r>
 800327a:	4606      	mov	r6, r0
 800327c:	b950      	cbnz	r0, 8003294 <__ssputs_r+0x5c>
 800327e:	230c      	movs	r3, #12
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f8ca 3000 	str.w	r3, [sl]
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003294:	463a      	mov	r2, r7
 8003296:	6921      	ldr	r1, [r4, #16]
 8003298:	f000 fab6 	bl	8003808 <memcpy>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	6126      	str	r6, [r4, #16]
 80032aa:	443e      	add	r6, r7
 80032ac:	6026      	str	r6, [r4, #0]
 80032ae:	464e      	mov	r6, r9
 80032b0:	6165      	str	r5, [r4, #20]
 80032b2:	1bed      	subs	r5, r5, r7
 80032b4:	60a5      	str	r5, [r4, #8]
 80032b6:	454e      	cmp	r6, r9
 80032b8:	d900      	bls.n	80032bc <__ssputs_r+0x84>
 80032ba:	464e      	mov	r6, r9
 80032bc:	4632      	mov	r2, r6
 80032be:	4641      	mov	r1, r8
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	f000 faac 	bl	800381e <memmove>
 80032c6:	68a3      	ldr	r3, [r4, #8]
 80032c8:	2000      	movs	r0, #0
 80032ca:	1b9b      	subs	r3, r3, r6
 80032cc:	60a3      	str	r3, [r4, #8]
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	441e      	add	r6, r3
 80032d2:	6026      	str	r6, [r4, #0]
 80032d4:	e7dc      	b.n	8003290 <__ssputs_r+0x58>
 80032d6:	462a      	mov	r2, r5
 80032d8:	f000 fb60 	bl	800399c <_realloc_r>
 80032dc:	4606      	mov	r6, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d1e2      	bne.n	80032a8 <__ssputs_r+0x70>
 80032e2:	6921      	ldr	r1, [r4, #16]
 80032e4:	4650      	mov	r0, sl
 80032e6:	f000 fab3 	bl	8003850 <_free_r>
 80032ea:	e7c8      	b.n	800327e <__ssputs_r+0x46>

080032ec <_svfiprintf_r>:
 80032ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f0:	461d      	mov	r5, r3
 80032f2:	898b      	ldrh	r3, [r1, #12]
 80032f4:	b09d      	sub	sp, #116	; 0x74
 80032f6:	061f      	lsls	r7, r3, #24
 80032f8:	4680      	mov	r8, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4616      	mov	r6, r2
 80032fe:	d50f      	bpl.n	8003320 <_svfiprintf_r+0x34>
 8003300:	690b      	ldr	r3, [r1, #16]
 8003302:	b96b      	cbnz	r3, 8003320 <_svfiprintf_r+0x34>
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	f000 faef 	bl	80038e8 <_malloc_r>
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	6120      	str	r0, [r4, #16]
 800330e:	b928      	cbnz	r0, 800331c <_svfiprintf_r+0x30>
 8003310:	230c      	movs	r3, #12
 8003312:	f8c8 3000 	str.w	r3, [r8]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	e0c8      	b.n	80034ae <_svfiprintf_r+0x1c2>
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	6163      	str	r3, [r4, #20]
 8003320:	2300      	movs	r3, #0
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
 8003324:	2320      	movs	r3, #32
 8003326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800332a:	2330      	movs	r3, #48	; 0x30
 800332c:	f04f 0b01 	mov.w	fp, #1
 8003330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003334:	9503      	str	r5, [sp, #12]
 8003336:	4637      	mov	r7, r6
 8003338:	463d      	mov	r5, r7
 800333a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800333e:	b10b      	cbz	r3, 8003344 <_svfiprintf_r+0x58>
 8003340:	2b25      	cmp	r3, #37	; 0x25
 8003342:	d13e      	bne.n	80033c2 <_svfiprintf_r+0xd6>
 8003344:	ebb7 0a06 	subs.w	sl, r7, r6
 8003348:	d00b      	beq.n	8003362 <_svfiprintf_r+0x76>
 800334a:	4653      	mov	r3, sl
 800334c:	4632      	mov	r2, r6
 800334e:	4621      	mov	r1, r4
 8003350:	4640      	mov	r0, r8
 8003352:	f7ff ff71 	bl	8003238 <__ssputs_r>
 8003356:	3001      	adds	r0, #1
 8003358:	f000 80a4 	beq.w	80034a4 <_svfiprintf_r+0x1b8>
 800335c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800335e:	4453      	add	r3, sl
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
 8003362:	783b      	ldrb	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 809d 	beq.w	80034a4 <_svfiprintf_r+0x1b8>
 800336a:	2300      	movs	r3, #0
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800337c:	931a      	str	r3, [sp, #104]	; 0x68
 800337e:	462f      	mov	r7, r5
 8003380:	2205      	movs	r2, #5
 8003382:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003386:	4850      	ldr	r0, [pc, #320]	; (80034c8 <_svfiprintf_r+0x1dc>)
 8003388:	f000 fa30 	bl	80037ec <memchr>
 800338c:	9b04      	ldr	r3, [sp, #16]
 800338e:	b9d0      	cbnz	r0, 80033c6 <_svfiprintf_r+0xda>
 8003390:	06d9      	lsls	r1, r3, #27
 8003392:	bf44      	itt	mi
 8003394:	2220      	movmi	r2, #32
 8003396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800339a:	071a      	lsls	r2, r3, #28
 800339c:	bf44      	itt	mi
 800339e:	222b      	movmi	r2, #43	; 0x2b
 80033a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033a4:	782a      	ldrb	r2, [r5, #0]
 80033a6:	2a2a      	cmp	r2, #42	; 0x2a
 80033a8:	d015      	beq.n	80033d6 <_svfiprintf_r+0xea>
 80033aa:	462f      	mov	r7, r5
 80033ac:	2000      	movs	r0, #0
 80033ae:	250a      	movs	r5, #10
 80033b0:	9a07      	ldr	r2, [sp, #28]
 80033b2:	4639      	mov	r1, r7
 80033b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033b8:	3b30      	subs	r3, #48	; 0x30
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d94d      	bls.n	800345a <_svfiprintf_r+0x16e>
 80033be:	b1b8      	cbz	r0, 80033f0 <_svfiprintf_r+0x104>
 80033c0:	e00f      	b.n	80033e2 <_svfiprintf_r+0xf6>
 80033c2:	462f      	mov	r7, r5
 80033c4:	e7b8      	b.n	8003338 <_svfiprintf_r+0x4c>
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <_svfiprintf_r+0x1dc>)
 80033c8:	463d      	mov	r5, r7
 80033ca:	1a80      	subs	r0, r0, r2
 80033cc:	fa0b f000 	lsl.w	r0, fp, r0
 80033d0:	4318      	orrs	r0, r3
 80033d2:	9004      	str	r0, [sp, #16]
 80033d4:	e7d3      	b.n	800337e <_svfiprintf_r+0x92>
 80033d6:	9a03      	ldr	r2, [sp, #12]
 80033d8:	1d11      	adds	r1, r2, #4
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	9103      	str	r1, [sp, #12]
 80033de:	2a00      	cmp	r2, #0
 80033e0:	db01      	blt.n	80033e6 <_svfiprintf_r+0xfa>
 80033e2:	9207      	str	r2, [sp, #28]
 80033e4:	e004      	b.n	80033f0 <_svfiprintf_r+0x104>
 80033e6:	4252      	negs	r2, r2
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	9207      	str	r2, [sp, #28]
 80033ee:	9304      	str	r3, [sp, #16]
 80033f0:	783b      	ldrb	r3, [r7, #0]
 80033f2:	2b2e      	cmp	r3, #46	; 0x2e
 80033f4:	d10c      	bne.n	8003410 <_svfiprintf_r+0x124>
 80033f6:	787b      	ldrb	r3, [r7, #1]
 80033f8:	2b2a      	cmp	r3, #42	; 0x2a
 80033fa:	d133      	bne.n	8003464 <_svfiprintf_r+0x178>
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	3702      	adds	r7, #2
 8003400:	1d1a      	adds	r2, r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	9203      	str	r2, [sp, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	bfb8      	it	lt
 800340a:	f04f 33ff 	movlt.w	r3, #4294967295
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	4d2e      	ldr	r5, [pc, #184]	; (80034cc <_svfiprintf_r+0x1e0>)
 8003412:	2203      	movs	r2, #3
 8003414:	7839      	ldrb	r1, [r7, #0]
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f9e8 	bl	80037ec <memchr>
 800341c:	b138      	cbz	r0, 800342e <_svfiprintf_r+0x142>
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	1b40      	subs	r0, r0, r5
 8003422:	fa03 f000 	lsl.w	r0, r3, r0
 8003426:	9b04      	ldr	r3, [sp, #16]
 8003428:	3701      	adds	r7, #1
 800342a:	4303      	orrs	r3, r0
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	7839      	ldrb	r1, [r7, #0]
 8003430:	2206      	movs	r2, #6
 8003432:	4827      	ldr	r0, [pc, #156]	; (80034d0 <_svfiprintf_r+0x1e4>)
 8003434:	1c7e      	adds	r6, r7, #1
 8003436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800343a:	f000 f9d7 	bl	80037ec <memchr>
 800343e:	2800      	cmp	r0, #0
 8003440:	d038      	beq.n	80034b4 <_svfiprintf_r+0x1c8>
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <_svfiprintf_r+0x1e8>)
 8003444:	bb13      	cbnz	r3, 800348c <_svfiprintf_r+0x1a0>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	3307      	adds	r3, #7
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	3308      	adds	r3, #8
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003454:	444b      	add	r3, r9
 8003456:	9309      	str	r3, [sp, #36]	; 0x24
 8003458:	e76d      	b.n	8003336 <_svfiprintf_r+0x4a>
 800345a:	fb05 3202 	mla	r2, r5, r2, r3
 800345e:	2001      	movs	r0, #1
 8003460:	460f      	mov	r7, r1
 8003462:	e7a6      	b.n	80033b2 <_svfiprintf_r+0xc6>
 8003464:	2300      	movs	r3, #0
 8003466:	250a      	movs	r5, #10
 8003468:	4619      	mov	r1, r3
 800346a:	3701      	adds	r7, #1
 800346c:	9305      	str	r3, [sp, #20]
 800346e:	4638      	mov	r0, r7
 8003470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003474:	3a30      	subs	r2, #48	; 0x30
 8003476:	2a09      	cmp	r2, #9
 8003478:	d903      	bls.n	8003482 <_svfiprintf_r+0x196>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0c8      	beq.n	8003410 <_svfiprintf_r+0x124>
 800347e:	9105      	str	r1, [sp, #20]
 8003480:	e7c6      	b.n	8003410 <_svfiprintf_r+0x124>
 8003482:	fb05 2101 	mla	r1, r5, r1, r2
 8003486:	2301      	movs	r3, #1
 8003488:	4607      	mov	r7, r0
 800348a:	e7f0      	b.n	800346e <_svfiprintf_r+0x182>
 800348c:	ab03      	add	r3, sp, #12
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4622      	mov	r2, r4
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <_svfiprintf_r+0x1ec>)
 8003494:	a904      	add	r1, sp, #16
 8003496:	4640      	mov	r0, r8
 8003498:	f3af 8000 	nop.w
 800349c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034a0:	4681      	mov	r9, r0
 80034a2:	d1d6      	bne.n	8003452 <_svfiprintf_r+0x166>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	065b      	lsls	r3, r3, #25
 80034a8:	f53f af35 	bmi.w	8003316 <_svfiprintf_r+0x2a>
 80034ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ae:	b01d      	add	sp, #116	; 0x74
 80034b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4622      	mov	r2, r4
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <_svfiprintf_r+0x1ec>)
 80034bc:	a904      	add	r1, sp, #16
 80034be:	4640      	mov	r0, r8
 80034c0:	f000 f882 	bl	80035c8 <_printf_i>
 80034c4:	e7ea      	b.n	800349c <_svfiprintf_r+0x1b0>
 80034c6:	bf00      	nop
 80034c8:	08003cb4 	.word	0x08003cb4
 80034cc:	08003cba 	.word	0x08003cba
 80034d0:	08003cbe 	.word	0x08003cbe
 80034d4:	00000000 	.word	0x00000000
 80034d8:	08003239 	.word	0x08003239

080034dc <_printf_common>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	4691      	mov	r9, r2
 80034e2:	461f      	mov	r7, r3
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4606      	mov	r6, r0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfb8      	it	lt
 80034ee:	4613      	movlt	r3, r2
 80034f0:	f8c9 3000 	str.w	r3, [r9]
 80034f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034f8:	460c      	mov	r4, r1
 80034fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034fe:	b112      	cbz	r2, 8003506 <_printf_common+0x2a>
 8003500:	3301      	adds	r3, #1
 8003502:	f8c9 3000 	str.w	r3, [r9]
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	0699      	lsls	r1, r3, #26
 800350a:	bf42      	ittt	mi
 800350c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003510:	3302      	addmi	r3, #2
 8003512:	f8c9 3000 	strmi.w	r3, [r9]
 8003516:	6825      	ldr	r5, [r4, #0]
 8003518:	f015 0506 	ands.w	r5, r5, #6
 800351c:	d107      	bne.n	800352e <_printf_common+0x52>
 800351e:	f104 0a19 	add.w	sl, r4, #25
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	f8d9 2000 	ldr.w	r2, [r9]
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	42ab      	cmp	r3, r5
 800352c:	dc29      	bgt.n	8003582 <_printf_common+0xa6>
 800352e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	3300      	adds	r3, #0
 8003536:	bf18      	it	ne
 8003538:	2301      	movne	r3, #1
 800353a:	0692      	lsls	r2, r2, #26
 800353c:	d42e      	bmi.n	800359c <_printf_common+0xc0>
 800353e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003542:	4639      	mov	r1, r7
 8003544:	4630      	mov	r0, r6
 8003546:	47c0      	blx	r8
 8003548:	3001      	adds	r0, #1
 800354a:	d021      	beq.n	8003590 <_printf_common+0xb4>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	68e5      	ldr	r5, [r4, #12]
 8003550:	f003 0306 	and.w	r3, r3, #6
 8003554:	2b04      	cmp	r3, #4
 8003556:	bf18      	it	ne
 8003558:	2500      	movne	r5, #0
 800355a:	f8d9 2000 	ldr.w	r2, [r9]
 800355e:	f04f 0900 	mov.w	r9, #0
 8003562:	bf08      	it	eq
 8003564:	1aad      	subeq	r5, r5, r2
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	bf08      	it	eq
 800356c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003570:	4293      	cmp	r3, r2
 8003572:	bfc4      	itt	gt
 8003574:	1a9b      	subgt	r3, r3, r2
 8003576:	18ed      	addgt	r5, r5, r3
 8003578:	341a      	adds	r4, #26
 800357a:	454d      	cmp	r5, r9
 800357c:	d11a      	bne.n	80035b4 <_printf_common+0xd8>
 800357e:	2000      	movs	r0, #0
 8003580:	e008      	b.n	8003594 <_printf_common+0xb8>
 8003582:	2301      	movs	r3, #1
 8003584:	4652      	mov	r2, sl
 8003586:	4639      	mov	r1, r7
 8003588:	4630      	mov	r0, r6
 800358a:	47c0      	blx	r8
 800358c:	3001      	adds	r0, #1
 800358e:	d103      	bne.n	8003598 <_printf_common+0xbc>
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	3501      	adds	r5, #1
 800359a:	e7c2      	b.n	8003522 <_printf_common+0x46>
 800359c:	2030      	movs	r0, #48	; 0x30
 800359e:	18e1      	adds	r1, r4, r3
 80035a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035aa:	4422      	add	r2, r4
 80035ac:	3302      	adds	r3, #2
 80035ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035b2:	e7c4      	b.n	800353e <_printf_common+0x62>
 80035b4:	2301      	movs	r3, #1
 80035b6:	4622      	mov	r2, r4
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d0e6      	beq.n	8003590 <_printf_common+0xb4>
 80035c2:	f109 0901 	add.w	r9, r9, #1
 80035c6:	e7d8      	b.n	800357a <_printf_common+0x9e>

080035c8 <_printf_i>:
 80035c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035d0:	460c      	mov	r4, r1
 80035d2:	7e09      	ldrb	r1, [r1, #24]
 80035d4:	b085      	sub	sp, #20
 80035d6:	296e      	cmp	r1, #110	; 0x6e
 80035d8:	4617      	mov	r7, r2
 80035da:	4606      	mov	r6, r0
 80035dc:	4698      	mov	r8, r3
 80035de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035e0:	f000 80b3 	beq.w	800374a <_printf_i+0x182>
 80035e4:	d822      	bhi.n	800362c <_printf_i+0x64>
 80035e6:	2963      	cmp	r1, #99	; 0x63
 80035e8:	d036      	beq.n	8003658 <_printf_i+0x90>
 80035ea:	d80a      	bhi.n	8003602 <_printf_i+0x3a>
 80035ec:	2900      	cmp	r1, #0
 80035ee:	f000 80b9 	beq.w	8003764 <_printf_i+0x19c>
 80035f2:	2958      	cmp	r1, #88	; 0x58
 80035f4:	f000 8083 	beq.w	80036fe <_printf_i+0x136>
 80035f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003600:	e032      	b.n	8003668 <_printf_i+0xa0>
 8003602:	2964      	cmp	r1, #100	; 0x64
 8003604:	d001      	beq.n	800360a <_printf_i+0x42>
 8003606:	2969      	cmp	r1, #105	; 0x69
 8003608:	d1f6      	bne.n	80035f8 <_printf_i+0x30>
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	0605      	lsls	r5, r0, #24
 8003610:	f103 0104 	add.w	r1, r3, #4
 8003614:	d52a      	bpl.n	800366c <_printf_i+0xa4>
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	da03      	bge.n	8003626 <_printf_i+0x5e>
 800361e:	222d      	movs	r2, #45	; 0x2d
 8003620:	425b      	negs	r3, r3
 8003622:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003626:	486f      	ldr	r0, [pc, #444]	; (80037e4 <_printf_i+0x21c>)
 8003628:	220a      	movs	r2, #10
 800362a:	e039      	b.n	80036a0 <_printf_i+0xd8>
 800362c:	2973      	cmp	r1, #115	; 0x73
 800362e:	f000 809d 	beq.w	800376c <_printf_i+0x1a4>
 8003632:	d808      	bhi.n	8003646 <_printf_i+0x7e>
 8003634:	296f      	cmp	r1, #111	; 0x6f
 8003636:	d020      	beq.n	800367a <_printf_i+0xb2>
 8003638:	2970      	cmp	r1, #112	; 0x70
 800363a:	d1dd      	bne.n	80035f8 <_printf_i+0x30>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	e003      	b.n	800364e <_printf_i+0x86>
 8003646:	2975      	cmp	r1, #117	; 0x75
 8003648:	d017      	beq.n	800367a <_printf_i+0xb2>
 800364a:	2978      	cmp	r1, #120	; 0x78
 800364c:	d1d4      	bne.n	80035f8 <_printf_i+0x30>
 800364e:	2378      	movs	r3, #120	; 0x78
 8003650:	4865      	ldr	r0, [pc, #404]	; (80037e8 <_printf_i+0x220>)
 8003652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003656:	e055      	b.n	8003704 <_printf_i+0x13c>
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800365e:	1d19      	adds	r1, r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6011      	str	r1, [r2, #0]
 8003664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003668:	2301      	movs	r3, #1
 800366a:	e08c      	b.n	8003786 <_printf_i+0x1be>
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003672:	6011      	str	r1, [r2, #0]
 8003674:	bf18      	it	ne
 8003676:	b21b      	sxthne	r3, r3
 8003678:	e7cf      	b.n	800361a <_printf_i+0x52>
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	1d18      	adds	r0, r3, #4
 8003680:	6010      	str	r0, [r2, #0]
 8003682:	0628      	lsls	r0, r5, #24
 8003684:	d501      	bpl.n	800368a <_printf_i+0xc2>
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	e002      	b.n	8003690 <_printf_i+0xc8>
 800368a:	0668      	lsls	r0, r5, #25
 800368c:	d5fb      	bpl.n	8003686 <_printf_i+0xbe>
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	296f      	cmp	r1, #111	; 0x6f
 8003692:	bf14      	ite	ne
 8003694:	220a      	movne	r2, #10
 8003696:	2208      	moveq	r2, #8
 8003698:	4852      	ldr	r0, [pc, #328]	; (80037e4 <_printf_i+0x21c>)
 800369a:	2100      	movs	r1, #0
 800369c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036a0:	6865      	ldr	r5, [r4, #4]
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	60a5      	str	r5, [r4, #8]
 80036a6:	f2c0 8095 	blt.w	80037d4 <_printf_i+0x20c>
 80036aa:	6821      	ldr	r1, [r4, #0]
 80036ac:	f021 0104 	bic.w	r1, r1, #4
 80036b0:	6021      	str	r1, [r4, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d13d      	bne.n	8003732 <_printf_i+0x16a>
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	f040 808e 	bne.w	80037d8 <_printf_i+0x210>
 80036bc:	4665      	mov	r5, ip
 80036be:	2a08      	cmp	r2, #8
 80036c0:	d10b      	bne.n	80036da <_printf_i+0x112>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	07db      	lsls	r3, r3, #31
 80036c6:	d508      	bpl.n	80036da <_printf_i+0x112>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bfde      	ittt	le
 80036d0:	2330      	movle	r3, #48	; 0x30
 80036d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036da:	ebac 0305 	sub.w	r3, ip, r5
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	f8cd 8000 	str.w	r8, [sp]
 80036e4:	463b      	mov	r3, r7
 80036e6:	aa03      	add	r2, sp, #12
 80036e8:	4621      	mov	r1, r4
 80036ea:	4630      	mov	r0, r6
 80036ec:	f7ff fef6 	bl	80034dc <_printf_common>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d14d      	bne.n	8003790 <_printf_i+0x1c8>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	b005      	add	sp, #20
 80036fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036fe:	4839      	ldr	r0, [pc, #228]	; (80037e4 <_printf_i+0x21c>)
 8003700:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	1d1d      	adds	r5, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6015      	str	r5, [r2, #0]
 800370e:	060a      	lsls	r2, r1, #24
 8003710:	d50b      	bpl.n	800372a <_printf_i+0x162>
 8003712:	07ca      	lsls	r2, r1, #31
 8003714:	bf44      	itt	mi
 8003716:	f041 0120 	orrmi.w	r1, r1, #32
 800371a:	6021      	strmi	r1, [r4, #0]
 800371c:	b91b      	cbnz	r3, 8003726 <_printf_i+0x15e>
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	6022      	str	r2, [r4, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	e7b7      	b.n	800369a <_printf_i+0xd2>
 800372a:	064d      	lsls	r5, r1, #25
 800372c:	bf48      	it	mi
 800372e:	b29b      	uxthmi	r3, r3
 8003730:	e7ef      	b.n	8003712 <_printf_i+0x14a>
 8003732:	4665      	mov	r5, ip
 8003734:	fbb3 f1f2 	udiv	r1, r3, r2
 8003738:	fb02 3311 	mls	r3, r2, r1, r3
 800373c:	5cc3      	ldrb	r3, [r0, r3]
 800373e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003742:	460b      	mov	r3, r1
 8003744:	2900      	cmp	r1, #0
 8003746:	d1f5      	bne.n	8003734 <_printf_i+0x16c>
 8003748:	e7b9      	b.n	80036be <_printf_i+0xf6>
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	6825      	ldr	r5, [r4, #0]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	6961      	ldr	r1, [r4, #20]
 8003752:	6010      	str	r0, [r2, #0]
 8003754:	0628      	lsls	r0, r5, #24
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	d501      	bpl.n	800375e <_printf_i+0x196>
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	e002      	b.n	8003764 <_printf_i+0x19c>
 800375e:	066a      	lsls	r2, r5, #25
 8003760:	d5fb      	bpl.n	800375a <_printf_i+0x192>
 8003762:	8019      	strh	r1, [r3, #0]
 8003764:	2300      	movs	r3, #0
 8003766:	4665      	mov	r5, ip
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	e7b9      	b.n	80036e0 <_printf_i+0x118>
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	1d19      	adds	r1, r3, #4
 8003770:	6011      	str	r1, [r2, #0]
 8003772:	681d      	ldr	r5, [r3, #0]
 8003774:	6862      	ldr	r2, [r4, #4]
 8003776:	2100      	movs	r1, #0
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f837 	bl	80037ec <memchr>
 800377e:	b108      	cbz	r0, 8003784 <_printf_i+0x1bc>
 8003780:	1b40      	subs	r0, r0, r5
 8003782:	6060      	str	r0, [r4, #4]
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	2300      	movs	r3, #0
 800378a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800378e:	e7a7      	b.n	80036e0 <_printf_i+0x118>
 8003790:	6923      	ldr	r3, [r4, #16]
 8003792:	462a      	mov	r2, r5
 8003794:	4639      	mov	r1, r7
 8003796:	4630      	mov	r0, r6
 8003798:	47c0      	blx	r8
 800379a:	3001      	adds	r0, #1
 800379c:	d0aa      	beq.n	80036f4 <_printf_i+0x12c>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	079b      	lsls	r3, r3, #30
 80037a2:	d413      	bmi.n	80037cc <_printf_i+0x204>
 80037a4:	68e0      	ldr	r0, [r4, #12]
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	4298      	cmp	r0, r3
 80037aa:	bfb8      	it	lt
 80037ac:	4618      	movlt	r0, r3
 80037ae:	e7a3      	b.n	80036f8 <_printf_i+0x130>
 80037b0:	2301      	movs	r3, #1
 80037b2:	464a      	mov	r2, r9
 80037b4:	4639      	mov	r1, r7
 80037b6:	4630      	mov	r0, r6
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d09a      	beq.n	80036f4 <_printf_i+0x12c>
 80037be:	3501      	adds	r5, #1
 80037c0:	68e3      	ldr	r3, [r4, #12]
 80037c2:	9a03      	ldr	r2, [sp, #12]
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	42ab      	cmp	r3, r5
 80037c8:	dcf2      	bgt.n	80037b0 <_printf_i+0x1e8>
 80037ca:	e7eb      	b.n	80037a4 <_printf_i+0x1dc>
 80037cc:	2500      	movs	r5, #0
 80037ce:	f104 0919 	add.w	r9, r4, #25
 80037d2:	e7f5      	b.n	80037c0 <_printf_i+0x1f8>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ac      	bne.n	8003732 <_printf_i+0x16a>
 80037d8:	7803      	ldrb	r3, [r0, #0]
 80037da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e2:	e76c      	b.n	80036be <_printf_i+0xf6>
 80037e4:	08003cc5 	.word	0x08003cc5
 80037e8:	08003cd6 	.word	0x08003cd6

080037ec <memchr>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	b2c9      	uxtb	r1, r1
 80037f0:	4402      	add	r2, r0
 80037f2:	4290      	cmp	r0, r2
 80037f4:	4603      	mov	r3, r0
 80037f6:	d101      	bne.n	80037fc <memchr+0x10>
 80037f8:	2300      	movs	r3, #0
 80037fa:	e003      	b.n	8003804 <memchr+0x18>
 80037fc:	781c      	ldrb	r4, [r3, #0]
 80037fe:	3001      	adds	r0, #1
 8003800:	428c      	cmp	r4, r1
 8003802:	d1f6      	bne.n	80037f2 <memchr+0x6>
 8003804:	4618      	mov	r0, r3
 8003806:	bd10      	pop	{r4, pc}

08003808 <memcpy>:
 8003808:	b510      	push	{r4, lr}
 800380a:	1e43      	subs	r3, r0, #1
 800380c:	440a      	add	r2, r1
 800380e:	4291      	cmp	r1, r2
 8003810:	d100      	bne.n	8003814 <memcpy+0xc>
 8003812:	bd10      	pop	{r4, pc}
 8003814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800381c:	e7f7      	b.n	800380e <memcpy+0x6>

0800381e <memmove>:
 800381e:	4288      	cmp	r0, r1
 8003820:	b510      	push	{r4, lr}
 8003822:	eb01 0302 	add.w	r3, r1, r2
 8003826:	d807      	bhi.n	8003838 <memmove+0x1a>
 8003828:	1e42      	subs	r2, r0, #1
 800382a:	4299      	cmp	r1, r3
 800382c:	d00a      	beq.n	8003844 <memmove+0x26>
 800382e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003832:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003836:	e7f8      	b.n	800382a <memmove+0xc>
 8003838:	4283      	cmp	r3, r0
 800383a:	d9f5      	bls.n	8003828 <memmove+0xa>
 800383c:	1881      	adds	r1, r0, r2
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	42d3      	cmn	r3, r2
 8003842:	d100      	bne.n	8003846 <memmove+0x28>
 8003844:	bd10      	pop	{r4, pc}
 8003846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800384a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800384e:	e7f7      	b.n	8003840 <memmove+0x22>

08003850 <_free_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d043      	beq.n	80038e0 <_free_r+0x90>
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f0c      	subs	r4, r1, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	18e4      	addlt	r4, r4, r3
 8003864:	f000 f8d0 	bl	8003a08 <__malloc_lock>
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <_free_r+0x94>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	4610      	mov	r0, r2
 800386e:	b933      	cbnz	r3, 800387e <_free_r+0x2e>
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6014      	str	r4, [r2, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800387a:	f000 b8c6 	b.w	8003a0a <__malloc_unlock>
 800387e:	42a3      	cmp	r3, r4
 8003880:	d90b      	bls.n	800389a <_free_r+0x4a>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	1862      	adds	r2, r4, r1
 8003886:	4293      	cmp	r3, r2
 8003888:	bf01      	itttt	eq
 800388a:	681a      	ldreq	r2, [r3, #0]
 800388c:	685b      	ldreq	r3, [r3, #4]
 800388e:	1852      	addeq	r2, r2, r1
 8003890:	6022      	streq	r2, [r4, #0]
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6004      	str	r4, [r0, #0]
 8003896:	e7ed      	b.n	8003874 <_free_r+0x24>
 8003898:	4613      	mov	r3, r2
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	b10a      	cbz	r2, 80038a2 <_free_r+0x52>
 800389e:	42a2      	cmp	r2, r4
 80038a0:	d9fa      	bls.n	8003898 <_free_r+0x48>
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	1858      	adds	r0, r3, r1
 80038a6:	42a0      	cmp	r0, r4
 80038a8:	d10b      	bne.n	80038c2 <_free_r+0x72>
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	4401      	add	r1, r0
 80038ae:	1858      	adds	r0, r3, r1
 80038b0:	4282      	cmp	r2, r0
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	d1de      	bne.n	8003874 <_free_r+0x24>
 80038b6:	6810      	ldr	r0, [r2, #0]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	4401      	add	r1, r0
 80038bc:	6019      	str	r1, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	e7d8      	b.n	8003874 <_free_r+0x24>
 80038c2:	d902      	bls.n	80038ca <_free_r+0x7a>
 80038c4:	230c      	movs	r3, #12
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	e7d4      	b.n	8003874 <_free_r+0x24>
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	1821      	adds	r1, r4, r0
 80038ce:	428a      	cmp	r2, r1
 80038d0:	bf01      	itttt	eq
 80038d2:	6811      	ldreq	r1, [r2, #0]
 80038d4:	6852      	ldreq	r2, [r2, #4]
 80038d6:	1809      	addeq	r1, r1, r0
 80038d8:	6021      	streq	r1, [r4, #0]
 80038da:	6062      	str	r2, [r4, #4]
 80038dc:	605c      	str	r4, [r3, #4]
 80038de:	e7c9      	b.n	8003874 <_free_r+0x24>
 80038e0:	bd38      	pop	{r3, r4, r5, pc}
 80038e2:	bf00      	nop
 80038e4:	20000094 	.word	0x20000094

080038e8 <_malloc_r>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	1ccd      	adds	r5, r1, #3
 80038ec:	f025 0503 	bic.w	r5, r5, #3
 80038f0:	3508      	adds	r5, #8
 80038f2:	2d0c      	cmp	r5, #12
 80038f4:	bf38      	it	cc
 80038f6:	250c      	movcc	r5, #12
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	4606      	mov	r6, r0
 80038fc:	db01      	blt.n	8003902 <_malloc_r+0x1a>
 80038fe:	42a9      	cmp	r1, r5
 8003900:	d903      	bls.n	800390a <_malloc_r+0x22>
 8003902:	230c      	movs	r3, #12
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	2000      	movs	r0, #0
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	f000 f87d 	bl	8003a08 <__malloc_lock>
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <_malloc_r+0xac>)
 8003910:	6814      	ldr	r4, [r2, #0]
 8003912:	4621      	mov	r1, r4
 8003914:	b991      	cbnz	r1, 800393c <_malloc_r+0x54>
 8003916:	4c20      	ldr	r4, [pc, #128]	; (8003998 <_malloc_r+0xb0>)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	b91b      	cbnz	r3, 8003924 <_malloc_r+0x3c>
 800391c:	4630      	mov	r0, r6
 800391e:	f000 f863 	bl	80039e8 <_sbrk_r>
 8003922:	6020      	str	r0, [r4, #0]
 8003924:	4629      	mov	r1, r5
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f85e 	bl	80039e8 <_sbrk_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d124      	bne.n	800397a <_malloc_r+0x92>
 8003930:	230c      	movs	r3, #12
 8003932:	4630      	mov	r0, r6
 8003934:	6033      	str	r3, [r6, #0]
 8003936:	f000 f868 	bl	8003a0a <__malloc_unlock>
 800393a:	e7e4      	b.n	8003906 <_malloc_r+0x1e>
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	1b5b      	subs	r3, r3, r5
 8003940:	d418      	bmi.n	8003974 <_malloc_r+0x8c>
 8003942:	2b0b      	cmp	r3, #11
 8003944:	d90f      	bls.n	8003966 <_malloc_r+0x7e>
 8003946:	600b      	str	r3, [r1, #0]
 8003948:	18cc      	adds	r4, r1, r3
 800394a:	50cd      	str	r5, [r1, r3]
 800394c:	4630      	mov	r0, r6
 800394e:	f000 f85c 	bl	8003a0a <__malloc_unlock>
 8003952:	f104 000b 	add.w	r0, r4, #11
 8003956:	1d23      	adds	r3, r4, #4
 8003958:	f020 0007 	bic.w	r0, r0, #7
 800395c:	1ac3      	subs	r3, r0, r3
 800395e:	d0d3      	beq.n	8003908 <_malloc_r+0x20>
 8003960:	425a      	negs	r2, r3
 8003962:	50e2      	str	r2, [r4, r3]
 8003964:	e7d0      	b.n	8003908 <_malloc_r+0x20>
 8003966:	684b      	ldr	r3, [r1, #4]
 8003968:	428c      	cmp	r4, r1
 800396a:	bf16      	itet	ne
 800396c:	6063      	strne	r3, [r4, #4]
 800396e:	6013      	streq	r3, [r2, #0]
 8003970:	460c      	movne	r4, r1
 8003972:	e7eb      	b.n	800394c <_malloc_r+0x64>
 8003974:	460c      	mov	r4, r1
 8003976:	6849      	ldr	r1, [r1, #4]
 8003978:	e7cc      	b.n	8003914 <_malloc_r+0x2c>
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d005      	beq.n	8003990 <_malloc_r+0xa8>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f82e 	bl	80039e8 <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d0cf      	beq.n	8003930 <_malloc_r+0x48>
 8003990:	6025      	str	r5, [r4, #0]
 8003992:	e7db      	b.n	800394c <_malloc_r+0x64>
 8003994:	20000094 	.word	0x20000094
 8003998:	20000098 	.word	0x20000098

0800399c <_realloc_r>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	4607      	mov	r7, r0
 80039a0:	4614      	mov	r4, r2
 80039a2:	460e      	mov	r6, r1
 80039a4:	b921      	cbnz	r1, 80039b0 <_realloc_r+0x14>
 80039a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039aa:	4611      	mov	r1, r2
 80039ac:	f7ff bf9c 	b.w	80038e8 <_malloc_r>
 80039b0:	b922      	cbnz	r2, 80039bc <_realloc_r+0x20>
 80039b2:	f7ff ff4d 	bl	8003850 <_free_r>
 80039b6:	4625      	mov	r5, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039bc:	f000 f826 	bl	8003a0c <_malloc_usable_size_r>
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d20f      	bcs.n	80039e4 <_realloc_r+0x48>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4638      	mov	r0, r7
 80039c8:	f7ff ff8e 	bl	80038e8 <_malloc_r>
 80039cc:	4605      	mov	r5, r0
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0f2      	beq.n	80039b8 <_realloc_r+0x1c>
 80039d2:	4631      	mov	r1, r6
 80039d4:	4622      	mov	r2, r4
 80039d6:	f7ff ff17 	bl	8003808 <memcpy>
 80039da:	4631      	mov	r1, r6
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff37 	bl	8003850 <_free_r>
 80039e2:	e7e9      	b.n	80039b8 <_realloc_r+0x1c>
 80039e4:	4635      	mov	r5, r6
 80039e6:	e7e7      	b.n	80039b8 <_realloc_r+0x1c>

080039e8 <_sbrk_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	2300      	movs	r3, #0
 80039ec:	4c05      	ldr	r4, [pc, #20]	; (8003a04 <_sbrk_r+0x1c>)
 80039ee:	4605      	mov	r5, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	f7fd fefe 	bl	80017f4 <_sbrk>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_sbrk_r+0x1a>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_sbrk_r+0x1a>
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	200000d0 	.word	0x200000d0

08003a08 <__malloc_lock>:
 8003a08:	4770      	bx	lr

08003a0a <__malloc_unlock>:
 8003a0a:	4770      	bx	lr

08003a0c <_malloc_usable_size_r>:
 8003a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a10:	1f18      	subs	r0, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfbc      	itt	lt
 8003a16:	580b      	ldrlt	r3, [r1, r0]
 8003a18:	18c0      	addlt	r0, r0, r3
 8003a1a:	4770      	bx	lr

08003a1c <sqrt>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	b08b      	sub	sp, #44	; 0x2c
 8003a22:	4604      	mov	r4, r0
 8003a24:	460d      	mov	r5, r1
 8003a26:	f000 f84d 	bl	8003ac4 <__ieee754_sqrt>
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <sqrt+0xa0>)
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	f993 a000 	ldrsb.w	sl, [r3]
 8003a32:	4689      	mov	r9, r1
 8003a34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003a38:	d02b      	beq.n	8003a92 <sqrt+0x76>
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc ffdb 	bl	80009fc <__aeabi_dcmpun>
 8003a46:	4683      	mov	fp, r0
 8003a48:	bb18      	cbnz	r0, 8003a92 <sqrt+0x76>
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	2700      	movs	r7, #0
 8003a4e:	4632      	mov	r2, r6
 8003a50:	463b      	mov	r3, r7
 8003a52:	4620      	mov	r0, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	f7fc ffa9 	bl	80009ac <__aeabi_dcmplt>
 8003a5a:	b1d0      	cbz	r0, 8003a92 <sqrt+0x76>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <sqrt+0xa4>)
 8003a62:	f8cd b020 	str.w	fp, [sp, #32]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003a6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a70:	f1ba 0f00 	cmp.w	sl, #0
 8003a74:	d112      	bne.n	8003a9c <sqrt+0x80>
 8003a76:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003a7a:	4668      	mov	r0, sp
 8003a7c:	f000 f8ce 	bl	8003c1c <matherr>
 8003a80:	b1b8      	cbz	r0, 8003ab2 <sqrt+0x96>
 8003a82:	9b08      	ldr	r3, [sp, #32]
 8003a84:	b11b      	cbz	r3, 8003a8e <sqrt+0x72>
 8003a86:	f7ff fb85 	bl	8003194 <__errno>
 8003a8a:	9b08      	ldr	r3, [sp, #32]
 8003a8c:	6003      	str	r3, [r0, #0]
 8003a8e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003a92:	4640      	mov	r0, r8
 8003a94:	4649      	mov	r1, r9
 8003a96:	b00b      	add	sp, #44	; 0x2c
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	f7fc fe3a 	bl	800071c <__aeabi_ddiv>
 8003aa8:	f1ba 0f02 	cmp.w	sl, #2
 8003aac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ab0:	d1e3      	bne.n	8003a7a <sqrt+0x5e>
 8003ab2:	f7ff fb6f 	bl	8003194 <__errno>
 8003ab6:	2321      	movs	r3, #33	; 0x21
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	e7e2      	b.n	8003a82 <sqrt+0x66>
 8003abc:	20000070 	.word	0x20000070
 8003ac0:	08003ce7 	.word	0x08003ce7

08003ac4 <__ieee754_sqrt>:
 8003ac4:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <__ieee754_sqrt+0x154>)
 8003ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aca:	438b      	bics	r3, r1
 8003acc:	4606      	mov	r6, r0
 8003ace:	460d      	mov	r5, r1
 8003ad0:	460a      	mov	r2, r1
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	d10f      	bne.n	8003af6 <__ieee754_sqrt+0x32>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	f7fc fcf5 	bl	80004c8 <__aeabi_dmul>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f7fc fb39 	bl	800015c <__adddf3>
 8003aea:	4606      	mov	r6, r0
 8003aec:	460d      	mov	r5, r1
 8003aee:	4630      	mov	r0, r6
 8003af0:	4629      	mov	r1, r5
 8003af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af6:	2900      	cmp	r1, #0
 8003af8:	4607      	mov	r7, r0
 8003afa:	4603      	mov	r3, r0
 8003afc:	dc0e      	bgt.n	8003b1c <__ieee754_sqrt+0x58>
 8003afe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003b02:	ea5c 0707 	orrs.w	r7, ip, r7
 8003b06:	d0f2      	beq.n	8003aee <__ieee754_sqrt+0x2a>
 8003b08:	b141      	cbz	r1, 8003b1c <__ieee754_sqrt+0x58>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	f7fc fb23 	bl	8000158 <__aeabi_dsub>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	f7fc fe01 	bl	800071c <__aeabi_ddiv>
 8003b1a:	e7e6      	b.n	8003aea <__ieee754_sqrt+0x26>
 8003b1c:	1512      	asrs	r2, r2, #20
 8003b1e:	d074      	beq.n	8003c0a <__ieee754_sqrt+0x146>
 8003b20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003b24:	07d5      	lsls	r5, r2, #31
 8003b26:	f04f 0500 	mov.w	r5, #0
 8003b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003b2e:	bf48      	it	mi
 8003b30:	0fd9      	lsrmi	r1, r3, #31
 8003b32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003b36:	bf44      	itt	mi
 8003b38:	005b      	lslmi	r3, r3, #1
 8003b3a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8003b3e:	1051      	asrs	r1, r2, #1
 8003b40:	0fda      	lsrs	r2, r3, #31
 8003b42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003b46:	4628      	mov	r0, r5
 8003b48:	2216      	movs	r2, #22
 8003b4a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	1987      	adds	r7, r0, r6
 8003b52:	42a7      	cmp	r7, r4
 8003b54:	bfde      	ittt	le
 8003b56:	19b8      	addle	r0, r7, r6
 8003b58:	1be4      	suble	r4, r4, r7
 8003b5a:	19ad      	addle	r5, r5, r6
 8003b5c:	0fdf      	lsrs	r7, r3, #31
 8003b5e:	3a01      	subs	r2, #1
 8003b60:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8003b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003b6c:	d1f0      	bne.n	8003b50 <__ieee754_sqrt+0x8c>
 8003b6e:	f04f 0c20 	mov.w	ip, #32
 8003b72:	4696      	mov	lr, r2
 8003b74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003b78:	4284      	cmp	r4, r0
 8003b7a:	eb06 070e 	add.w	r7, r6, lr
 8003b7e:	dc02      	bgt.n	8003b86 <__ieee754_sqrt+0xc2>
 8003b80:	d112      	bne.n	8003ba8 <__ieee754_sqrt+0xe4>
 8003b82:	429f      	cmp	r7, r3
 8003b84:	d810      	bhi.n	8003ba8 <__ieee754_sqrt+0xe4>
 8003b86:	2f00      	cmp	r7, #0
 8003b88:	eb07 0e06 	add.w	lr, r7, r6
 8003b8c:	da42      	bge.n	8003c14 <__ieee754_sqrt+0x150>
 8003b8e:	f1be 0f00 	cmp.w	lr, #0
 8003b92:	db3f      	blt.n	8003c14 <__ieee754_sqrt+0x150>
 8003b94:	f100 0801 	add.w	r8, r0, #1
 8003b98:	1a24      	subs	r4, r4, r0
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	429f      	cmp	r7, r3
 8003b9e:	bf88      	it	hi
 8003ba0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8003ba4:	1bdb      	subs	r3, r3, r7
 8003ba6:	4432      	add	r2, r6
 8003ba8:	0064      	lsls	r4, r4, #1
 8003baa:	f1bc 0c01 	subs.w	ip, ip, #1
 8003bae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8003bb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003bba:	d1dd      	bne.n	8003b78 <__ieee754_sqrt+0xb4>
 8003bbc:	4323      	orrs	r3, r4
 8003bbe:	d006      	beq.n	8003bce <__ieee754_sqrt+0x10a>
 8003bc0:	1c54      	adds	r4, r2, #1
 8003bc2:	bf0b      	itete	eq
 8003bc4:	4662      	moveq	r2, ip
 8003bc6:	3201      	addne	r2, #1
 8003bc8:	3501      	addeq	r5, #1
 8003bca:	f022 0201 	bicne.w	r2, r2, #1
 8003bce:	106b      	asrs	r3, r5, #1
 8003bd0:	0852      	lsrs	r2, r2, #1
 8003bd2:	07e8      	lsls	r0, r5, #31
 8003bd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003bd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003bdc:	bf48      	it	mi
 8003bde:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003be2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8003be6:	4616      	mov	r6, r2
 8003be8:	e781      	b.n	8003aee <__ieee754_sqrt+0x2a>
 8003bea:	0adc      	lsrs	r4, r3, #11
 8003bec:	3915      	subs	r1, #21
 8003bee:	055b      	lsls	r3, r3, #21
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	d0fa      	beq.n	8003bea <__ieee754_sqrt+0x126>
 8003bf4:	02e6      	lsls	r6, r4, #11
 8003bf6:	d50a      	bpl.n	8003c0e <__ieee754_sqrt+0x14a>
 8003bf8:	f1c2 0020 	rsb	r0, r2, #32
 8003bfc:	fa23 f000 	lsr.w	r0, r3, r0
 8003c00:	1e55      	subs	r5, r2, #1
 8003c02:	4093      	lsls	r3, r2
 8003c04:	4304      	orrs	r4, r0
 8003c06:	1b4a      	subs	r2, r1, r5
 8003c08:	e78a      	b.n	8003b20 <__ieee754_sqrt+0x5c>
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	e7f0      	b.n	8003bf0 <__ieee754_sqrt+0x12c>
 8003c0e:	0064      	lsls	r4, r4, #1
 8003c10:	3201      	adds	r2, #1
 8003c12:	e7ef      	b.n	8003bf4 <__ieee754_sqrt+0x130>
 8003c14:	4680      	mov	r8, r0
 8003c16:	e7bf      	b.n	8003b98 <__ieee754_sqrt+0xd4>
 8003c18:	7ff00000 	.word	0x7ff00000

08003c1c <matherr>:
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	4770      	bx	lr

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
