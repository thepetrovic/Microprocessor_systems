
Binarni_brojac_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002b88  08002b88  00012b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000094  08002c8c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002c8c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000360e  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e27  00000000  00000000  000236cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d8  00000000  00000000  000244f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000350  00000000  00000000  000248d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015dc3  00000000  00000000  00024c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003e8d  00000000  00000000  0003a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cd3d  00000000  00000000  0003e870  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001164  00000000  00000000  000bb628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b70 	.word	0x08002b70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08002b70 	.word	0x08002b70

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f929 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f000 ff8c 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f933 	bl	8000d2e <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f909 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000028 	.word	0x20000028
 8000afc:	20000004 	.word	0x20000004
 8000b00:	20000000 	.word	0x20000000

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000004 	.word	0x20000004
 8000b24:	200000b0 	.word	0x200000b0

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200000b0 	.word	0x200000b0

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000004 	.word	0x20000004

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff49 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b08b      	sub	sp, #44	; 0x2c
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e121      	b.n	8000fa0 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 8110 	bne.w	8000f9a <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d034      	beq.n	8000dec <HAL_GPIO_Init+0xa4>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d80d      	bhi.n	8000da2 <HAL_GPIO_Init+0x5a>
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d02b      	beq.n	8000de2 <HAL_GPIO_Init+0x9a>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d804      	bhi.n	8000d98 <HAL_GPIO_Init+0x50>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d031      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d01c      	beq.n	8000dd0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d96:	e048      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d043      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
 8000d9c:	2b11      	cmp	r3, #17
 8000d9e:	d01b      	beq.n	8000dd8 <HAL_GPIO_Init+0x90>
          break;
 8000da0:	e043      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000da2:	4a86      	ldr	r2, [pc, #536]	; (8000fbc <HAL_GPIO_Init+0x274>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d026      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000da8:	4a84      	ldr	r2, [pc, #528]	; (8000fbc <HAL_GPIO_Init+0x274>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d806      	bhi.n	8000dbc <HAL_GPIO_Init+0x74>
 8000dae:	4a84      	ldr	r2, [pc, #528]	; (8000fc0 <HAL_GPIO_Init+0x278>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d020      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000db4:	4a83      	ldr	r2, [pc, #524]	; (8000fc4 <HAL_GPIO_Init+0x27c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01d      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
          break;
 8000dba:	e036      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dbc:	4a82      	ldr	r2, [pc, #520]	; (8000fc8 <HAL_GPIO_Init+0x280>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dc2:	4a82      	ldr	r2, [pc, #520]	; (8000fcc <HAL_GPIO_Init+0x284>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d016      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
 8000dc8:	4a81      	ldr	r2, [pc, #516]	; (8000fd0 <HAL_GPIO_Init+0x288>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0xae>
          break;
 8000dce:	e02c      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e028      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	e023      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e01e      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	330c      	adds	r3, #12
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e019      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e012      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	611a      	str	r2, [r3, #16]
          break;
 8000e16:	e008      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	615a      	str	r2, [r3, #20]
          break;
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2bff      	cmp	r3, #255	; 0xff
 8000e2e:	d801      	bhi.n	8000e34 <HAL_GPIO_Init+0xec>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	e001      	b.n	8000e38 <HAL_GPIO_Init+0xf0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d802      	bhi.n	8000e46 <HAL_GPIO_Init+0xfe>
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x104>
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	210f      	movs	r1, #15
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	6a39      	ldr	r1, [r7, #32]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 8090 	beq.w	8000f9a <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x28c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_GPIO_Init+0x28c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_GPIO_Init+0x28c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e92:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x290>)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x294>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x192>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_GPIO_Init+0x298>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x18e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_GPIO_Init+0x29c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x18a>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x194>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x194>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x194>
 8000eda:	2300      	movs	r3, #0
 8000edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eec:	493a      	ldr	r1, [pc, #232]	; (8000fd8 <HAL_GPIO_Init+0x290>)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4932      	ldr	r1, [pc, #200]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	492d      	ldr	r1, [pc, #180]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4928      	ldr	r1, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4923      	ldr	r1, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	608b      	str	r3, [r1, #8]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	491e      	ldr	r1, [pc, #120]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	4919      	ldr	r1, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4914      	ldr	r1, [pc, #80]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f aed6 	bne.w	8000d5c <HAL_GPIO_Init+0x14>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	372c      	adds	r7, #44	; 0x2c
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	10210000 	.word	0x10210000
 8000fc0:	10110000 	.word	0x10110000
 8000fc4:	10120000 	.word	0x10120000
 8000fc8:	10310000 	.word	0x10310000
 8000fcc:	10320000 	.word	0x10320000
 8000fd0:	10220000 	.word	0x10220000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	611a      	str	r2, [r3, #16]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e26c      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8087 	beq.w	800114a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800103c:	4b92      	ldr	r3, [pc, #584]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00c      	beq.n	8001062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d112      	bne.n	800107a <HAL_RCC_OscConfig+0x5e>
 8001054:	4b8c      	ldr	r3, [pc, #560]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d10b      	bne.n	800107a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001062:	4b89      	ldr	r3, [pc, #548]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d06c      	beq.n	8001148 <HAL_RCC_OscConfig+0x12c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d168      	bne.n	8001148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e246      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x76>
 8001084:	4b80      	ldr	r3, [pc, #512]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a7f      	ldr	r2, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e02e      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x98>
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7a      	ldr	r2, [pc, #488]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a77      	ldr	r2, [pc, #476]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e01d      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0xbc>
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a71      	ldr	r2, [pc, #452]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0xd4>
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a6a      	ldr	r2, [pc, #424]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a67      	ldr	r2, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fd16 	bl	8000b28 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fd12 	bl	8000b28 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1fa      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0xe4>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fd02 	bl	8000b28 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcfe 	bl	8000b28 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1e6      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x10c>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d063      	beq.n	800121e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b08      	cmp	r3, #8
 800116c:	d11c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x18c>
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x176>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e1ba      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4939      	ldr	r1, [pc, #228]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	e03a      	b.n	800121e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fcb7 	bl	8000b28 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011be:	f7ff fcb3 	bl	8000b28 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e19b      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4927      	ldr	r1, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_RCC_OscConfig+0x270>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc96 	bl	8000b28 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fc92 	bl	8000b28 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e17a      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03a      	beq.n	80012a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d019      	beq.n	8001266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_RCC_OscConfig+0x274>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fc76 	bl	8000b28 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fc72 	bl	8000b28 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e15a      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 faa8 	bl	80017b4 <RCC_Delay>
 8001264:	e01c      	b.n	80012a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_RCC_OscConfig+0x274>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fc5c 	bl	8000b28 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001272:	e00f      	b.n	8001294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fc58 	bl	8000b28 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d908      	bls.n	8001294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e140      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	42420000 	.word	0x42420000
 8001290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b9e      	ldr	r3, [pc, #632]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e9      	bne.n	8001274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a6 	beq.w	80013fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b97      	ldr	r3, [pc, #604]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b94      	ldr	r3, [pc, #592]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a93      	ldr	r2, [pc, #588]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b91      	ldr	r3, [pc, #580]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b8e      	ldr	r3, [pc, #568]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a8a      	ldr	r2, [pc, #552]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fc19 	bl	8000b28 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7ff fc15 	bl	8000b28 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0fd      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_RCC_OscConfig+0x4f8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x312>
 8001320:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	e02d      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x334>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	e01c      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x356>
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	e00b      	b.n	800138a <HAL_RCC_OscConfig+0x36e>
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a66      	ldr	r2, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbc9 	bl	8000b28 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fbc5 	bl	8000b28 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0ab      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ee      	beq.n	800139a <HAL_RCC_OscConfig+0x37e>
 80013bc:	e014      	b.n	80013e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fbb3 	bl	8000b28 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fbaf 	bl	8000b28 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e095      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ee      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d105      	bne.n	80013fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ee:	4b48      	ldr	r3, [pc, #288]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8081 	beq.w	8001506 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001404:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d061      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d146      	bne.n	80014a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fb83 	bl	8000b28 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fb7f 	bl	8000b28 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e067      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d108      	bne.n	8001460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	492d      	ldr	r1, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a19      	ldr	r1, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	430b      	orrs	r3, r1
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb53 	bl	8000b28 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb4f 	bl	8000b28 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e037      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x46a>
 80014a4:	e02f      	b.n	8001506 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCC_OscConfig+0x4fc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb3c 	bl	8000b28 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb38 	bl	8000b28 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e020      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x498>
 80014d2:	e018      	b.n	8001506 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40007000 	.word	0x40007000
 8001518:	42420060 	.word	0x42420060

0800151c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d910      	bls.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	4965      	ldr	r1, [pc, #404]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800159a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d040      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e073      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06b      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4936      	ldr	r1, [pc, #216]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fa8c 	bl	8000b28 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fa88 	bl	8000b28 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e053      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d210      	bcs.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f821 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016ae:	4601      	mov	r1, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	fa21 f303 	lsr.w	r3, r1, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1cc>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f9ea 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08002b9c 	.word	0x08002b9c
 80016e8:	20000028 	.word	0x20000028
 80016ec:	20000000 	.word	0x20000000

080016f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b490      	push	{r4, r7}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f8:	1d3c      	adds	r4, r7, #4
 80016fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x40>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d003      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x46>
 800172e:	e02d      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001732:	623b      	str	r3, [r7, #32]
      break;
 8001734:	e02d      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001742:	4413      	add	r3, r2
 8001744:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001748:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0c5b      	lsrs	r3, r3, #17
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001762:	4413      	add	r3, r2
 8001764:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001768:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800176e:	fb02 f203 	mul.w	r2, r2, r3
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	e004      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	623b      	str	r3, [r7, #32]
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800178e:	623b      	str	r3, [r7, #32]
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	6a3b      	ldr	r3, [r7, #32]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bc90      	pop	{r4, r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	08002b88 	.word	0x08002b88
 80017a4:	08002b98 	.word	0x08002b98
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	003d0900 	.word	0x003d0900

080017b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <RCC_Delay+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <RCC_Delay+0x38>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0a5b      	lsrs	r3, r3, #9
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d0:	bf00      	nop
  }
  while (Delay --);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <RCC_Delay+0x1c>
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000028 	.word	0x20000028
 80017ec:	10624dd3 	.word	0x10624dd3

080017f0 <Display>:
  * @brief  The application entry point.
  * @retval int
  */

void Display(int A,int N)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	int j,m,i;
	m = N-1;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
	for(i=0;i<N;i++)
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e034      	b.n	8001870 <Display+0x80>
	{
		j=pow(2.0,m);
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7fe fdf4 	bl	80003f4 <__aeabi_i2d>
 800180c:	4603      	mov	r3, r0
 800180e:	460c      	mov	r4, r1
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800181c:	f000 f980 	bl	8001b20 <pow>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f7ff f8fe 	bl	8000a28 <__aeabi_d2iz>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
		if((A & j)!=0)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <Display+0x60>
		{
			HAL_GPIO_WritePin(GPIOA,LEDS[i],GPIO_PIN_SET);
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <Display+0x90>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	b29b      	uxth	r3, r3
 8001844:	2201      	movs	r2, #1
 8001846:	4619      	mov	r1, r3
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <Display+0x94>)
 800184a:	f7ff fbcf 	bl	8000fec <HAL_GPIO_WritePin>
 800184e:	e009      	b.n	8001864 <Display+0x74>
		}
		else
			HAL_GPIO_WritePin(GPIOA,LEDS[i],GPIO_PIN_SET);
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <Display+0x90>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	b29b      	uxth	r3, r3
 800185a:	2201      	movs	r2, #1
 800185c:	4619      	mov	r1, r3
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <Display+0x94>)
 8001860:	f7ff fbc4 	bl	8000fec <HAL_GPIO_WritePin>
		m--;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3b01      	subs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
	for(i=0;i<N;i++)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	3301      	adds	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbc6      	blt.n	8001806 <Display+0x16>
	}

}
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	20000008 	.word	0x20000008
 8001884:	40010800 	.word	0x40010800

08001888 <main>:

int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int Count=0;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001892:	f7ff f8f1 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001896:	f000 f814 	bl	80018c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189a:	f000 f853 	bl	8001944 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display(Count,8);
 800189e:	2108      	movs	r1, #8
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffa5 	bl	80017f0 <Display>
	  if(Count==255)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2bff      	cmp	r3, #255	; 0xff
 80018aa:	d102      	bne.n	80018b2 <main+0x2a>
		  Count=0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	e002      	b.n	80018b8 <main+0x30>
	  else
		  Count++;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f7ff f93e 	bl	8000b3c <HAL_Delay>
	  Display(Count,8);
 80018c0:	e7ed      	b.n	800189e <main+0x16>

080018c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b090      	sub	sp, #64	; 0x40
 80018c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c8:	f107 0318 	add.w	r3, r7, #24
 80018cc:	2228      	movs	r2, #40	; 0x28
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f91d 	bl	8001b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ec:	2310      	movs	r3, #16
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f0:	2302      	movs	r3, #2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb8a 	bl	800101c <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800190e:	f000 f84b 	bl	80019a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fdf5 	bl	800151c <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001938:	f000 f836 	bl	80019a8 <Error_Handler>
  }
}
 800193c:	bf00      	nop
 800193e:	3740      	adds	r7, #64	; 0x40
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_GPIO_Init+0x5c>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <MX_GPIO_Init+0x5c>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_GPIO_Init+0x5c>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001970:	2200      	movs	r2, #0
 8001972:	21ff      	movs	r1, #255	; 0xff
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <MX_GPIO_Init+0x60>)
 8001976:	f7ff fb39 	bl	8000fec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800197a:	23ff      	movs	r3, #255	; 0xff
 800197c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_GPIO_Init+0x60>)
 8001992:	f7ff f9d9 	bl	8000d48 <HAL_GPIO_Init>

}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010800 	.word	0x40010800

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ae:	e7fe      	b.n	80019ae <Error_Handler+0x6>

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_MspInit+0x5c>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_MspInit+0x5c>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_MspInit+0x5c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_MspInit+0x5c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_MspInit+0x60>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_MspInit+0x60>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f7ff f853 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
	...

08001a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	; (8001ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a96:	f7ff ffe4 	bl	8001a62 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f000 f815 	bl	8001ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9e:	f7ff fef3 	bl	8001888 <main>
  bx lr
 8001aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001aac:	08002bf8 	.word	0x08002bf8
  ldr r2, =_sbss
 8001ab0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ab4:	200000b4 	.word	0x200000b4

08001ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_2_IRQHandler>
	...

08001abc <__errno>:
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <__errno+0x8>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000002c 	.word	0x2000002c

08001ac8 <__libc_init_array>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	2500      	movs	r5, #0
 8001acc:	4e0c      	ldr	r6, [pc, #48]	; (8001b00 <__libc_init_array+0x38>)
 8001ace:	4c0d      	ldr	r4, [pc, #52]	; (8001b04 <__libc_init_array+0x3c>)
 8001ad0:	1ba4      	subs	r4, r4, r6
 8001ad2:	10a4      	asrs	r4, r4, #2
 8001ad4:	42a5      	cmp	r5, r4
 8001ad6:	d109      	bne.n	8001aec <__libc_init_array+0x24>
 8001ad8:	f001 f84a 	bl	8002b70 <_init>
 8001adc:	2500      	movs	r5, #0
 8001ade:	4e0a      	ldr	r6, [pc, #40]	; (8001b08 <__libc_init_array+0x40>)
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	; (8001b0c <__libc_init_array+0x44>)
 8001ae2:	1ba4      	subs	r4, r4, r6
 8001ae4:	10a4      	asrs	r4, r4, #2
 8001ae6:	42a5      	cmp	r5, r4
 8001ae8:	d105      	bne.n	8001af6 <__libc_init_array+0x2e>
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
 8001aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001af0:	4798      	blx	r3
 8001af2:	3501      	adds	r5, #1
 8001af4:	e7ee      	b.n	8001ad4 <__libc_init_array+0xc>
 8001af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001afa:	4798      	blx	r3
 8001afc:	3501      	adds	r5, #1
 8001afe:	e7f2      	b.n	8001ae6 <__libc_init_array+0x1e>
 8001b00:	08002bf0 	.word	0x08002bf0
 8001b04:	08002bf0 	.word	0x08002bf0
 8001b08:	08002bf0 	.word	0x08002bf0
 8001b0c:	08002bf4 	.word	0x08002bf4

08001b10 <memset>:
 8001b10:	4603      	mov	r3, r0
 8001b12:	4402      	add	r2, r0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <memset+0xa>
 8001b18:	4770      	bx	lr
 8001b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b1e:	e7f9      	b.n	8001b14 <memset+0x4>

08001b20 <pow>:
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b08f      	sub	sp, #60	; 0x3c
 8001b26:	461d      	mov	r5, r3
 8001b28:	4680      	mov	r8, r0
 8001b2a:	4689      	mov	r9, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	f000 f953 	bl	8001dd8 <__ieee754_pow>
 8001b32:	4fa1      	ldr	r7, [pc, #644]	; (8001db8 <pow+0x298>)
 8001b34:	e9cd 0100 	strd	r0, r1, [sp]
 8001b38:	f997 3000 	ldrsb.w	r3, [r7]
 8001b3c:	463e      	mov	r6, r7
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	3301      	adds	r3, #1
 8001b42:	d05f      	beq.n	8001c04 <pow+0xe4>
 8001b44:	4622      	mov	r2, r4
 8001b46:	462b      	mov	r3, r5
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe ff56 	bl	80009fc <__aeabi_dcmpun>
 8001b50:	4682      	mov	sl, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d156      	bne.n	8001c04 <pow+0xe4>
 8001b56:	4642      	mov	r2, r8
 8001b58:	464b      	mov	r3, r9
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe ff4d 	bl	80009fc <__aeabi_dcmpun>
 8001b62:	9003      	str	r0, [sp, #12]
 8001b64:	b1e8      	cbz	r0, 8001ba2 <pow+0x82>
 8001b66:	2200      	movs	r2, #0
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe ff13 	bl	8000998 <__aeabi_dcmpeq>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d046      	beq.n	8001c04 <pow+0xe4>
 8001b76:	2301      	movs	r3, #1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	9304      	str	r3, [sp, #16]
 8001b7c:	4b8f      	ldr	r3, [pc, #572]	; (8001dbc <pow+0x29c>)
 8001b7e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8001b82:	9305      	str	r3, [sp, #20]
 8001b84:	4b8e      	ldr	r3, [pc, #568]	; (8001dc0 <pow+0x2a0>)
 8001b86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001b8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001b8e:	9b02      	ldr	r3, [sp, #8]
 8001b90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d031      	beq.n	8001bfc <pow+0xdc>
 8001b98:	a804      	add	r0, sp, #16
 8001b9a:	f000 fedd 	bl	8002958 <matherr>
 8001b9e:	bb38      	cbnz	r0, 8001bf0 <pow+0xd0>
 8001ba0:	e058      	b.n	8001c54 <pow+0x134>
 8001ba2:	f04f 0a00 	mov.w	sl, #0
 8001ba6:	f04f 0b00 	mov.w	fp, #0
 8001baa:	4652      	mov	r2, sl
 8001bac:	465b      	mov	r3, fp
 8001bae:	4640      	mov	r0, r8
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	f7fe fef1 	bl	8000998 <__aeabi_dcmpeq>
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d051      	beq.n	8001c5e <pow+0x13e>
 8001bba:	4652      	mov	r2, sl
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f7fe fee9 	bl	8000998 <__aeabi_dcmpeq>
 8001bc6:	4606      	mov	r6, r0
 8001bc8:	b308      	cbz	r0, 8001c0e <pow+0xee>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9304      	str	r3, [sp, #16]
 8001bce:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <pow+0x29c>)
 8001bd0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001bd4:	9305      	str	r3, [sp, #20]
 8001bd6:	9b03      	ldr	r3, [sp, #12]
 8001bd8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8001bde:	9b02      	ldr	r3, [sp, #8]
 8001be0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0d7      	beq.n	8001b98 <pow+0x78>
 8001be8:	2200      	movs	r2, #0
 8001bea:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <pow+0x2a0>)
 8001bec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bf2:	b11b      	cbz	r3, 8001bfc <pow+0xdc>
 8001bf4:	f7ff ff62 	bl	8001abc <__errno>
 8001bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bfa:	6003      	str	r3, [r0, #0]
 8001bfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8001c00:	e9cd 3400 	strd	r3, r4, [sp]
 8001c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001c08:	b00f      	add	sp, #60	; 0x3c
 8001c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f000 fe9b 	bl	800294c <finite>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d0f4      	beq.n	8001c04 <pow+0xe4>
 8001c1a:	4652      	mov	r2, sl
 8001c1c:	465b      	mov	r3, fp
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fec3 	bl	80009ac <__aeabi_dcmplt>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0ec      	beq.n	8001c04 <pow+0xe4>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9304      	str	r3, [sp, #16]
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <pow+0x29c>)
 8001c30:	960c      	str	r6, [sp, #48]	; 0x30
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	f997 3000 	ldrsb.w	r3, [r7]
 8001c38:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001c3c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001c40:	b913      	cbnz	r3, 8001c48 <pow+0x128>
 8001c42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001c46:	e7a7      	b.n	8001b98 <pow+0x78>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	495e      	ldr	r1, [pc, #376]	; (8001dc4 <pow+0x2a4>)
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001c52:	d1a1      	bne.n	8001b98 <pow+0x78>
 8001c54:	f7ff ff32 	bl	8001abc <__errno>
 8001c58:	2321      	movs	r3, #33	; 0x21
 8001c5a:	6003      	str	r3, [r0, #0]
 8001c5c:	e7c8      	b.n	8001bf0 <pow+0xd0>
 8001c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001c62:	f000 fe73 	bl	800294c <finite>
 8001c66:	9002      	str	r0, [sp, #8]
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d177      	bne.n	8001d5c <pow+0x23c>
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	4649      	mov	r1, r9
 8001c70:	f000 fe6c 	bl	800294c <finite>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d071      	beq.n	8001d5c <pow+0x23c>
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f000 fe66 	bl	800294c <finite>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d06b      	beq.n	8001d5c <pow+0x23c>
 8001c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f7fe feb6 	bl	80009fc <__aeabi_dcmpun>
 8001c90:	f997 7000 	ldrsb.w	r7, [r7]
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <pow+0x29c>)
 8001c96:	b1a0      	cbz	r0, 8001cc2 <pow+0x1a2>
 8001c98:	2201      	movs	r2, #1
 8001c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8001ca6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001caa:	2f00      	cmp	r7, #0
 8001cac:	d0c9      	beq.n	8001c42 <pow+0x122>
 8001cae:	4652      	mov	r2, sl
 8001cb0:	465b      	mov	r3, fp
 8001cb2:	4650      	mov	r0, sl
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	f7fe fd31 	bl	800071c <__aeabi_ddiv>
 8001cba:	2f02      	cmp	r7, #2
 8001cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001cc0:	e7c7      	b.n	8001c52 <pow+0x132>
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	900c      	str	r0, [sp, #48]	; 0x30
 8001cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <pow+0x2a8>)
 8001cd2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001cd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001cda:	f7fe fbf5 	bl	80004c8 <__aeabi_dmul>
 8001cde:	4604      	mov	r4, r0
 8001ce0:	460d      	mov	r5, r1
 8001ce2:	bb17      	cbnz	r7, 8001d2a <pow+0x20a>
 8001ce4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <pow+0x2ac>)
 8001cea:	4640      	mov	r0, r8
 8001cec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	465b      	mov	r3, fp
 8001cf6:	f7fe fe59 	bl	80009ac <__aeabi_dcmplt>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d054      	beq.n	8001da8 <pow+0x288>
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f000 fe31 	bl	8002968 <rint>
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	f7fe fe45 	bl	8000998 <__aeabi_dcmpeq>
 8001d0e:	b920      	cbnz	r0, 8001d1a <pow+0x1fa>
 8001d10:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <pow+0x2b0>)
 8001d16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d1a:	f996 3000 	ldrsb.w	r3, [r6]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d142      	bne.n	8001da8 <pow+0x288>
 8001d22:	f7ff fecb 	bl	8001abc <__errno>
 8001d26:	2322      	movs	r3, #34	; 0x22
 8001d28:	e797      	b.n	8001c5a <pow+0x13a>
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <pow+0x2b4>)
 8001d2e:	4640      	mov	r0, r8
 8001d30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d34:	4649      	mov	r1, r9
 8001d36:	4652      	mov	r2, sl
 8001d38:	465b      	mov	r3, fp
 8001d3a:	f7fe fe37 	bl	80009ac <__aeabi_dcmplt>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d0eb      	beq.n	8001d1a <pow+0x1fa>
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f000 fe0f 	bl	8002968 <rint>
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	f7fe fe23 	bl	8000998 <__aeabi_dcmpeq>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d1e1      	bne.n	8001d1a <pow+0x1fa>
 8001d56:	2200      	movs	r2, #0
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <pow+0x2a4>)
 8001d5a:	e7dc      	b.n	8001d16 <pow+0x1f6>
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001d62:	2300      	movs	r3, #0
 8001d64:	f7fe fe18 	bl	8000998 <__aeabi_dcmpeq>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	f43f af4b 	beq.w	8001c04 <pow+0xe4>
 8001d6e:	4640      	mov	r0, r8
 8001d70:	4649      	mov	r1, r9
 8001d72:	f000 fdeb 	bl	800294c <finite>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	f43f af44 	beq.w	8001c04 <pow+0xe4>
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f000 fde4 	bl	800294c <finite>
 8001d84:	2800      	cmp	r0, #0
 8001d86:	f43f af3d 	beq.w	8001c04 <pow+0xe4>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <pow+0x29c>)
 8001d90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001d94:	9305      	str	r3, [sp, #20]
 8001d96:	2300      	movs	r3, #0
 8001d98:	2400      	movs	r4, #0
 8001d9a:	930c      	str	r3, [sp, #48]	; 0x30
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001da2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8001da6:	e7b8      	b.n	8001d1a <pow+0x1fa>
 8001da8:	a804      	add	r0, sp, #16
 8001daa:	f000 fdd5 	bl	8002958 <matherr>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	f47f af1e 	bne.w	8001bf0 <pow+0xd0>
 8001db4:	e7b5      	b.n	8001d22 <pow+0x202>
 8001db6:	bf00      	nop
 8001db8:	20000090 	.word	0x20000090
 8001dbc:	08002bac 	.word	0x08002bac
 8001dc0:	3ff00000 	.word	0x3ff00000
 8001dc4:	fff00000 	.word	0xfff00000
 8001dc8:	3fe00000 	.word	0x3fe00000
 8001dcc:	47efffff 	.word	0x47efffff
 8001dd0:	c7efffff 	.word	0xc7efffff
 8001dd4:	7ff00000 	.word	0x7ff00000

08001dd8 <__ieee754_pow>:
 8001dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ddc:	b091      	sub	sp, #68	; 0x44
 8001dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001de2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8001de6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8001dea:	ea55 0302 	orrs.w	r3, r5, r2
 8001dee:	4607      	mov	r7, r0
 8001df0:	4688      	mov	r8, r1
 8001df2:	f000 84b7 	beq.w	8002764 <__ieee754_pow+0x98c>
 8001df6:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <__ieee754_pow+0x220>)
 8001df8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	4689      	mov	r9, r1
 8001e00:	4682      	mov	sl, r0
 8001e02:	dc09      	bgt.n	8001e18 <__ieee754_pow+0x40>
 8001e04:	d103      	bne.n	8001e0e <__ieee754_pow+0x36>
 8001e06:	b938      	cbnz	r0, 8001e18 <__ieee754_pow+0x40>
 8001e08:	42a5      	cmp	r5, r4
 8001e0a:	dc0d      	bgt.n	8001e28 <__ieee754_pow+0x50>
 8001e0c:	e001      	b.n	8001e12 <__ieee754_pow+0x3a>
 8001e0e:	429d      	cmp	r5, r3
 8001e10:	dc02      	bgt.n	8001e18 <__ieee754_pow+0x40>
 8001e12:	429d      	cmp	r5, r3
 8001e14:	d10e      	bne.n	8001e34 <__ieee754_pow+0x5c>
 8001e16:	b16a      	cbz	r2, 8001e34 <__ieee754_pow+0x5c>
 8001e18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8001e1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8001e20:	ea54 030a 	orrs.w	r3, r4, sl
 8001e24:	f000 849e 	beq.w	8002764 <__ieee754_pow+0x98c>
 8001e28:	4874      	ldr	r0, [pc, #464]	; (8001ffc <__ieee754_pow+0x224>)
 8001e2a:	b011      	add	sp, #68	; 0x44
 8001e2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e30:	f000 bd94 	b.w	800295c <nan>
 8001e34:	f1b9 0f00 	cmp.w	r9, #0
 8001e38:	da53      	bge.n	8001ee2 <__ieee754_pow+0x10a>
 8001e3a:	4b71      	ldr	r3, [pc, #452]	; (8002000 <__ieee754_pow+0x228>)
 8001e3c:	429d      	cmp	r5, r3
 8001e3e:	dc4e      	bgt.n	8001ede <__ieee754_pow+0x106>
 8001e40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8001e44:	429d      	cmp	r5, r3
 8001e46:	dd4c      	ble.n	8001ee2 <__ieee754_pow+0x10a>
 8001e48:	152b      	asrs	r3, r5, #20
 8001e4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001e4e:	2b14      	cmp	r3, #20
 8001e50:	dd28      	ble.n	8001ea4 <__ieee754_pow+0xcc>
 8001e52:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8001e56:	fa22 f103 	lsr.w	r1, r2, r3
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d13f      	bne.n	8001ee2 <__ieee754_pow+0x10a>
 8001e62:	f001 0101 	and.w	r1, r1, #1
 8001e66:	f1c1 0302 	rsb	r3, r1, #2
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d15c      	bne.n	8001f2a <__ieee754_pow+0x152>
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <__ieee754_pow+0x220>)
 8001e72:	429d      	cmp	r5, r3
 8001e74:	d126      	bne.n	8001ec4 <__ieee754_pow+0xec>
 8001e76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8001e7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001e7e:	ea53 030a 	orrs.w	r3, r3, sl
 8001e82:	f000 846f 	beq.w	8002764 <__ieee754_pow+0x98c>
 8001e86:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <__ieee754_pow+0x22c>)
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	dd2c      	ble.n	8001ee6 <__ieee754_pow+0x10e>
 8001e8c:	2e00      	cmp	r6, #0
 8001e8e:	f280 846f 	bge.w	8002770 <__ieee754_pow+0x998>
 8001e92:	f04f 0b00 	mov.w	fp, #0
 8001e96:	f04f 0c00 	mov.w	ip, #0
 8001e9a:	4658      	mov	r0, fp
 8001e9c:	4661      	mov	r1, ip
 8001e9e:	b011      	add	sp, #68	; 0x44
 8001ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d13e      	bne.n	8001f26 <__ieee754_pow+0x14e>
 8001ea8:	f1c3 0314 	rsb	r3, r3, #20
 8001eac:	fa45 f103 	asr.w	r1, r5, r3
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	42ab      	cmp	r3, r5
 8001eb6:	f040 8463 	bne.w	8002780 <__ieee754_pow+0x9a8>
 8001eba:	f001 0101 	and.w	r1, r1, #1
 8001ebe:	f1c1 0302 	rsb	r3, r1, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <__ieee754_pow+0x230>)
 8001ec6:	429d      	cmp	r5, r3
 8001ec8:	d114      	bne.n	8001ef4 <__ieee754_pow+0x11c>
 8001eca:	2e00      	cmp	r6, #0
 8001ecc:	f280 8454 	bge.w	8002778 <__ieee754_pow+0x9a0>
 8001ed0:	463a      	mov	r2, r7
 8001ed2:	4643      	mov	r3, r8
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	494c      	ldr	r1, [pc, #304]	; (8002008 <__ieee754_pow+0x230>)
 8001ed8:	f7fe fc20 	bl	800071c <__aeabi_ddiv>
 8001edc:	e013      	b.n	8001f06 <__ieee754_pow+0x12e>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e7c3      	b.n	8001e6a <__ieee754_pow+0x92>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e7c1      	b.n	8001e6a <__ieee754_pow+0x92>
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	dad3      	bge.n	8001e92 <__ieee754_pow+0xba>
 8001eea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8001eee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8001ef2:	e7d2      	b.n	8001e9a <__ieee754_pow+0xc2>
 8001ef4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8001ef8:	d108      	bne.n	8001f0c <__ieee754_pow+0x134>
 8001efa:	463a      	mov	r2, r7
 8001efc:	4643      	mov	r3, r8
 8001efe:	4638      	mov	r0, r7
 8001f00:	4641      	mov	r1, r8
 8001f02:	f7fe fae1 	bl	80004c8 <__aeabi_dmul>
 8001f06:	4683      	mov	fp, r0
 8001f08:	468c      	mov	ip, r1
 8001f0a:	e7c6      	b.n	8001e9a <__ieee754_pow+0xc2>
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <__ieee754_pow+0x234>)
 8001f0e:	429e      	cmp	r6, r3
 8001f10:	d10b      	bne.n	8001f2a <__ieee754_pow+0x152>
 8001f12:	f1b9 0f00 	cmp.w	r9, #0
 8001f16:	db08      	blt.n	8001f2a <__ieee754_pow+0x152>
 8001f18:	4638      	mov	r0, r7
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	b011      	add	sp, #68	; 0x44
 8001f1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f22:	f000 bc63 	b.w	80027ec <__ieee754_sqrt>
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	f000 fd09 	bl	8002944 <fabs>
 8001f32:	4683      	mov	fp, r0
 8001f34:	468c      	mov	ip, r1
 8001f36:	f1ba 0f00 	cmp.w	sl, #0
 8001f3a:	d12b      	bne.n	8001f94 <__ieee754_pow+0x1bc>
 8001f3c:	b124      	cbz	r4, 8001f48 <__ieee754_pow+0x170>
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <__ieee754_pow+0x230>)
 8001f40:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d125      	bne.n	8001f94 <__ieee754_pow+0x1bc>
 8001f48:	2e00      	cmp	r6, #0
 8001f4a:	da07      	bge.n	8001f5c <__ieee754_pow+0x184>
 8001f4c:	465a      	mov	r2, fp
 8001f4e:	4663      	mov	r3, ip
 8001f50:	2000      	movs	r0, #0
 8001f52:	492d      	ldr	r1, [pc, #180]	; (8002008 <__ieee754_pow+0x230>)
 8001f54:	f7fe fbe2 	bl	800071c <__aeabi_ddiv>
 8001f58:	4683      	mov	fp, r0
 8001f5a:	468c      	mov	ip, r1
 8001f5c:	f1b9 0f00 	cmp.w	r9, #0
 8001f60:	da9b      	bge.n	8001e9a <__ieee754_pow+0xc2>
 8001f62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8001f66:	9b00      	ldr	r3, [sp, #0]
 8001f68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8001f6c:	4323      	orrs	r3, r4
 8001f6e:	d108      	bne.n	8001f82 <__ieee754_pow+0x1aa>
 8001f70:	465a      	mov	r2, fp
 8001f72:	4663      	mov	r3, ip
 8001f74:	4658      	mov	r0, fp
 8001f76:	4661      	mov	r1, ip
 8001f78:	f7fe f8ee 	bl	8000158 <__aeabi_dsub>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	e7aa      	b.n	8001ed8 <__ieee754_pow+0x100>
 8001f82:	9b00      	ldr	r3, [sp, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d188      	bne.n	8001e9a <__ieee754_pow+0xc2>
 8001f88:	4658      	mov	r0, fp
 8001f8a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8001f8e:	4683      	mov	fp, r0
 8001f90:	469c      	mov	ip, r3
 8001f92:	e782      	b.n	8001e9a <__ieee754_pow+0xc2>
 8001f94:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8001f98:	f109 33ff 	add.w	r3, r9, #4294967295
 8001f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8001f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001fa0:	9b00      	ldr	r3, [sp, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	d104      	bne.n	8001fb0 <__ieee754_pow+0x1d8>
 8001fa6:	463a      	mov	r2, r7
 8001fa8:	4643      	mov	r3, r8
 8001faa:	4638      	mov	r0, r7
 8001fac:	4641      	mov	r1, r8
 8001fae:	e7e3      	b.n	8001f78 <__ieee754_pow+0x1a0>
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <__ieee754_pow+0x238>)
 8001fb2:	429d      	cmp	r5, r3
 8001fb4:	f340 80fe 	ble.w	80021b4 <__ieee754_pow+0x3dc>
 8001fb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8001fbc:	429d      	cmp	r5, r3
 8001fbe:	dd0b      	ble.n	8001fd8 <__ieee754_pow+0x200>
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <__ieee754_pow+0x22c>)
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	dc0e      	bgt.n	8001fe4 <__ieee754_pow+0x20c>
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	f6bf af63 	bge.w	8001e92 <__ieee754_pow+0xba>
 8001fcc:	a308      	add	r3, pc, #32	; (adr r3, 8001ff0 <__ieee754_pow+0x218>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	e794      	b.n	8001f02 <__ieee754_pow+0x12a>
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <__ieee754_pow+0x23c>)
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	ddf3      	ble.n	8001fc6 <__ieee754_pow+0x1ee>
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <__ieee754_pow+0x230>)
 8001fe0:	429c      	cmp	r4, r3
 8001fe2:	dd19      	ble.n	8002018 <__ieee754_pow+0x240>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dcf1      	bgt.n	8001fcc <__ieee754_pow+0x1f4>
 8001fe8:	e753      	b.n	8001e92 <__ieee754_pow+0xba>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	8800759c 	.word	0x8800759c
 8001ff4:	7e37e43c 	.word	0x7e37e43c
 8001ff8:	7ff00000 	.word	0x7ff00000
 8001ffc:	08002baf 	.word	0x08002baf
 8002000:	433fffff 	.word	0x433fffff
 8002004:	3fefffff 	.word	0x3fefffff
 8002008:	3ff00000 	.word	0x3ff00000
 800200c:	3fe00000 	.word	0x3fe00000
 8002010:	41e00000 	.word	0x41e00000
 8002014:	3feffffe 	.word	0x3feffffe
 8002018:	4661      	mov	r1, ip
 800201a:	2200      	movs	r2, #0
 800201c:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <__ieee754_pow+0x3c8>)
 800201e:	4658      	mov	r0, fp
 8002020:	f7fe f89a 	bl	8000158 <__aeabi_dsub>
 8002024:	a354      	add	r3, pc, #336	; (adr r3, 8002178 <__ieee754_pow+0x3a0>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	4604      	mov	r4, r0
 800202c:	460d      	mov	r5, r1
 800202e:	f7fe fa4b 	bl	80004c8 <__aeabi_dmul>
 8002032:	a353      	add	r3, pc, #332	; (adr r3, 8002180 <__ieee754_pow+0x3a8>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4606      	mov	r6, r0
 800203a:	460f      	mov	r7, r1
 800203c:	4620      	mov	r0, r4
 800203e:	4629      	mov	r1, r5
 8002040:	f7fe fa42 	bl	80004c8 <__aeabi_dmul>
 8002044:	2200      	movs	r2, #0
 8002046:	4682      	mov	sl, r0
 8002048:	468b      	mov	fp, r1
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <__ieee754_pow+0x3cc>)
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe fa3a 	bl	80004c8 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	a14b      	add	r1, pc, #300	; (adr r1, 8002188 <__ieee754_pow+0x3b0>)
 800205a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800205e:	f7fe f87b 	bl	8000158 <__aeabi_dsub>
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	f7fe fa2f 	bl	80004c8 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	2000      	movs	r0, #0
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <__ieee754_pow+0x3d0>)
 8002072:	f7fe f871 	bl	8000158 <__aeabi_dsub>
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	4680      	mov	r8, r0
 800207c:	4689      	mov	r9, r1
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	f7fe fa21 	bl	80004c8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4640      	mov	r0, r8
 800208c:	4649      	mov	r1, r9
 800208e:	f7fe fa1b 	bl	80004c8 <__aeabi_dmul>
 8002092:	a33f      	add	r3, pc, #252	; (adr r3, 8002190 <__ieee754_pow+0x3b8>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fa16 	bl	80004c8 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4650      	mov	r0, sl
 80020a2:	4659      	mov	r1, fp
 80020a4:	f7fe f858 	bl	8000158 <__aeabi_dsub>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4604      	mov	r4, r0
 80020ae:	460d      	mov	r5, r1
 80020b0:	4630      	mov	r0, r6
 80020b2:	4639      	mov	r1, r7
 80020b4:	f7fe f852 	bl	800015c <__adddf3>
 80020b8:	2000      	movs	r0, #0
 80020ba:	468b      	mov	fp, r1
 80020bc:	4682      	mov	sl, r0
 80020be:	4632      	mov	r2, r6
 80020c0:	463b      	mov	r3, r7
 80020c2:	f7fe f849 	bl	8000158 <__aeabi_dsub>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe f843 	bl	8000158 <__aeabi_dsub>
 80020d2:	9b00      	ldr	r3, [sp, #0]
 80020d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4313      	orrs	r3, r2
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	4c32      	ldreq	r4, [pc, #200]	; (80021ac <__ieee754_pow+0x3d4>)
 80020e2:	4c2f      	ldrne	r4, [pc, #188]	; (80021a0 <__ieee754_pow+0x3c8>)
 80020e4:	4606      	mov	r6, r0
 80020e6:	e9cd 3400 	strd	r3, r4, [sp]
 80020ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80020ee:	2400      	movs	r4, #0
 80020f0:	460f      	mov	r7, r1
 80020f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	f7fe f82d 	bl	8000158 <__aeabi_dsub>
 80020fe:	4652      	mov	r2, sl
 8002100:	465b      	mov	r3, fp
 8002102:	f7fe f9e1 	bl	80004c8 <__aeabi_dmul>
 8002106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800210a:	4680      	mov	r8, r0
 800210c:	4689      	mov	r9, r1
 800210e:	4630      	mov	r0, r6
 8002110:	4639      	mov	r1, r7
 8002112:	f7fe f9d9 	bl	80004c8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4640      	mov	r0, r8
 800211c:	4649      	mov	r1, r9
 800211e:	f7fe f81d 	bl	800015c <__adddf3>
 8002122:	4622      	mov	r2, r4
 8002124:	462b      	mov	r3, r5
 8002126:	4680      	mov	r8, r0
 8002128:	4689      	mov	r9, r1
 800212a:	4650      	mov	r0, sl
 800212c:	4659      	mov	r1, fp
 800212e:	f7fe f9cb 	bl	80004c8 <__aeabi_dmul>
 8002132:	4604      	mov	r4, r0
 8002134:	460d      	mov	r5, r1
 8002136:	460b      	mov	r3, r1
 8002138:	4602      	mov	r2, r0
 800213a:	4649      	mov	r1, r9
 800213c:	4640      	mov	r0, r8
 800213e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002142:	f7fe f80b 	bl	800015c <__adddf3>
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <__ieee754_pow+0x3d8>)
 8002148:	4682      	mov	sl, r0
 800214a:	4299      	cmp	r1, r3
 800214c:	460f      	mov	r7, r1
 800214e:	460e      	mov	r6, r1
 8002150:	f340 82e1 	ble.w	8002716 <__ieee754_pow+0x93e>
 8002154:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002158:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800215c:	4303      	orrs	r3, r0
 800215e:	f000 81db 	beq.w	8002518 <__ieee754_pow+0x740>
 8002162:	a30d      	add	r3, pc, #52	; (adr r3, 8002198 <__ieee754_pow+0x3c0>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800216c:	f7fe f9ac 	bl	80004c8 <__aeabi_dmul>
 8002170:	a309      	add	r3, pc, #36	; (adr r3, 8002198 <__ieee754_pow+0x3c0>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	e6c4      	b.n	8001f02 <__ieee754_pow+0x12a>
 8002178:	60000000 	.word	0x60000000
 800217c:	3ff71547 	.word	0x3ff71547
 8002180:	f85ddf44 	.word	0xf85ddf44
 8002184:	3e54ae0b 	.word	0x3e54ae0b
 8002188:	55555555 	.word	0x55555555
 800218c:	3fd55555 	.word	0x3fd55555
 8002190:	652b82fe 	.word	0x652b82fe
 8002194:	3ff71547 	.word	0x3ff71547
 8002198:	8800759c 	.word	0x8800759c
 800219c:	7e37e43c 	.word	0x7e37e43c
 80021a0:	3ff00000 	.word	0x3ff00000
 80021a4:	3fd00000 	.word	0x3fd00000
 80021a8:	3fe00000 	.word	0x3fe00000
 80021ac:	bff00000 	.word	0xbff00000
 80021b0:	408fffff 	.word	0x408fffff
 80021b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	da08      	bge.n	80021d0 <__ieee754_pow+0x3f8>
 80021be:	4658      	mov	r0, fp
 80021c0:	4bcd      	ldr	r3, [pc, #820]	; (80024f8 <__ieee754_pow+0x720>)
 80021c2:	4661      	mov	r1, ip
 80021c4:	f7fe f980 	bl	80004c8 <__aeabi_dmul>
 80021c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80021cc:	4683      	mov	fp, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	1523      	asrs	r3, r4, #20
 80021d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80021d6:	4413      	add	r3, r2
 80021d8:	930c      	str	r3, [sp, #48]	; 0x30
 80021da:	4bc8      	ldr	r3, [pc, #800]	; (80024fc <__ieee754_pow+0x724>)
 80021dc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80021e0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80021e4:	429c      	cmp	r4, r3
 80021e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80021ea:	dd08      	ble.n	80021fe <__ieee754_pow+0x426>
 80021ec:	4bc4      	ldr	r3, [pc, #784]	; (8002500 <__ieee754_pow+0x728>)
 80021ee:	429c      	cmp	r4, r3
 80021f0:	f340 815b 	ble.w	80024aa <__ieee754_pow+0x6d2>
 80021f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80021fa:	3301      	adds	r3, #1
 80021fc:	930c      	str	r3, [sp, #48]	; 0x30
 80021fe:	f04f 0800 	mov.w	r8, #0
 8002202:	4658      	mov	r0, fp
 8002204:	4629      	mov	r1, r5
 8002206:	4bbf      	ldr	r3, [pc, #764]	; (8002504 <__ieee754_pow+0x72c>)
 8002208:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800220c:	444b      	add	r3, r9
 800220e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002212:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002216:	461a      	mov	r2, r3
 8002218:	4623      	mov	r3, r4
 800221a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800221e:	f7fd ff9b 	bl	8000158 <__aeabi_dsub>
 8002222:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002226:	4606      	mov	r6, r0
 8002228:	460f      	mov	r7, r1
 800222a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800222e:	f7fd ff95 	bl	800015c <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	2000      	movs	r0, #0
 8002238:	49b3      	ldr	r1, [pc, #716]	; (8002508 <__ieee754_pow+0x730>)
 800223a:	f7fe fa6f 	bl	800071c <__aeabi_ddiv>
 800223e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4630      	mov	r0, r6
 8002248:	4639      	mov	r1, r7
 800224a:	f7fe f93d 	bl	80004c8 <__aeabi_dmul>
 800224e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002252:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002256:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800225a:	2300      	movs	r3, #0
 800225c:	2200      	movs	r2, #0
 800225e:	106d      	asrs	r5, r5, #1
 8002260:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800226a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800226e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8002272:	4650      	mov	r0, sl
 8002274:	4659      	mov	r1, fp
 8002276:	4614      	mov	r4, r2
 8002278:	461d      	mov	r5, r3
 800227a:	f7fe f925 	bl	80004c8 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4630      	mov	r0, r6
 8002284:	4639      	mov	r1, r7
 8002286:	f7fd ff67 	bl	8000158 <__aeabi_dsub>
 800228a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800228e:	4606      	mov	r6, r0
 8002290:	460f      	mov	r7, r1
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fd ff5f 	bl	8000158 <__aeabi_dsub>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80022a2:	f7fd ff59 	bl	8000158 <__aeabi_dsub>
 80022a6:	4652      	mov	r2, sl
 80022a8:	465b      	mov	r3, fp
 80022aa:	f7fe f90d 	bl	80004c8 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4630      	mov	r0, r6
 80022b4:	4639      	mov	r1, r7
 80022b6:	f7fd ff4f 	bl	8000158 <__aeabi_dsub>
 80022ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80022be:	f7fe f903 	bl	80004c8 <__aeabi_dmul>
 80022c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80022c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe f8fb 	bl	80004c8 <__aeabi_dmul>
 80022d2:	a377      	add	r3, pc, #476	; (adr r3, 80024b0 <__ieee754_pow+0x6d8>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	4604      	mov	r4, r0
 80022da:	460d      	mov	r5, r1
 80022dc:	f7fe f8f4 	bl	80004c8 <__aeabi_dmul>
 80022e0:	a375      	add	r3, pc, #468	; (adr r3, 80024b8 <__ieee754_pow+0x6e0>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fd ff39 	bl	800015c <__adddf3>
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	f7fe f8eb 	bl	80004c8 <__aeabi_dmul>
 80022f2:	a373      	add	r3, pc, #460	; (adr r3, 80024c0 <__ieee754_pow+0x6e8>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fd ff30 	bl	800015c <__adddf3>
 80022fc:	4622      	mov	r2, r4
 80022fe:	462b      	mov	r3, r5
 8002300:	f7fe f8e2 	bl	80004c8 <__aeabi_dmul>
 8002304:	a370      	add	r3, pc, #448	; (adr r3, 80024c8 <__ieee754_pow+0x6f0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fd ff27 	bl	800015c <__adddf3>
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	f7fe f8d9 	bl	80004c8 <__aeabi_dmul>
 8002316:	a36e      	add	r3, pc, #440	; (adr r3, 80024d0 <__ieee754_pow+0x6f8>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ff1e 	bl	800015c <__adddf3>
 8002320:	4622      	mov	r2, r4
 8002322:	462b      	mov	r3, r5
 8002324:	f7fe f8d0 	bl	80004c8 <__aeabi_dmul>
 8002328:	a36b      	add	r3, pc, #428	; (adr r3, 80024d8 <__ieee754_pow+0x700>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fd ff15 	bl	800015c <__adddf3>
 8002332:	4622      	mov	r2, r4
 8002334:	4606      	mov	r6, r0
 8002336:	460f      	mov	r7, r1
 8002338:	462b      	mov	r3, r5
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fe f8c3 	bl	80004c8 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4630      	mov	r0, r6
 8002348:	4639      	mov	r1, r7
 800234a:	f7fe f8bd 	bl	80004c8 <__aeabi_dmul>
 800234e:	4604      	mov	r4, r0
 8002350:	460d      	mov	r5, r1
 8002352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002356:	4652      	mov	r2, sl
 8002358:	465b      	mov	r3, fp
 800235a:	f7fd feff 	bl	800015c <__adddf3>
 800235e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002362:	f7fe f8b1 	bl	80004c8 <__aeabi_dmul>
 8002366:	4622      	mov	r2, r4
 8002368:	462b      	mov	r3, r5
 800236a:	f7fd fef7 	bl	800015c <__adddf3>
 800236e:	4652      	mov	r2, sl
 8002370:	4606      	mov	r6, r0
 8002372:	460f      	mov	r7, r1
 8002374:	465b      	mov	r3, fp
 8002376:	4650      	mov	r0, sl
 8002378:	4659      	mov	r1, fp
 800237a:	f7fe f8a5 	bl	80004c8 <__aeabi_dmul>
 800237e:	2200      	movs	r2, #0
 8002380:	4b62      	ldr	r3, [pc, #392]	; (800250c <__ieee754_pow+0x734>)
 8002382:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002386:	f7fd fee9 	bl	800015c <__adddf3>
 800238a:	4632      	mov	r2, r6
 800238c:	463b      	mov	r3, r7
 800238e:	f7fd fee5 	bl	800015c <__adddf3>
 8002392:	9804      	ldr	r0, [sp, #16]
 8002394:	460d      	mov	r5, r1
 8002396:	4604      	mov	r4, r0
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4650      	mov	r0, sl
 800239e:	4659      	mov	r1, fp
 80023a0:	f7fe f892 	bl	80004c8 <__aeabi_dmul>
 80023a4:	2200      	movs	r2, #0
 80023a6:	4682      	mov	sl, r0
 80023a8:	468b      	mov	fp, r1
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <__ieee754_pow+0x734>)
 80023ac:	4620      	mov	r0, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	f7fd fed2 	bl	8000158 <__aeabi_dsub>
 80023b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80023b8:	f7fd fece 	bl	8000158 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4630      	mov	r0, r6
 80023c2:	4639      	mov	r1, r7
 80023c4:	f7fd fec8 	bl	8000158 <__aeabi_dsub>
 80023c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80023cc:	f7fe f87c 	bl	80004c8 <__aeabi_dmul>
 80023d0:	4622      	mov	r2, r4
 80023d2:	4606      	mov	r6, r0
 80023d4:	460f      	mov	r7, r1
 80023d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80023da:	462b      	mov	r3, r5
 80023dc:	f7fe f874 	bl	80004c8 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4630      	mov	r0, r6
 80023e6:	4639      	mov	r1, r7
 80023e8:	f7fd feb8 	bl	800015c <__adddf3>
 80023ec:	4606      	mov	r6, r0
 80023ee:	460f      	mov	r7, r1
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4650      	mov	r0, sl
 80023f6:	4659      	mov	r1, fp
 80023f8:	f7fd feb0 	bl	800015c <__adddf3>
 80023fc:	a338      	add	r3, pc, #224	; (adr r3, 80024e0 <__ieee754_pow+0x708>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	9804      	ldr	r0, [sp, #16]
 8002404:	460d      	mov	r5, r1
 8002406:	4604      	mov	r4, r0
 8002408:	f7fe f85e 	bl	80004c8 <__aeabi_dmul>
 800240c:	4652      	mov	r2, sl
 800240e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002412:	465b      	mov	r3, fp
 8002414:	4620      	mov	r0, r4
 8002416:	4629      	mov	r1, r5
 8002418:	f7fd fe9e 	bl	8000158 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4630      	mov	r0, r6
 8002422:	4639      	mov	r1, r7
 8002424:	f7fd fe98 	bl	8000158 <__aeabi_dsub>
 8002428:	a32f      	add	r3, pc, #188	; (adr r3, 80024e8 <__ieee754_pow+0x710>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f84b 	bl	80004c8 <__aeabi_dmul>
 8002432:	a32f      	add	r3, pc, #188	; (adr r3, 80024f0 <__ieee754_pow+0x718>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	4606      	mov	r6, r0
 800243a:	460f      	mov	r7, r1
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7fe f842 	bl	80004c8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4630      	mov	r0, r6
 800244a:	4639      	mov	r1, r7
 800244c:	f7fd fe86 	bl	800015c <__adddf3>
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <__ieee754_pow+0x738>)
 8002452:	444b      	add	r3, r9
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fd fe80 	bl	800015c <__adddf3>
 800245c:	4604      	mov	r4, r0
 800245e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002460:	460d      	mov	r5, r1
 8002462:	f7fd ffc7 	bl	80003f4 <__aeabi_i2d>
 8002466:	4606      	mov	r6, r0
 8002468:	460f      	mov	r7, r1
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <__ieee754_pow+0x73c>)
 800246c:	4622      	mov	r2, r4
 800246e:	444b      	add	r3, r9
 8002470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002474:	462b      	mov	r3, r5
 8002476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800247a:	f7fd fe6f 	bl	800015c <__adddf3>
 800247e:	4642      	mov	r2, r8
 8002480:	464b      	mov	r3, r9
 8002482:	f7fd fe6b 	bl	800015c <__adddf3>
 8002486:	4632      	mov	r2, r6
 8002488:	463b      	mov	r3, r7
 800248a:	f7fd fe67 	bl	800015c <__adddf3>
 800248e:	9804      	ldr	r0, [sp, #16]
 8002490:	4632      	mov	r2, r6
 8002492:	463b      	mov	r3, r7
 8002494:	4682      	mov	sl, r0
 8002496:	468b      	mov	fp, r1
 8002498:	f7fd fe5e 	bl	8000158 <__aeabi_dsub>
 800249c:	4642      	mov	r2, r8
 800249e:	464b      	mov	r3, r9
 80024a0:	f7fd fe5a 	bl	8000158 <__aeabi_dsub>
 80024a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80024a8:	e60b      	b.n	80020c2 <__ieee754_pow+0x2ea>
 80024aa:	f04f 0801 	mov.w	r8, #1
 80024ae:	e6a8      	b.n	8002202 <__ieee754_pow+0x42a>
 80024b0:	4a454eef 	.word	0x4a454eef
 80024b4:	3fca7e28 	.word	0x3fca7e28
 80024b8:	93c9db65 	.word	0x93c9db65
 80024bc:	3fcd864a 	.word	0x3fcd864a
 80024c0:	a91d4101 	.word	0xa91d4101
 80024c4:	3fd17460 	.word	0x3fd17460
 80024c8:	518f264d 	.word	0x518f264d
 80024cc:	3fd55555 	.word	0x3fd55555
 80024d0:	db6fabff 	.word	0xdb6fabff
 80024d4:	3fdb6db6 	.word	0x3fdb6db6
 80024d8:	33333303 	.word	0x33333303
 80024dc:	3fe33333 	.word	0x3fe33333
 80024e0:	e0000000 	.word	0xe0000000
 80024e4:	3feec709 	.word	0x3feec709
 80024e8:	dc3a03fd 	.word	0xdc3a03fd
 80024ec:	3feec709 	.word	0x3feec709
 80024f0:	145b01f5 	.word	0x145b01f5
 80024f4:	be3e2fe0 	.word	0xbe3e2fe0
 80024f8:	43400000 	.word	0x43400000
 80024fc:	0003988e 	.word	0x0003988e
 8002500:	000bb679 	.word	0x000bb679
 8002504:	08002bb0 	.word	0x08002bb0
 8002508:	3ff00000 	.word	0x3ff00000
 800250c:	40080000 	.word	0x40080000
 8002510:	08002bd0 	.word	0x08002bd0
 8002514:	08002bc0 	.word	0x08002bc0
 8002518:	a39b      	add	r3, pc, #620	; (adr r3, 8002788 <__ieee754_pow+0x9b0>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	4640      	mov	r0, r8
 8002520:	4649      	mov	r1, r9
 8002522:	f7fd fe1b 	bl	800015c <__adddf3>
 8002526:	4622      	mov	r2, r4
 8002528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800252c:	462b      	mov	r3, r5
 800252e:	4650      	mov	r0, sl
 8002530:	4639      	mov	r1, r7
 8002532:	f7fd fe11 	bl	8000158 <__aeabi_dsub>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800253e:	f7fe fa53 	bl	80009e8 <__aeabi_dcmpgt>
 8002542:	2800      	cmp	r0, #0
 8002544:	f47f ae0d 	bne.w	8002162 <__ieee754_pow+0x38a>
 8002548:	4aa3      	ldr	r2, [pc, #652]	; (80027d8 <__ieee754_pow+0xa00>)
 800254a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800254e:	4293      	cmp	r3, r2
 8002550:	f340 8103 	ble.w	800275a <__ieee754_pow+0x982>
 8002554:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002558:	2000      	movs	r0, #0
 800255a:	151b      	asrs	r3, r3, #20
 800255c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002560:	fa4a f303 	asr.w	r3, sl, r3
 8002564:	4433      	add	r3, r6
 8002566:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800256a:	4f9c      	ldr	r7, [pc, #624]	; (80027dc <__ieee754_pow+0xa04>)
 800256c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002570:	4117      	asrs	r7, r2
 8002572:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002576:	ea23 0107 	bic.w	r1, r3, r7
 800257a:	f1c2 0214 	rsb	r2, r2, #20
 800257e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002582:	fa4a fa02 	asr.w	sl, sl, r2
 8002586:	2e00      	cmp	r6, #0
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	bfb8      	it	lt
 8002592:	f1ca 0a00 	rsblt	sl, sl, #0
 8002596:	f7fd fddf 	bl	8000158 <__aeabi_dsub>
 800259a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800259e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80025a2:	4642      	mov	r2, r8
 80025a4:	464b      	mov	r3, r9
 80025a6:	f7fd fdd9 	bl	800015c <__adddf3>
 80025aa:	a379      	add	r3, pc, #484	; (adr r3, 8002790 <__ieee754_pow+0x9b8>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	2000      	movs	r0, #0
 80025b2:	460d      	mov	r5, r1
 80025b4:	4604      	mov	r4, r0
 80025b6:	f7fd ff87 	bl	80004c8 <__aeabi_dmul>
 80025ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025be:	4606      	mov	r6, r0
 80025c0:	460f      	mov	r7, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f7fd fdc7 	bl	8000158 <__aeabi_dsub>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4640      	mov	r0, r8
 80025d0:	4649      	mov	r1, r9
 80025d2:	f7fd fdc1 	bl	8000158 <__aeabi_dsub>
 80025d6:	a370      	add	r3, pc, #448	; (adr r3, 8002798 <__ieee754_pow+0x9c0>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fd ff74 	bl	80004c8 <__aeabi_dmul>
 80025e0:	a36f      	add	r3, pc, #444	; (adr r3, 80027a0 <__ieee754_pow+0x9c8>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	4680      	mov	r8, r0
 80025e8:	4689      	mov	r9, r1
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fd ff6b 	bl	80004c8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4640      	mov	r0, r8
 80025f8:	4649      	mov	r1, r9
 80025fa:	f7fd fdaf 	bl	800015c <__adddf3>
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4630      	mov	r0, r6
 8002608:	4639      	mov	r1, r7
 800260a:	f7fd fda7 	bl	800015c <__adddf3>
 800260e:	4632      	mov	r2, r6
 8002610:	463b      	mov	r3, r7
 8002612:	4680      	mov	r8, r0
 8002614:	4689      	mov	r9, r1
 8002616:	f7fd fd9f 	bl	8000158 <__aeabi_dsub>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4620      	mov	r0, r4
 8002620:	4629      	mov	r1, r5
 8002622:	f7fd fd99 	bl	8000158 <__aeabi_dsub>
 8002626:	4642      	mov	r2, r8
 8002628:	4606      	mov	r6, r0
 800262a:	460f      	mov	r7, r1
 800262c:	464b      	mov	r3, r9
 800262e:	4640      	mov	r0, r8
 8002630:	4649      	mov	r1, r9
 8002632:	f7fd ff49 	bl	80004c8 <__aeabi_dmul>
 8002636:	a35c      	add	r3, pc, #368	; (adr r3, 80027a8 <__ieee754_pow+0x9d0>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	4604      	mov	r4, r0
 800263e:	460d      	mov	r5, r1
 8002640:	f7fd ff42 	bl	80004c8 <__aeabi_dmul>
 8002644:	a35a      	add	r3, pc, #360	; (adr r3, 80027b0 <__ieee754_pow+0x9d8>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fd85 	bl	8000158 <__aeabi_dsub>
 800264e:	4622      	mov	r2, r4
 8002650:	462b      	mov	r3, r5
 8002652:	f7fd ff39 	bl	80004c8 <__aeabi_dmul>
 8002656:	a358      	add	r3, pc, #352	; (adr r3, 80027b8 <__ieee754_pow+0x9e0>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fd fd7e 	bl	800015c <__adddf3>
 8002660:	4622      	mov	r2, r4
 8002662:	462b      	mov	r3, r5
 8002664:	f7fd ff30 	bl	80004c8 <__aeabi_dmul>
 8002668:	a355      	add	r3, pc, #340	; (adr r3, 80027c0 <__ieee754_pow+0x9e8>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd fd73 	bl	8000158 <__aeabi_dsub>
 8002672:	4622      	mov	r2, r4
 8002674:	462b      	mov	r3, r5
 8002676:	f7fd ff27 	bl	80004c8 <__aeabi_dmul>
 800267a:	a353      	add	r3, pc, #332	; (adr r3, 80027c8 <__ieee754_pow+0x9f0>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fd fd6c 	bl	800015c <__adddf3>
 8002684:	4622      	mov	r2, r4
 8002686:	462b      	mov	r3, r5
 8002688:	f7fd ff1e 	bl	80004c8 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4640      	mov	r0, r8
 8002692:	4649      	mov	r1, r9
 8002694:	f7fd fd60 	bl	8000158 <__aeabi_dsub>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4640      	mov	r0, r8
 80026a2:	4649      	mov	r1, r9
 80026a4:	f7fd ff10 	bl	80004c8 <__aeabi_dmul>
 80026a8:	2200      	movs	r2, #0
 80026aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b2:	4620      	mov	r0, r4
 80026b4:	4629      	mov	r1, r5
 80026b6:	f7fd fd4f 	bl	8000158 <__aeabi_dsub>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026c2:	f7fe f82b 	bl	800071c <__aeabi_ddiv>
 80026c6:	4632      	mov	r2, r6
 80026c8:	4604      	mov	r4, r0
 80026ca:	460d      	mov	r5, r1
 80026cc:	463b      	mov	r3, r7
 80026ce:	4640      	mov	r0, r8
 80026d0:	4649      	mov	r1, r9
 80026d2:	f7fd fef9 	bl	80004c8 <__aeabi_dmul>
 80026d6:	4632      	mov	r2, r6
 80026d8:	463b      	mov	r3, r7
 80026da:	f7fd fd3f 	bl	800015c <__adddf3>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fd37 	bl	8000158 <__aeabi_dsub>
 80026ea:	4642      	mov	r2, r8
 80026ec:	464b      	mov	r3, r9
 80026ee:	f7fd fd33 	bl	8000158 <__aeabi_dsub>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	2000      	movs	r0, #0
 80026f8:	4939      	ldr	r1, [pc, #228]	; (80027e0 <__ieee754_pow+0xa08>)
 80026fa:	f7fd fd2d 	bl	8000158 <__aeabi_dsub>
 80026fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002702:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002706:	da2b      	bge.n	8002760 <__ieee754_pow+0x988>
 8002708:	4652      	mov	r2, sl
 800270a:	f000 f9b9 	bl	8002a80 <scalbn>
 800270e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002712:	f7ff bbf6 	b.w	8001f02 <__ieee754_pow+0x12a>
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <__ieee754_pow+0xa0c>)
 8002718:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800271c:	429f      	cmp	r7, r3
 800271e:	f77f af13 	ble.w	8002548 <__ieee754_pow+0x770>
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <__ieee754_pow+0xa10>)
 8002724:	440b      	add	r3, r1
 8002726:	4303      	orrs	r3, r0
 8002728:	d00b      	beq.n	8002742 <__ieee754_pow+0x96a>
 800272a:	a329      	add	r3, pc, #164	; (adr r3, 80027d0 <__ieee754_pow+0x9f8>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002734:	f7fd fec8 	bl	80004c8 <__aeabi_dmul>
 8002738:	a325      	add	r3, pc, #148	; (adr r3, 80027d0 <__ieee754_pow+0x9f8>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7ff bbe0 	b.w	8001f02 <__ieee754_pow+0x12a>
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f7fd fd07 	bl	8000158 <__aeabi_dsub>
 800274a:	4642      	mov	r2, r8
 800274c:	464b      	mov	r3, r9
 800274e:	f7fe f941 	bl	80009d4 <__aeabi_dcmpge>
 8002752:	2800      	cmp	r0, #0
 8002754:	f43f aef8 	beq.w	8002548 <__ieee754_pow+0x770>
 8002758:	e7e7      	b.n	800272a <__ieee754_pow+0x952>
 800275a:	f04f 0a00 	mov.w	sl, #0
 800275e:	e71e      	b.n	800259e <__ieee754_pow+0x7c6>
 8002760:	4621      	mov	r1, r4
 8002762:	e7d4      	b.n	800270e <__ieee754_pow+0x936>
 8002764:	f04f 0b00 	mov.w	fp, #0
 8002768:	f8df c074 	ldr.w	ip, [pc, #116]	; 80027e0 <__ieee754_pow+0xa08>
 800276c:	f7ff bb95 	b.w	8001e9a <__ieee754_pow+0xc2>
 8002770:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002774:	f7ff bb91 	b.w	8001e9a <__ieee754_pow+0xc2>
 8002778:	4638      	mov	r0, r7
 800277a:	4641      	mov	r1, r8
 800277c:	f7ff bbc3 	b.w	8001f06 <__ieee754_pow+0x12e>
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	f7ff bb9f 	b.w	8001ec4 <__ieee754_pow+0xec>
 8002786:	bf00      	nop
 8002788:	652b82fe 	.word	0x652b82fe
 800278c:	3c971547 	.word	0x3c971547
 8002790:	00000000 	.word	0x00000000
 8002794:	3fe62e43 	.word	0x3fe62e43
 8002798:	fefa39ef 	.word	0xfefa39ef
 800279c:	3fe62e42 	.word	0x3fe62e42
 80027a0:	0ca86c39 	.word	0x0ca86c39
 80027a4:	be205c61 	.word	0xbe205c61
 80027a8:	72bea4d0 	.word	0x72bea4d0
 80027ac:	3e663769 	.word	0x3e663769
 80027b0:	c5d26bf1 	.word	0xc5d26bf1
 80027b4:	3ebbbd41 	.word	0x3ebbbd41
 80027b8:	af25de2c 	.word	0xaf25de2c
 80027bc:	3f11566a 	.word	0x3f11566a
 80027c0:	16bebd93 	.word	0x16bebd93
 80027c4:	3f66c16c 	.word	0x3f66c16c
 80027c8:	5555553e 	.word	0x5555553e
 80027cc:	3fc55555 	.word	0x3fc55555
 80027d0:	c2f8f359 	.word	0xc2f8f359
 80027d4:	01a56e1f 	.word	0x01a56e1f
 80027d8:	3fe00000 	.word	0x3fe00000
 80027dc:	000fffff 	.word	0x000fffff
 80027e0:	3ff00000 	.word	0x3ff00000
 80027e4:	4090cbff 	.word	0x4090cbff
 80027e8:	3f6f3400 	.word	0x3f6f3400

080027ec <__ieee754_sqrt>:
 80027ec:	4b54      	ldr	r3, [pc, #336]	; (8002940 <__ieee754_sqrt+0x154>)
 80027ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f2:	438b      	bics	r3, r1
 80027f4:	4606      	mov	r6, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	460a      	mov	r2, r1
 80027fa:	460c      	mov	r4, r1
 80027fc:	d10f      	bne.n	800281e <__ieee754_sqrt+0x32>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	f7fd fe61 	bl	80004c8 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4630      	mov	r0, r6
 800280c:	4629      	mov	r1, r5
 800280e:	f7fd fca5 	bl	800015c <__adddf3>
 8002812:	4606      	mov	r6, r0
 8002814:	460d      	mov	r5, r1
 8002816:	4630      	mov	r0, r6
 8002818:	4629      	mov	r1, r5
 800281a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800281e:	2900      	cmp	r1, #0
 8002820:	4607      	mov	r7, r0
 8002822:	4603      	mov	r3, r0
 8002824:	dc0e      	bgt.n	8002844 <__ieee754_sqrt+0x58>
 8002826:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800282a:	ea5c 0707 	orrs.w	r7, ip, r7
 800282e:	d0f2      	beq.n	8002816 <__ieee754_sqrt+0x2a>
 8002830:	b141      	cbz	r1, 8002844 <__ieee754_sqrt+0x58>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	f7fd fc8f 	bl	8000158 <__aeabi_dsub>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	f7fd ff6d 	bl	800071c <__aeabi_ddiv>
 8002842:	e7e6      	b.n	8002812 <__ieee754_sqrt+0x26>
 8002844:	1512      	asrs	r2, r2, #20
 8002846:	d074      	beq.n	8002932 <__ieee754_sqrt+0x146>
 8002848:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800284c:	07d5      	lsls	r5, r2, #31
 800284e:	f04f 0500 	mov.w	r5, #0
 8002852:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002856:	bf48      	it	mi
 8002858:	0fd9      	lsrmi	r1, r3, #31
 800285a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800285e:	bf44      	itt	mi
 8002860:	005b      	lslmi	r3, r3, #1
 8002862:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8002866:	1051      	asrs	r1, r2, #1
 8002868:	0fda      	lsrs	r2, r3, #31
 800286a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800286e:	4628      	mov	r0, r5
 8002870:	2216      	movs	r2, #22
 8002872:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	1987      	adds	r7, r0, r6
 800287a:	42a7      	cmp	r7, r4
 800287c:	bfde      	ittt	le
 800287e:	19b8      	addle	r0, r7, r6
 8002880:	1be4      	suble	r4, r4, r7
 8002882:	19ad      	addle	r5, r5, r6
 8002884:	0fdf      	lsrs	r7, r3, #31
 8002886:	3a01      	subs	r2, #1
 8002888:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800288c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002890:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002894:	d1f0      	bne.n	8002878 <__ieee754_sqrt+0x8c>
 8002896:	f04f 0c20 	mov.w	ip, #32
 800289a:	4696      	mov	lr, r2
 800289c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80028a0:	4284      	cmp	r4, r0
 80028a2:	eb06 070e 	add.w	r7, r6, lr
 80028a6:	dc02      	bgt.n	80028ae <__ieee754_sqrt+0xc2>
 80028a8:	d112      	bne.n	80028d0 <__ieee754_sqrt+0xe4>
 80028aa:	429f      	cmp	r7, r3
 80028ac:	d810      	bhi.n	80028d0 <__ieee754_sqrt+0xe4>
 80028ae:	2f00      	cmp	r7, #0
 80028b0:	eb07 0e06 	add.w	lr, r7, r6
 80028b4:	da42      	bge.n	800293c <__ieee754_sqrt+0x150>
 80028b6:	f1be 0f00 	cmp.w	lr, #0
 80028ba:	db3f      	blt.n	800293c <__ieee754_sqrt+0x150>
 80028bc:	f100 0801 	add.w	r8, r0, #1
 80028c0:	1a24      	subs	r4, r4, r0
 80028c2:	4640      	mov	r0, r8
 80028c4:	429f      	cmp	r7, r3
 80028c6:	bf88      	it	hi
 80028c8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80028cc:	1bdb      	subs	r3, r3, r7
 80028ce:	4432      	add	r2, r6
 80028d0:	0064      	lsls	r4, r4, #1
 80028d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80028d6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80028da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80028de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028e2:	d1dd      	bne.n	80028a0 <__ieee754_sqrt+0xb4>
 80028e4:	4323      	orrs	r3, r4
 80028e6:	d006      	beq.n	80028f6 <__ieee754_sqrt+0x10a>
 80028e8:	1c54      	adds	r4, r2, #1
 80028ea:	bf0b      	itete	eq
 80028ec:	4662      	moveq	r2, ip
 80028ee:	3201      	addne	r2, #1
 80028f0:	3501      	addeq	r5, #1
 80028f2:	f022 0201 	bicne.w	r2, r2, #1
 80028f6:	106b      	asrs	r3, r5, #1
 80028f8:	0852      	lsrs	r2, r2, #1
 80028fa:	07e8      	lsls	r0, r5, #31
 80028fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002900:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002904:	bf48      	it	mi
 8002906:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800290a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800290e:	4616      	mov	r6, r2
 8002910:	e781      	b.n	8002816 <__ieee754_sqrt+0x2a>
 8002912:	0adc      	lsrs	r4, r3, #11
 8002914:	3915      	subs	r1, #21
 8002916:	055b      	lsls	r3, r3, #21
 8002918:	2c00      	cmp	r4, #0
 800291a:	d0fa      	beq.n	8002912 <__ieee754_sqrt+0x126>
 800291c:	02e6      	lsls	r6, r4, #11
 800291e:	d50a      	bpl.n	8002936 <__ieee754_sqrt+0x14a>
 8002920:	f1c2 0020 	rsb	r0, r2, #32
 8002924:	fa23 f000 	lsr.w	r0, r3, r0
 8002928:	1e55      	subs	r5, r2, #1
 800292a:	4093      	lsls	r3, r2
 800292c:	4304      	orrs	r4, r0
 800292e:	1b4a      	subs	r2, r1, r5
 8002930:	e78a      	b.n	8002848 <__ieee754_sqrt+0x5c>
 8002932:	4611      	mov	r1, r2
 8002934:	e7f0      	b.n	8002918 <__ieee754_sqrt+0x12c>
 8002936:	0064      	lsls	r4, r4, #1
 8002938:	3201      	adds	r2, #1
 800293a:	e7ef      	b.n	800291c <__ieee754_sqrt+0x130>
 800293c:	4680      	mov	r8, r0
 800293e:	e7bf      	b.n	80028c0 <__ieee754_sqrt+0xd4>
 8002940:	7ff00000 	.word	0x7ff00000

08002944 <fabs>:
 8002944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002948:	4619      	mov	r1, r3
 800294a:	4770      	bx	lr

0800294c <finite>:
 800294c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002950:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8002954:	0fc0      	lsrs	r0, r0, #31
 8002956:	4770      	bx	lr

08002958 <matherr>:
 8002958:	2000      	movs	r0, #0
 800295a:	4770      	bx	lr

0800295c <nan>:
 800295c:	2000      	movs	r0, #0
 800295e:	4901      	ldr	r1, [pc, #4]	; (8002964 <nan+0x8>)
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	7ff80000 	.word	0x7ff80000

08002968 <rint>:
 8002968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800296a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800296e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8002972:	f1bc 0f13 	cmp.w	ip, #19
 8002976:	4604      	mov	r4, r0
 8002978:	460d      	mov	r5, r1
 800297a:	460b      	mov	r3, r1
 800297c:	4606      	mov	r6, r0
 800297e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8002982:	dc5a      	bgt.n	8002a3a <rint+0xd2>
 8002984:	f1bc 0f00 	cmp.w	ip, #0
 8002988:	da2b      	bge.n	80029e2 <rint+0x7a>
 800298a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800298e:	4302      	orrs	r2, r0
 8002990:	d023      	beq.n	80029da <rint+0x72>
 8002992:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002996:	4302      	orrs	r2, r0
 8002998:	4256      	negs	r6, r2
 800299a:	4316      	orrs	r6, r2
 800299c:	0c4b      	lsrs	r3, r1, #17
 800299e:	0b36      	lsrs	r6, r6, #12
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <rint+0x10c>)
 80029a2:	045b      	lsls	r3, r3, #17
 80029a4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80029a8:	ea46 0503 	orr.w	r5, r6, r3
 80029ac:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80029b0:	4602      	mov	r2, r0
 80029b2:	462b      	mov	r3, r5
 80029b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80029b8:	4620      	mov	r0, r4
 80029ba:	4629      	mov	r1, r5
 80029bc:	f7fd fbce 	bl	800015c <__adddf3>
 80029c0:	e9cd 0100 	strd	r0, r1, [sp]
 80029c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80029c8:	462b      	mov	r3, r5
 80029ca:	4622      	mov	r2, r4
 80029cc:	f7fd fbc4 	bl	8000158 <__aeabi_dsub>
 80029d0:	4604      	mov	r4, r0
 80029d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80029d6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	b003      	add	sp, #12
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e2:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <rint+0x110>)
 80029e4:	fa42 f20c 	asr.w	r2, r2, ip
 80029e8:	4011      	ands	r1, r2
 80029ea:	4301      	orrs	r1, r0
 80029ec:	d0f5      	beq.n	80029da <rint+0x72>
 80029ee:	0852      	lsrs	r2, r2, #1
 80029f0:	ea05 0102 	and.w	r1, r5, r2
 80029f4:	ea50 0601 	orrs.w	r6, r0, r1
 80029f8:	d00c      	beq.n	8002a14 <rint+0xac>
 80029fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029fe:	f1bc 0f13 	cmp.w	ip, #19
 8002a02:	bf0c      	ite	eq
 8002a04:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8002a08:	2600      	movne	r6, #0
 8002a0a:	ea25 0202 	bic.w	r2, r5, r2
 8002a0e:	fa43 f30c 	asr.w	r3, r3, ip
 8002a12:	4313      	orrs	r3, r2
 8002a14:	4917      	ldr	r1, [pc, #92]	; (8002a74 <rint+0x10c>)
 8002a16:	4632      	mov	r2, r6
 8002a18:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8002a1c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fb9a 	bl	800015c <__adddf3>
 8002a28:	e9cd 0100 	strd	r0, r1, [sp]
 8002a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a30:	4622      	mov	r2, r4
 8002a32:	462b      	mov	r3, r5
 8002a34:	f7fd fb90 	bl	8000158 <__aeabi_dsub>
 8002a38:	e008      	b.n	8002a4c <rint+0xe4>
 8002a3a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8002a3e:	dd08      	ble.n	8002a52 <rint+0xea>
 8002a40:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8002a44:	d1c9      	bne.n	80029da <rint+0x72>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f7fd fb88 	bl	800015c <__adddf3>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	e7c3      	b.n	80029da <rint+0x72>
 8002a52:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8002a56:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5a:	40ca      	lsrs	r2, r1
 8002a5c:	4210      	tst	r0, r2
 8002a5e:	d0bc      	beq.n	80029da <rint+0x72>
 8002a60:	0852      	lsrs	r2, r2, #1
 8002a62:	4210      	tst	r0, r2
 8002a64:	bf1f      	itttt	ne
 8002a66:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8002a6a:	ea20 0202 	bicne.w	r2, r0, r2
 8002a6e:	410e      	asrne	r6, r1
 8002a70:	4316      	orrne	r6, r2
 8002a72:	e7cf      	b.n	8002a14 <rint+0xac>
 8002a74:	08002be0 	.word	0x08002be0
 8002a78:	000fffff 	.word	0x000fffff
 8002a7c:	00000000 	.word	0x00000000

08002a80 <scalbn>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	4616      	mov	r6, r2
 8002a84:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002a88:	4604      	mov	r4, r0
 8002a8a:	460d      	mov	r5, r1
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	b982      	cbnz	r2, 8002ab2 <scalbn+0x32>
 8002a90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a94:	4303      	orrs	r3, r0
 8002a96:	d034      	beq.n	8002b02 <scalbn+0x82>
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <scalbn+0xd0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f7fd fd14 	bl	80004c8 <__aeabi_dmul>
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <scalbn+0xd4>)
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	429e      	cmp	r6, r3
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	da0d      	bge.n	8002ac6 <scalbn+0x46>
 8002aaa:	a325      	add	r3, pc, #148	; (adr r3, 8002b40 <scalbn+0xc0>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	e01c      	b.n	8002aec <scalbn+0x6c>
 8002ab2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8002ab6:	42ba      	cmp	r2, r7
 8002ab8:	d109      	bne.n	8002ace <scalbn+0x4e>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f7fd fb4e 	bl	800015c <__adddf3>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	e01d      	b.n	8002b02 <scalbn+0x82>
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002acc:	3a36      	subs	r2, #54	; 0x36
 8002ace:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002ad2:	4432      	add	r2, r6
 8002ad4:	428a      	cmp	r2, r1
 8002ad6:	dd0c      	ble.n	8002af2 <scalbn+0x72>
 8002ad8:	4622      	mov	r2, r4
 8002ada:	462b      	mov	r3, r5
 8002adc:	a11a      	add	r1, pc, #104	; (adr r1, 8002b48 <scalbn+0xc8>)
 8002ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae2:	f000 f83b 	bl	8002b5c <copysign>
 8002ae6:	a318      	add	r3, pc, #96	; (adr r3, 8002b48 <scalbn+0xc8>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fcec 	bl	80004c8 <__aeabi_dmul>
 8002af0:	e7e6      	b.n	8002ac0 <scalbn+0x40>
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	dd08      	ble.n	8002b08 <scalbn+0x88>
 8002af6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002afa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002afe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b08:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002b0c:	da0b      	bge.n	8002b26 <scalbn+0xa6>
 8002b0e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002b12:	429e      	cmp	r6, r3
 8002b14:	4622      	mov	r2, r4
 8002b16:	462b      	mov	r3, r5
 8002b18:	dce0      	bgt.n	8002adc <scalbn+0x5c>
 8002b1a:	a109      	add	r1, pc, #36	; (adr r1, 8002b40 <scalbn+0xc0>)
 8002b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b20:	f000 f81c 	bl	8002b5c <copysign>
 8002b24:	e7c1      	b.n	8002aaa <scalbn+0x2a>
 8002b26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002b2a:	3236      	adds	r2, #54	; 0x36
 8002b2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <scalbn+0xd8>)
 8002b3c:	e7d6      	b.n	8002aec <scalbn+0x6c>
 8002b3e:	bf00      	nop
 8002b40:	c2f8f359 	.word	0xc2f8f359
 8002b44:	01a56e1f 	.word	0x01a56e1f
 8002b48:	8800759c 	.word	0x8800759c
 8002b4c:	7e37e43c 	.word	0x7e37e43c
 8002b50:	43500000 	.word	0x43500000
 8002b54:	ffff3cb0 	.word	0xffff3cb0
 8002b58:	3c900000 	.word	0x3c900000

08002b5c <copysign>:
 8002b5c:	b530      	push	{r4, r5, lr}
 8002b5e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b66:	ea42 0503 	orr.w	r5, r2, r3
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	bd30      	pop	{r4, r5, pc}
	...

08002b70 <_init>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	bf00      	nop
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr

08002b7c <_fini>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	bf00      	nop
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr
